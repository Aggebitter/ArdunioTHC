
ArduinoTHC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000314  00800200  00004976  00004a0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004976  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000333  00800514  00800514  00004d1e  2**0
                  ALLOC
  3 .debug_aranges 00000ac0  00000000  00000000  00004d1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00001ccb  00000000  00000000  000057de  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000e4b4  00000000  00000000  000074a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002a34  00000000  00000000  0001595d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00007319  00000000  00000000  00018391  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000012e0  00000000  00000000  0001f6ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000389b  00000000  00000000  0002098c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00005c54  00000000  00000000  00024227  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000a30  00000000  00000000  00029e7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
//
Button::Button(char *name,
	       int pin, bool paramActiveHigh,
	       unsigned int paramDebounceTimeMs,
	       unsigned int paramRepeatStartDelayMs,
	       unsigned int paramRepeatEveryMs)
       0:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__dtors_end>
	{
	torchOn = false;
	arcGood = false;
	// Copy the pointer to the display object.
	display = displayPtr;
	}
       4:	0c 94 ad 20 	jmp	0x415a	; 0x415a <__vector_1>
	{
		cutTimer.startTimer();
		Serial1.write(PC_RESP_START_CUT);
	}

void SendCutEndPacket()
       8:	0c 94 de 20 	jmp	0x41bc	; 0x41bc <__vector_2>
	tipMinutes = 0;
	tipSeconds = 0;
	writeCount = 0;
	defaultState = THC_STATE_ENABLED;

	}
       c:	0c 94 0f 21 	jmp	0x421e	; 0x421e <__vector_3>

void TorchKerfCrossed(THCInterface *display)
	{
	currentStateData.kerfEncountered = false;
	currentStateData.runVoltageControl = true;
	}
      10:	0c 94 40 21 	jmp	0x4280	; 0x4280 <__vector_4>



THCInterface::~THCInterface()
	{
	}
      14:	0c 94 71 21 	jmp	0x42e2	; 0x42e2 <__vector_5>
Timer::Timer()
    {
    // Initialize the start time to 0 in case "startTimer()" is
    // never called.
    startTimeMillis = 0;
    }
      18:	0c 94 a2 21 	jmp	0x4344	; 0x4344 <__vector_6>
  _displaymode |= LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will 'left justify' text from the cursor
void LiquidCrystal::noAutoscroll(void) {
      1c:	0c 94 d3 21 	jmp	0x43a6	; 0x43a6 <__vector_7>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
      20:	0c 94 04 22 	jmp	0x4408	; 0x4408 <__vector_8>
    n += write(*buffer++);
  }
  return n;
}

size_t Print::print(const __FlashStringHelper *ifsh)
      24:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
#endif
    }
  }
}

void detachInterrupt(uint8_t interruptNum) {
      28:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
}

void operator delete(void * ptr)
{
  free(ptr);
} 
      2c:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
	SREG = oldSREG;

	return m;
}

unsigned long micros() {
      30:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
{
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
}
      34:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      38:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      3c:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      40:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      44:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      48:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      4c:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      50:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      54:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      58:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      5c:	0c 94 47 22 	jmp	0x448e	; 0x448e <__vector_23>
      60:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      64:	0c 94 74 1a 	jmp	0x34e8	; 0x34e8 <__vector_25>
      68:	0c 94 bc 1b 	jmp	0x3778	; 0x3778 <__vector_26>
      6c:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      70:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      74:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      78:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      7c:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      80:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      84:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      88:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      8c:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      90:	0c 94 b4 1a 	jmp	0x3568	; 0x3568 <__vector_36>
      94:	0c 94 fb 1b 	jmp	0x37f6	; 0x37f6 <__vector_37>
      98:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      9c:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      a0:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      a4:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      a8:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      ac:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      b0:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      b4:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      b8:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      bc:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      c0:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      c4:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      c8:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      cc:	0c 94 f4 1a 	jmp	0x35e8	; 0x35e8 <__vector_51>
      d0:	0c 94 3a 1c 	jmp	0x3874	; 0x3874 <__vector_52>
      d4:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      d8:	0c 94 34 1b 	jmp	0x3668	; 0x3668 <__vector_54>
      dc:	0c 94 79 1c 	jmp	0x38f2	; 0x38f2 <__vector_55>
      e0:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__bad_interrupt>
      e4:	d1 0b       	sbc	r29, r17
      e6:	d6 0b       	sbc	r29, r22
      e8:	dd 0b       	sbc	r29, r29
      ea:	18 0c       	add	r1, r8
      ec:	47 0c       	add	r4, r7
      ee:	13 0c       	add	r1, r3
      f0:	f7 0c       	add	r15, r7
      f2:	e4 0b       	sbc	r30, r20
      f4:	0c 0c       	add	r0, r12
      f6:	50 0c       	add	r5, r0
      f8:	57 0c       	add	r5, r7
      fa:	5d 0c       	add	r5, r13
      fc:	7e 0c       	add	r7, r14
      fe:	9f 0c       	add	r9, r15
     100:	d0 0c       	add	r13, r0
     102:	d6 0c       	add	r13, r6
     104:	dc 0c       	add	r13, r12
     106:	e2 0c       	add	r14, r2
     108:	e8 0c       	add	r14, r8
     10a:	ef 0c       	add	r14, r15
     10c:	65 0c       	add	r6, r5
     10e:	6d 0c       	add	r6, r13
     110:	75 0c       	add	r7, r5
     112:	9a 10       	cpse	r9, r10
     114:	e0 10       	cpse	r14, r0
     116:	e9 11       	cpse	r30, r9
     118:	06 12       	cpse	r0, r22
     11a:	b2 12       	cpse	r11, r18
     11c:	e7 12       	cpse	r14, r23
     11e:	00 13       	cpse	r16, r16
     120:	15 13       	cpse	r17, r21
     122:	fa 10       	cpse	r15, r10
     124:	3d 11       	cpse	r19, r13
     126:	54 11       	cpse	r21, r4
     128:	71 11       	cpse	r23, r1
     12a:	92 11       	cpse	r25, r2
     12c:	ad 11       	cpse	r26, r13
     12e:	cb 11       	cpse	r28, r11
     130:	03 12       	cpse	r0, r19
     132:	20 12       	cpse	r2, r16
     134:	3a 12       	cpse	r3, r26
     136:	3d 12       	cpse	r3, r29
     138:	57 12       	cpse	r5, r23
     13a:	5a 12       	cpse	r5, r26
     13c:	74 12       	cpse	r7, r20
     13e:	77 12       	cpse	r7, r23
     140:	91 12       	cpse	r9, r17
     142:	cc 12       	cpse	r12, r28
     144:	79 13       	cpse	r23, r25
     146:	93 13       	cpse	r25, r19
     148:	a3 13       	cpse	r26, r19
     14a:	25 14       	cp	r2, r5
     14c:	35 16       	cp	r3, r21
     14e:	01 17       	cp	r16, r17
     150:	01 17       	cp	r16, r17
     152:	01 17       	cp	r16, r17
     154:	4e 16       	cp	r4, r30
     156:	5b 16       	cp	r5, r27
     158:	74 16       	cp	r7, r20
     15a:	8d 16       	cp	r8, r29
     15c:	a6 16       	cp	r10, r22
     15e:	b8 16       	cp	r11, r24
     160:	dc 16       	cp	r13, r28
     162:	b8 13       	cpse	r27, r24
     164:	3e 14       	cp	r3, r14
     166:	95 14       	cp	r9, r5
     168:	51 14       	cp	r5, r1
     16a:	fd 14       	cp	r15, r13
     16c:	66 14       	cp	r6, r6
     16e:	65 15       	cp	r22, r5
     170:	82 14       	cp	r8, r2
     172:	cd 15       	cp	r28, r13
     174:	f8 16       	cp	r15, r24

00000176 <port_to_mode_PGM>:
     176:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     186:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000190 <port_to_output_PGM>:
     190:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     1a0:	02 01 00 00 05 01 08 01 0b 01                       ..........

000001aa <port_to_input_PGM>:
     1aa:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     1ba:	00 01 00 00 03 01 06 01 09 01                       ..........

000001c4 <digital_pin_to_port_PGM>:
     1c4:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1d4:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1e4:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1f4:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     204:	0b 0b 0b 0b 0b 0b                                   ......

0000020a <digital_pin_to_bit_mask_PGM>:
     20a:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     21a:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     22a:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     23a:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     24a:	04 08 10 20 40 80                                   ... @.

00000250 <digital_pin_to_timer_PGM>:
     250:	00 00 09 0a 02 08 0b 0c 0d 07 06 03 04 01 00 00     ................
	...
     27c:	11 10 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000296 <__ctors_start>:
     296:	8f 04       	cpc	r8, r15
     298:	61 0a       	sbc	r6, r17
     29a:	e9 1d       	adc	r30, r9

0000029c <__ctors_end>:
     29c:	5a 0a       	sbc	r5, r26

0000029e <__dtors_end>:
     29e:	11 24       	eor	r1, r1
     2a0:	1f be       	out	0x3f, r1	; 63
     2a2:	cf ef       	ldi	r28, 0xFF	; 255
     2a4:	d1 e2       	ldi	r29, 0x21	; 33
     2a6:	de bf       	out	0x3e, r29	; 62
     2a8:	cd bf       	out	0x3d, r28	; 61
     2aa:	00 e0       	ldi	r16, 0x00	; 0
     2ac:	0c bf       	out	0x3c, r16	; 60

000002ae <__do_copy_data>:
     2ae:	15 e0       	ldi	r17, 0x05	; 5
     2b0:	a0 e0       	ldi	r26, 0x00	; 0
     2b2:	b2 e0       	ldi	r27, 0x02	; 2
     2b4:	e6 e7       	ldi	r30, 0x76	; 118
     2b6:	f9 e4       	ldi	r31, 0x49	; 73
     2b8:	00 e0       	ldi	r16, 0x00	; 0
     2ba:	0b bf       	out	0x3b, r16	; 59
     2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <__do_copy_data+0x14>
     2be:	07 90       	elpm	r0, Z+
     2c0:	0d 92       	st	X+, r0
     2c2:	a4 31       	cpi	r26, 0x14	; 20
     2c4:	b1 07       	cpc	r27, r17
     2c6:	d9 f7       	brne	.-10     	; 0x2be <__do_copy_data+0x10>
     2c8:	1b be       	out	0x3b, r1	; 59

000002ca <__do_clear_bss>:
     2ca:	18 e0       	ldi	r17, 0x08	; 8
     2cc:	a4 e1       	ldi	r26, 0x14	; 20
     2ce:	b5 e0       	ldi	r27, 0x05	; 5
     2d0:	01 c0       	rjmp	.+2      	; 0x2d4 <.do_clear_bss_start>

000002d2 <.do_clear_bss_loop>:
     2d2:	1d 92       	st	X+, r1

000002d4 <.do_clear_bss_start>:
     2d4:	a7 34       	cpi	r26, 0x47	; 71
     2d6:	b1 07       	cpc	r27, r17
     2d8:	e1 f7       	brne	.-8      	; 0x2d2 <.do_clear_bss_loop>

000002da <__do_global_ctors>:
     2da:	12 e0       	ldi	r17, 0x02	; 2
     2dc:	cc e9       	ldi	r28, 0x9C	; 156
     2de:	d2 e0       	ldi	r29, 0x02	; 2
     2e0:	04 c0       	rjmp	.+8      	; 0x2ea <.do_global_ctors_start>

000002e2 <.do_global_ctors_loop>:
     2e2:	22 97       	sbiw	r28, 0x02	; 2
     2e4:	fe 01       	movw	r30, r28
     2e6:	0e 94 aa 24 	call	0x4954	; 0x4954 <__tablejump__>

000002ea <.do_global_ctors_start>:
     2ea:	c6 39       	cpi	r28, 0x96	; 150
     2ec:	d1 07       	cpc	r29, r17
     2ee:	c9 f7       	brne	.-14     	; 0x2e2 <.do_global_ctors_loop>
     2f0:	0e 94 35 22 	call	0x446a	; 0x446a <main>
     2f4:	0c 94 ae 24 	jmp	0x495c	; 0x495c <__do_global_dtors>

000002f8 <__bad_interrupt>:
     2f8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002fc <malloc>:
     2fc:	cf 93       	push	r28
     2fe:	df 93       	push	r29
     300:	bc 01       	movw	r22, r24
     302:	82 30       	cpi	r24, 0x02	; 2
     304:	91 05       	cpc	r25, r1
     306:	10 f4       	brcc	.+4      	; 0x30c <malloc+0x10>
     308:	62 e0       	ldi	r22, 0x02	; 2
     30a:	70 e0       	ldi	r23, 0x00	; 0
     30c:	a0 91 45 08 	lds	r26, 0x0845
     310:	b0 91 46 08 	lds	r27, 0x0846
     314:	ed 01       	movw	r28, r26
     316:	e0 e0       	ldi	r30, 0x00	; 0
     318:	f0 e0       	ldi	r31, 0x00	; 0
     31a:	40 e0       	ldi	r20, 0x00	; 0
     31c:	50 e0       	ldi	r21, 0x00	; 0
     31e:	21 c0       	rjmp	.+66     	; 0x362 <malloc+0x66>
     320:	88 81       	ld	r24, Y
     322:	99 81       	ldd	r25, Y+1	; 0x01
     324:	86 17       	cp	r24, r22
     326:	97 07       	cpc	r25, r23
     328:	69 f4       	brne	.+26     	; 0x344 <malloc+0x48>
     32a:	8a 81       	ldd	r24, Y+2	; 0x02
     32c:	9b 81       	ldd	r25, Y+3	; 0x03
     32e:	30 97       	sbiw	r30, 0x00	; 0
     330:	19 f0       	breq	.+6      	; 0x338 <malloc+0x3c>
     332:	93 83       	std	Z+3, r25	; 0x03
     334:	82 83       	std	Z+2, r24	; 0x02
     336:	04 c0       	rjmp	.+8      	; 0x340 <malloc+0x44>
     338:	90 93 46 08 	sts	0x0846, r25
     33c:	80 93 45 08 	sts	0x0845, r24
     340:	fe 01       	movw	r30, r28
     342:	34 c0       	rjmp	.+104    	; 0x3ac <malloc+0xb0>
     344:	68 17       	cp	r22, r24
     346:	79 07       	cpc	r23, r25
     348:	38 f4       	brcc	.+14     	; 0x358 <malloc+0x5c>
     34a:	41 15       	cp	r20, r1
     34c:	51 05       	cpc	r21, r1
     34e:	19 f0       	breq	.+6      	; 0x356 <malloc+0x5a>
     350:	84 17       	cp	r24, r20
     352:	95 07       	cpc	r25, r21
     354:	08 f4       	brcc	.+2      	; 0x358 <malloc+0x5c>
     356:	ac 01       	movw	r20, r24
     358:	fe 01       	movw	r30, r28
     35a:	8a 81       	ldd	r24, Y+2	; 0x02
     35c:	9b 81       	ldd	r25, Y+3	; 0x03
     35e:	9c 01       	movw	r18, r24
     360:	e9 01       	movw	r28, r18
     362:	20 97       	sbiw	r28, 0x00	; 0
     364:	e9 f6       	brne	.-70     	; 0x320 <malloc+0x24>
     366:	41 15       	cp	r20, r1
     368:	51 05       	cpc	r21, r1
     36a:	a9 f1       	breq	.+106    	; 0x3d6 <malloc+0xda>
     36c:	ca 01       	movw	r24, r20
     36e:	86 1b       	sub	r24, r22
     370:	97 0b       	sbc	r25, r23
     372:	04 97       	sbiw	r24, 0x04	; 4
     374:	08 f4       	brcc	.+2      	; 0x378 <malloc+0x7c>
     376:	ba 01       	movw	r22, r20
     378:	e0 e0       	ldi	r30, 0x00	; 0
     37a:	f0 e0       	ldi	r31, 0x00	; 0
     37c:	2a c0       	rjmp	.+84     	; 0x3d2 <malloc+0xd6>
     37e:	8d 91       	ld	r24, X+
     380:	9c 91       	ld	r25, X
     382:	11 97       	sbiw	r26, 0x01	; 1
     384:	84 17       	cp	r24, r20
     386:	95 07       	cpc	r25, r21
     388:	f9 f4       	brne	.+62     	; 0x3c8 <malloc+0xcc>
     38a:	64 17       	cp	r22, r20
     38c:	75 07       	cpc	r23, r21
     38e:	81 f4       	brne	.+32     	; 0x3b0 <malloc+0xb4>
     390:	12 96       	adiw	r26, 0x02	; 2
     392:	8d 91       	ld	r24, X+
     394:	9c 91       	ld	r25, X
     396:	13 97       	sbiw	r26, 0x03	; 3
     398:	30 97       	sbiw	r30, 0x00	; 0
     39a:	19 f0       	breq	.+6      	; 0x3a2 <malloc+0xa6>
     39c:	93 83       	std	Z+3, r25	; 0x03
     39e:	82 83       	std	Z+2, r24	; 0x02
     3a0:	04 c0       	rjmp	.+8      	; 0x3aa <malloc+0xae>
     3a2:	90 93 46 08 	sts	0x0846, r25
     3a6:	80 93 45 08 	sts	0x0845, r24
     3aa:	fd 01       	movw	r30, r26
     3ac:	32 96       	adiw	r30, 0x02	; 2
     3ae:	4c c0       	rjmp	.+152    	; 0x448 <malloc+0x14c>
     3b0:	ca 01       	movw	r24, r20
     3b2:	86 1b       	sub	r24, r22
     3b4:	97 0b       	sbc	r25, r23
     3b6:	fd 01       	movw	r30, r26
     3b8:	e8 0f       	add	r30, r24
     3ba:	f9 1f       	adc	r31, r25
     3bc:	61 93       	st	Z+, r22
     3be:	71 93       	st	Z+, r23
     3c0:	02 97       	sbiw	r24, 0x02	; 2
     3c2:	8d 93       	st	X+, r24
     3c4:	9c 93       	st	X, r25
     3c6:	40 c0       	rjmp	.+128    	; 0x448 <malloc+0x14c>
     3c8:	fd 01       	movw	r30, r26
     3ca:	82 81       	ldd	r24, Z+2	; 0x02
     3cc:	93 81       	ldd	r25, Z+3	; 0x03
     3ce:	9c 01       	movw	r18, r24
     3d0:	d9 01       	movw	r26, r18
     3d2:	10 97       	sbiw	r26, 0x00	; 0
     3d4:	a1 f6       	brne	.-88     	; 0x37e <malloc+0x82>
     3d6:	80 91 43 08 	lds	r24, 0x0843
     3da:	90 91 44 08 	lds	r25, 0x0844
     3de:	89 2b       	or	r24, r25
     3e0:	41 f4       	brne	.+16     	; 0x3f2 <malloc+0xf6>
     3e2:	80 91 8d 04 	lds	r24, 0x048D
     3e6:	90 91 8e 04 	lds	r25, 0x048E
     3ea:	90 93 44 08 	sts	0x0844, r25
     3ee:	80 93 43 08 	sts	0x0843, r24
     3f2:	40 91 8f 04 	lds	r20, 0x048F
     3f6:	50 91 90 04 	lds	r21, 0x0490
     3fa:	41 15       	cp	r20, r1
     3fc:	51 05       	cpc	r21, r1
     3fe:	41 f4       	brne	.+16     	; 0x410 <malloc+0x114>
     400:	4d b7       	in	r20, 0x3d	; 61
     402:	5e b7       	in	r21, 0x3e	; 62
     404:	80 91 8b 04 	lds	r24, 0x048B
     408:	90 91 8c 04 	lds	r25, 0x048C
     40c:	48 1b       	sub	r20, r24
     40e:	59 0b       	sbc	r21, r25
     410:	20 91 43 08 	lds	r18, 0x0843
     414:	30 91 44 08 	lds	r19, 0x0844
     418:	ca 01       	movw	r24, r20
     41a:	82 1b       	sub	r24, r18
     41c:	93 0b       	sbc	r25, r19
     41e:	86 17       	cp	r24, r22
     420:	97 07       	cpc	r25, r23
     422:	80 f0       	brcs	.+32     	; 0x444 <malloc+0x148>
     424:	ab 01       	movw	r20, r22
     426:	4e 5f       	subi	r20, 0xFE	; 254
     428:	5f 4f       	sbci	r21, 0xFF	; 255
     42a:	84 17       	cp	r24, r20
     42c:	95 07       	cpc	r25, r21
     42e:	50 f0       	brcs	.+20     	; 0x444 <malloc+0x148>
     430:	42 0f       	add	r20, r18
     432:	53 1f       	adc	r21, r19
     434:	50 93 44 08 	sts	0x0844, r21
     438:	40 93 43 08 	sts	0x0843, r20
     43c:	f9 01       	movw	r30, r18
     43e:	61 93       	st	Z+, r22
     440:	71 93       	st	Z+, r23
     442:	02 c0       	rjmp	.+4      	; 0x448 <malloc+0x14c>
     444:	e0 e0       	ldi	r30, 0x00	; 0
     446:	f0 e0       	ldi	r31, 0x00	; 0
     448:	cf 01       	movw	r24, r30
     44a:	df 91       	pop	r29
     44c:	cf 91       	pop	r28
     44e:	08 95       	ret

00000450 <free>:
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	00 97       	sbiw	r24, 0x00	; 0
     456:	09 f4       	brne	.+2      	; 0x45a <free+0xa>
     458:	50 c0       	rjmp	.+160    	; 0x4fa <free+0xaa>
     45a:	ec 01       	movw	r28, r24
     45c:	22 97       	sbiw	r28, 0x02	; 2
     45e:	1b 82       	std	Y+3, r1	; 0x03
     460:	1a 82       	std	Y+2, r1	; 0x02
     462:	a0 91 45 08 	lds	r26, 0x0845
     466:	b0 91 46 08 	lds	r27, 0x0846
     46a:	10 97       	sbiw	r26, 0x00	; 0
     46c:	09 f1       	breq	.+66     	; 0x4b0 <free+0x60>
     46e:	40 e0       	ldi	r20, 0x00	; 0
     470:	50 e0       	ldi	r21, 0x00	; 0
     472:	ac 17       	cp	r26, r28
     474:	bd 07       	cpc	r27, r29
     476:	08 f1       	brcs	.+66     	; 0x4ba <free+0x6a>
     478:	bb 83       	std	Y+3, r27	; 0x03
     47a:	aa 83       	std	Y+2, r26	; 0x02
     47c:	fe 01       	movw	r30, r28
     47e:	21 91       	ld	r18, Z+
     480:	31 91       	ld	r19, Z+
     482:	e2 0f       	add	r30, r18
     484:	f3 1f       	adc	r31, r19
     486:	ae 17       	cp	r26, r30
     488:	bf 07       	cpc	r27, r31
     48a:	79 f4       	brne	.+30     	; 0x4aa <free+0x5a>
     48c:	8d 91       	ld	r24, X+
     48e:	9c 91       	ld	r25, X
     490:	11 97       	sbiw	r26, 0x01	; 1
     492:	28 0f       	add	r18, r24
     494:	39 1f       	adc	r19, r25
     496:	2e 5f       	subi	r18, 0xFE	; 254
     498:	3f 4f       	sbci	r19, 0xFF	; 255
     49a:	39 83       	std	Y+1, r19	; 0x01
     49c:	28 83       	st	Y, r18
     49e:	12 96       	adiw	r26, 0x02	; 2
     4a0:	8d 91       	ld	r24, X+
     4a2:	9c 91       	ld	r25, X
     4a4:	13 97       	sbiw	r26, 0x03	; 3
     4a6:	9b 83       	std	Y+3, r25	; 0x03
     4a8:	8a 83       	std	Y+2, r24	; 0x02
     4aa:	41 15       	cp	r20, r1
     4ac:	51 05       	cpc	r21, r1
     4ae:	71 f4       	brne	.+28     	; 0x4cc <free+0x7c>
     4b0:	d0 93 46 08 	sts	0x0846, r29
     4b4:	c0 93 45 08 	sts	0x0845, r28
     4b8:	20 c0       	rjmp	.+64     	; 0x4fa <free+0xaa>
     4ba:	12 96       	adiw	r26, 0x02	; 2
     4bc:	8d 91       	ld	r24, X+
     4be:	9c 91       	ld	r25, X
     4c0:	13 97       	sbiw	r26, 0x03	; 3
     4c2:	ad 01       	movw	r20, r26
     4c4:	00 97       	sbiw	r24, 0x00	; 0
     4c6:	11 f0       	breq	.+4      	; 0x4cc <free+0x7c>
     4c8:	dc 01       	movw	r26, r24
     4ca:	d3 cf       	rjmp	.-90     	; 0x472 <free+0x22>
     4cc:	fa 01       	movw	r30, r20
     4ce:	d3 83       	std	Z+3, r29	; 0x03
     4d0:	c2 83       	std	Z+2, r28	; 0x02
     4d2:	21 91       	ld	r18, Z+
     4d4:	31 91       	ld	r19, Z+
     4d6:	e2 0f       	add	r30, r18
     4d8:	f3 1f       	adc	r31, r19
     4da:	ce 17       	cp	r28, r30
     4dc:	df 07       	cpc	r29, r31
     4de:	69 f4       	brne	.+26     	; 0x4fa <free+0xaa>
     4e0:	88 81       	ld	r24, Y
     4e2:	99 81       	ldd	r25, Y+1	; 0x01
     4e4:	28 0f       	add	r18, r24
     4e6:	39 1f       	adc	r19, r25
     4e8:	2e 5f       	subi	r18, 0xFE	; 254
     4ea:	3f 4f       	sbci	r19, 0xFF	; 255
     4ec:	fa 01       	movw	r30, r20
     4ee:	31 83       	std	Z+1, r19	; 0x01
     4f0:	20 83       	st	Z, r18
     4f2:	8a 81       	ldd	r24, Y+2	; 0x02
     4f4:	9b 81       	ldd	r25, Y+3	; 0x03
     4f6:	93 83       	std	Z+3, r25	; 0x03
     4f8:	82 83       	std	Z+2, r24	; 0x02
     4fa:	df 91       	pop	r29
     4fc:	cf 91       	pop	r28
     4fe:	08 95       	ret

00000500 <strncpy>:
     500:	fb 01       	movw	r30, r22
     502:	dc 01       	movw	r26, r24
     504:	41 50       	subi	r20, 0x01	; 1
     506:	50 40       	sbci	r21, 0x00	; 0
     508:	48 f0       	brcs	.+18     	; 0x51c <strncpy+0x1c>
     50a:	01 90       	ld	r0, Z+
     50c:	0d 92       	st	X+, r0
     50e:	00 20       	and	r0, r0
     510:	c9 f7       	brne	.-14     	; 0x504 <strncpy+0x4>
     512:	01 c0       	rjmp	.+2      	; 0x516 <strncpy+0x16>
     514:	1d 92       	st	X+, r1
     516:	41 50       	subi	r20, 0x01	; 1
     518:	50 40       	sbci	r21, 0x00	; 0
     51a:	e0 f7       	brcc	.-8      	; 0x514 <strncpy+0x14>
     51c:	08 95       	ret

0000051e <_ZN6Button14DebounceButtonEv>:
//	None
//
// Returns:
//	bool - true if debounce button status is pressed
//
bool Button::DebounceButton()
     51e:	cf 93       	push	r28
     520:	df 93       	push	r29
     522:	ec 01       	movw	r28, r24
    {
    unsigned int currentState;

    // Read the value and adjust it based on the active high/low state.
    currentState = decodeLogicLevel(digitalRead(ioPin), activeHigh);
     524:	8a 85       	ldd	r24, Y+10	; 0x0a
     526:	0e 94 23 24 	call	0x4846	; 0x4846 <digitalRead>
     52a:	6c 85       	ldd	r22, Y+12	; 0x0c
     52c:	0e 94 df 03 	call	0x7be	; 0x7be <_Z16decodeLogicLevelib>
     530:	9c 01       	movw	r18, r24

    // Was it just released after being pressed?
    if (isPressedNow && (currentState == 0))
     532:	8d 8d       	ldd	r24, Y+29	; 0x1d
     534:	88 23       	and	r24, r24
     536:	c1 f0       	breq	.+48     	; 0x568 <_ZN6Button14DebounceButtonEv+0x4a>
     538:	21 15       	cp	r18, r1
     53a:	31 05       	cpc	r19, r1
     53c:	79 f4       	brne	.+30     	; 0x55c <_ZN6Button14DebounceButtonEv+0x3e>
	{
	// Ignore off's until debounce time expired
	if (debounceTime.elapsedMilliSeconds() < debounceTimeMs)
     53e:	ce 01       	movw	r24, r28
     540:	43 96       	adiw	r24, 0x13	; 19
     542:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <_ZN5Timer19elapsedMilliSecondsEv>
     546:	2d 85       	ldd	r18, Y+13	; 0x0d
     548:	3e 85       	ldd	r19, Y+14	; 0x0e
     54a:	40 e0       	ldi	r20, 0x00	; 0
     54c:	50 e0       	ldi	r21, 0x00	; 0
     54e:	62 17       	cp	r22, r18
     550:	73 07       	cpc	r23, r19
     552:	84 07       	cpc	r24, r20
     554:	95 07       	cpc	r25, r21
     556:	30 f0       	brcs	.+12     	; 0x564 <_ZN6Button14DebounceButtonEv+0x46>
	    return true;

	// It's been debounced, so it can be set to off now.
	isPressedNow = false;
     558:	1d 8e       	std	Y+29, r1	; 0x1d
     55a:	09 c0       	rjmp	.+18     	; 0x56e <_ZN6Button14DebounceButtonEv+0x50>
	return false;
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	21 30       	cpi	r18, 0x01	; 1
     560:	31 05       	cpc	r19, r1
     562:	69 f4       	brne	.+26     	; 0x57e <_ZN6Button14DebounceButtonEv+0x60>
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	0b c0       	rjmp	.+22     	; 0x57e <_ZN6Button14DebounceButtonEv+0x60>
	}
    else if (isPressedNow && (currentState == 1))
	return true;

    // Was it pressed for the first time?
    else if (!isPressedNow && (currentState == 1))
     568:	21 30       	cpi	r18, 0x01	; 1
     56a:	31 05       	cpc	r19, r1
     56c:	11 f0       	breq	.+4      	; 0x572 <_ZN6Button14DebounceButtonEv+0x54>
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	06 c0       	rjmp	.+12     	; 0x57e <_ZN6Button14DebounceButtonEv+0x60>
	{
	// You don't need to debounce for the first press since the
	// release is debounced.
	debounceTime.startTimer();
     572:	ce 01       	movw	r24, r28
     574:	43 96       	adiw	r24, 0x13	; 19
     576:	0e 94 3b 18 	call	0x3076	; 0x3076 <_ZN5Timer10startTimerEv>
	isPressedNow = true;
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	8d 8f       	std	Y+29, r24	; 0x1d
	return true;
	}

    // If neither of the above is true, then the state hasn't changed.
    return false;
    }
     57e:	df 91       	pop	r29
     580:	cf 91       	pop	r28
     582:	08 95       	ret

00000584 <_ZN6Button10WasPressedE14ButtonRepeat_e>:
//
// Returns:
//	bool -	true is button is pressed and repeat status is BUTTON_NOREPEAT or
//		if the button is held down and the status is BUTTON_REPEAT
//
bool Button::WasPressed(ButtonRepeat_e repeatStatus)
     584:	cf 92       	push	r12
     586:	df 92       	push	r13
     588:	ef 92       	push	r14
     58a:	ff 92       	push	r15
     58c:	0f 93       	push	r16
     58e:	1f 93       	push	r17
     590:	cf 93       	push	r28
     592:	df 93       	push	r29
     594:	ec 01       	movw	r28, r24
     596:	8b 01       	movw	r16, r22
    {
    unsigned long int currentHoldTime;
    unsigned int intervals;

    // See what the button's current state is.
    if (!DebounceButton())
     598:	0e 94 8f 02 	call	0x51e	; 0x51e <_ZN6Button14DebounceButtonEv>
     59c:	88 23       	and	r24, r24
     59e:	11 f4       	brne	.+4      	; 0x5a4 <_ZN6Button10WasPressedE14ButtonRepeat_e+0x20>
	{
	// Button is not currently pressed, clear flag.
	pressReported = false;
     5a0:	1e 8e       	std	Y+30, r1	; 0x1e
     5a2:	3a c0       	rjmp	.+116    	; 0x618 <_ZN6Button10WasPressedE14ButtonRepeat_e+0x94>

    // At this point, we know the button is pressed.

    // Is it being pressed for the first time?  If so report it and set
    // the flag to track it was reported.
    if (!pressReported)
     5a4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     5a6:	88 23       	and	r24, r24
     5a8:	49 f4       	brne	.+18     	; 0x5bc <_ZN6Button10WasPressedE14ButtonRepeat_e+0x38>
	{
	// Start the repeat timer.
	holdTime.startTimer();
     5aa:	ce 01       	movw	r24, r28
     5ac:	47 96       	adiw	r24, 0x17	; 23
     5ae:	0e 94 3b 18 	call	0x3076	; 0x3076 <_ZN5Timer10startTimerEv>
	// Reset the repeat count
	repeatCount = 0;
     5b2:	1c 8e       	std	Y+28, r1	; 0x1c
     5b4:	1b 8e       	std	Y+27, r1	; 0x1b
	pressReported = true;
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	8e 8f       	std	Y+30, r24	; 0x1e
     5ba:	2e c0       	rjmp	.+92     	; 0x618 <_ZN6Button10WasPressedE14ButtonRepeat_e+0x94>

    // At this point, we know the button is pressed and
    // the first press event has been reported.

    // See if we want to repeat the key if its being held down
    if ( (repeatStatus == BUTTON_REPEAT) && (repeatEveryMs != 0) )
     5bc:	01 2b       	or	r16, r17
     5be:	59 f5       	brne	.+86     	; 0x616 <_ZN6Button10WasPressedE14ButtonRepeat_e+0x92>
     5c0:	89 89       	ldd	r24, Y+17	; 0x11
     5c2:	9a 89       	ldd	r25, Y+18	; 0x12
     5c4:	89 2b       	or	r24, r25
     5c6:	39 f1       	breq	.+78     	; 0x616 <_ZN6Button10WasPressedE14ButtonRepeat_e+0x92>
	{
	// We only want to repeat the key press as often
	// as specified when the object was created.

	// See how long the key has been held down.
	currentHoldTime = holdTime.elapsedMilliSeconds();
     5c8:	ce 01       	movw	r24, r28
     5ca:	47 96       	adiw	r24, 0x17	; 23
     5cc:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <_ZN5Timer19elapsedMilliSecondsEv>
     5d0:	7b 01       	movw	r14, r22
     5d2:	8c 01       	movw	r16, r24

	// First, make sure the initial hold time has completed
	// before starting the repeating.
	if (currentHoldTime < repeatStartDelayMs)
     5d4:	8f 85       	ldd	r24, Y+15	; 0x0f
     5d6:	98 89       	ldd	r25, Y+16	; 0x10
     5d8:	a0 e0       	ldi	r26, 0x00	; 0
     5da:	b0 e0       	ldi	r27, 0x00	; 0
     5dc:	e8 16       	cp	r14, r24
     5de:	f9 06       	cpc	r15, r25
     5e0:	0a 07       	cpc	r16, r26
     5e2:	1b 07       	cpc	r17, r27
     5e4:	c0 f0       	brcs	.+48     	; 0x616 <_ZN6Button10WasPressedE14ButtonRepeat_e+0x92>
	// key presses should have been generated based on
	// how long its been held down.
	intervals = (unsigned int) ((currentHoldTime-repeatStartDelayMs) / repeatEveryMs);

	// If we haven't reported enough key repeats, then return a keypress.
	if (intervals > repeatCount)
     5e6:	cb 8c       	ldd	r12, Y+27	; 0x1b
     5e8:	dc 8c       	ldd	r13, Y+28	; 0x1c
     5ea:	e8 1a       	sub	r14, r24
     5ec:	f9 0a       	sbc	r15, r25
     5ee:	0a 0b       	sbc	r16, r26
     5f0:	1b 0b       	sbc	r17, r27
     5f2:	29 89       	ldd	r18, Y+17	; 0x11
     5f4:	3a 89       	ldd	r19, Y+18	; 0x12
     5f6:	40 e0       	ldi	r20, 0x00	; 0
     5f8:	50 e0       	ldi	r21, 0x00	; 0
     5fa:	c8 01       	movw	r24, r16
     5fc:	b7 01       	movw	r22, r14
     5fe:	0e 94 86 24 	call	0x490c	; 0x490c <__udivmodsi4>
     602:	c2 16       	cp	r12, r18
     604:	d3 06       	cpc	r13, r19
     606:	38 f4       	brcc	.+14     	; 0x616 <_ZN6Button10WasPressedE14ButtonRepeat_e+0x92>
	    {
	    repeatCount++;
     608:	08 94       	sec
     60a:	c1 1c       	adc	r12, r1
     60c:	d1 1c       	adc	r13, r1
     60e:	dc 8e       	std	Y+28, r13	; 0x1c
     610:	cb 8e       	std	Y+27, r12	; 0x1b
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	01 c0       	rjmp	.+2      	; 0x618 <_ZN6Button10WasPressedE14ButtonRepeat_e+0x94>
	    return true;
     616:	80 e0       	ldi	r24, 0x00	; 0
	}

    // We're not interested in repeating the key press
    // so return false even though its being held down.
    return false;
    }
     618:	df 91       	pop	r29
     61a:	cf 91       	pop	r28
     61c:	1f 91       	pop	r17
     61e:	0f 91       	pop	r16
     620:	ff 90       	pop	r15
     622:	ef 90       	pop	r14
     624:	df 90       	pop	r13
     626:	cf 90       	pop	r12
     628:	08 95       	ret

0000062a <_ZN6ButtonC1EPcibjjj>:
//
Button::Button(char *name,
	       int pin, bool paramActiveHigh,
	       unsigned int paramDebounceTimeMs,
	       unsigned int paramRepeatStartDelayMs,
	       unsigned int paramRepeatEveryMs)
     62a:	7f 92       	push	r7
     62c:	8f 92       	push	r8
     62e:	9f 92       	push	r9
     630:	af 92       	push	r10
     632:	bf 92       	push	r11
     634:	cf 92       	push	r12
     636:	df 92       	push	r13
     638:	ef 92       	push	r14
     63a:	ff 92       	push	r15
     63c:	0f 93       	push	r16
     63e:	1f 93       	push	r17
     640:	cf 93       	push	r28
     642:	df 93       	push	r29
     644:	ec 01       	movw	r28, r24
     646:	5b 01       	movw	r10, r22
     648:	4a 01       	movw	r8, r20
     64a:	72 2e       	mov	r7, r18
     64c:	43 96       	adiw	r24, 0x13	; 19
     64e:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN5TimerC1Ev>
     652:	ce 01       	movw	r24, r28
     654:	47 96       	adiw	r24, 0x17	; 23
     656:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN5TimerC1Ev>
    {

    // Copy the button name, truncating it if necessary
    strncpy(buttonName, name, BUTTON_NAME_LEN);
     65a:	ce 01       	movw	r24, r28
     65c:	b5 01       	movw	r22, r10
     65e:	4b e0       	ldi	r20, 0x0B	; 11
     660:	50 e0       	ldi	r21, 0x00	; 0
     662:	0e 94 80 02 	call	0x500	; 0x500 <strncpy>

    // Get the I/O pin to be read and if its active high.
    ioPin = pin;
     666:	9b 86       	std	Y+11, r9	; 0x0b
     668:	8a 86       	std	Y+10, r8	; 0x0a
    activeHigh = paramActiveHigh;
     66a:	7c 86       	std	Y+12, r7	; 0x0c

    debounceTimeMs = paramDebounceTimeMs;
     66c:	1e 87       	std	Y+14, r17	; 0x0e
     66e:	0d 87       	std	Y+13, r16	; 0x0d

    // Make sure that the repeat start delay time is at least twice
    // the debounce time. If it's not, set it (add 1 in case debounce is 0)
    if (paramRepeatStartDelayMs < debounceTimeMs)
     670:	e0 16       	cp	r14, r16
     672:	f1 06       	cpc	r15, r17
     674:	38 f4       	brcc	.+14     	; 0x684 <_ZN6ButtonC1EPcibjjj+0x5a>
	repeatStartDelayMs = (debounceTimeMs*2) + 1;
     676:	00 0f       	add	r16, r16
     678:	11 1f       	adc	r17, r17
     67a:	0f 5f       	subi	r16, 0xFF	; 255
     67c:	1f 4f       	sbci	r17, 0xFF	; 255
     67e:	18 8b       	std	Y+16, r17	; 0x10
     680:	0f 87       	std	Y+15, r16	; 0x0f
     682:	02 c0       	rjmp	.+4      	; 0x688 <_ZN6ButtonC1EPcibjjj+0x5e>
    else
	repeatStartDelayMs = paramRepeatStartDelayMs;
     684:	f8 8a       	std	Y+16, r15	; 0x10
     686:	ef 86       	std	Y+15, r14	; 0x0f

    // Make sure that the repeat every is at least 1 (0 breaks the math).
    if (paramRepeatEveryMs == 0 )
     688:	c1 14       	cp	r12, r1
     68a:	d1 04       	cpc	r13, r1
     68c:	29 f4       	brne	.+10     	; 0x698 <_ZN6ButtonC1EPcibjjj+0x6e>
	repeatEveryMs = 1;
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	9a 8b       	std	Y+18, r25	; 0x12
     694:	89 8b       	std	Y+17, r24	; 0x11
     696:	02 c0       	rjmp	.+4      	; 0x69c <_ZN6ButtonC1EPcibjjj+0x72>
    else
	repeatEveryMs = paramRepeatEveryMs;
     698:	da 8a       	std	Y+18, r13	; 0x12
     69a:	c9 8a       	std	Y+17, r12	; 0x11

    // Clear the flags and counters.
    isPressedNow = false;
     69c:	1d 8e       	std	Y+29, r1	; 0x1d
    pressReported = false;
     69e:	1e 8e       	std	Y+30, r1	; 0x1e
    repeatCount = 0;
     6a0:	1c 8e       	std	Y+28, r1	; 0x1c
     6a2:	1b 8e       	std	Y+27, r1	; 0x1b
    }
     6a4:	df 91       	pop	r29
     6a6:	cf 91       	pop	r28
     6a8:	1f 91       	pop	r17
     6aa:	0f 91       	pop	r16
     6ac:	ff 90       	pop	r15
     6ae:	ef 90       	pop	r14
     6b0:	df 90       	pop	r13
     6b2:	cf 90       	pop	r12
     6b4:	bf 90       	pop	r11
     6b6:	af 90       	pop	r10
     6b8:	9f 90       	pop	r9
     6ba:	8f 90       	pop	r8
     6bc:	7f 90       	pop	r7
     6be:	08 95       	ret

000006c0 <_ZN10BypassModeC1EP12THCInterface>:
// doesn't have to be passed in on every loop.
//
// Parameters:
//   THCInterface* - pointer to display object for display updates.
//
BypassMode::BypassMode(THCInterface *displayPtr)
     6c0:	fc 01       	movw	r30, r24
	{
	torchOn = false;
     6c2:	10 82       	st	Z, r1
	arcGood = false;
     6c4:	11 82       	std	Z+1, r1	; 0x01
	// Copy the pointer to the display object.
	display = displayPtr;
     6c6:	73 83       	std	Z+3, r23	; 0x03
     6c8:	62 83       	std	Z+2, r22	; 0x02
	}
     6ca:	08 95       	ret

000006cc <_ZN10BypassMode11controlLoopEv>:




void BypassMode::controlLoop(void)
     6cc:	1f 93       	push	r17
     6ce:	cf 93       	push	r28
     6d0:	df 93       	push	r29
     6d2:	ec 01       	movw	r28, r24
	//
	// HANDLE THE TORCH ON/OFF CASES
	//

	// Handle the case of a torch on being newly requested.
	if ((currentStateData.torchOnState) && !torchOn)
     6d4:	80 91 49 05 	lds	r24, 0x0549
     6d8:	88 23       	and	r24, r24
     6da:	09 f4       	brne	.+2      	; 0x6de <_ZN10BypassMode11controlLoopEv+0x12>
     6dc:	68 c0       	rjmp	.+208    	; 0x7ae <_ZN10BypassMode11controlLoopEv+0xe2>
     6de:	88 81       	ld	r24, Y
     6e0:	88 23       	and	r24, r24
     6e2:	09 f0       	breq	.+2      	; 0x6e6 <_ZN10BypassMode11controlLoopEv+0x1a>
     6e4:	64 c0       	rjmp	.+200    	; 0x7ae <_ZN10BypassMode11controlLoopEv+0xe2>
		{
		// Set flag to denote we've turned the torch on.
		torchOn = true;
     6e6:	11 e0       	ldi	r17, 0x01	; 1
     6e8:	18 83       	st	Y, r17

		SendCutStartPacket();
     6ea:	0e 94 53 05 	call	0xaa6	; 0xaa6 <_Z18SendCutStartPacketv>

		// Start the use timer.
		currentStateData.cutStartTime.startTimer();
     6ee:	80 e6       	ldi	r24, 0x60	; 96
     6f0:	95 e0       	ldi	r25, 0x05	; 5
     6f2:	0e 94 3b 18 	call	0x3076	; 0x3076 <_ZN5Timer10startTimerEv>

		// Trip the relay to turn the plasma torch on
		digitalWrite(OUT_D_TORCH_RELAY, OUT_D_TORCH_RELAY_ACTIVE);
     6f6:	81 e1       	ldi	r24, 0x11	; 17
     6f8:	61 e0       	ldi	r22, 0x01	; 1
     6fa:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <digitalWrite>

		// Update the status display of the torch on signal
		display->TorchOn(currentStateData.torchOnState);
     6fe:	60 91 49 05 	lds	r22, 0x0549
     702:	8a 81       	ldd	r24, Y+2	; 0x02
     704:	9b 81       	ldd	r25, Y+3	; 0x03
     706:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_ZN12THCInterface7TorchOnEb>

		// Update the pilot arc count since we're starting the torch
		// and update the flag to denote usage data is dirty.
		usageData.pilotArcCount++;
     70a:	80 91 70 05 	lds	r24, 0x0570
     70e:	90 91 71 05 	lds	r25, 0x0571
     712:	01 96       	adiw	r24, 0x01	; 1
     714:	90 93 71 05 	sts	0x0571, r25
     718:	80 93 70 05 	sts	0x0570, r24
		currentStateData.usageUpdated = true;
     71c:	10 93 65 05 	sts	0x0565, r17
     720:	28 c0       	rjmp	.+80     	; 0x772 <_ZN10BypassMode11controlLoopEv+0xa6>
		}

	// Handle the case of a torch OFF being newly requested
	else if ((torchOn) && (!currentStateData.torchOnState))
     722:	80 91 49 05 	lds	r24, 0x0549
     726:	88 23       	and	r24, r24
     728:	81 f4       	brne	.+32     	; 0x74a <_ZN10BypassMode11controlLoopEv+0x7e>
	{
		// Trip the relay to turn the plasma torch off
		digitalWrite(OUT_D_TORCH_RELAY, OUT_D_TORCH_RELAY_NOT_ACTIVE);
     72a:	81 e1       	ldi	r24, 0x11	; 17
     72c:	60 e0       	ldi	r22, 0x00	; 0
     72e:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <digitalWrite>

		// reset the flag
		torchOn = false;
     732:	18 82       	st	Y, r1

		// Update the status display of the torch on signal
		display->TorchOn(currentStateData.torchOnState);
     734:	60 91 49 05 	lds	r22, 0x0549
     738:	8a 81       	ldd	r24, Y+2	; 0x02
     73a:	9b 81       	ldd	r25, Y+3	; 0x03
     73c:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_ZN12THCInterface7TorchOnEb>

		// Start timer for delayed memory write
		currentStateData.lastUseTimer.startTimer();
     740:	84 e5       	ldi	r24, 0x54	; 84
     742:	95 e0       	ldi	r25, 0x05	; 5
     744:	0e 94 3b 18 	call	0x3076	; 0x3076 <_ZN5Timer10startTimerEv>
     748:	14 c0       	rjmp	.+40     	; 0x772 <_ZN10BypassMode11controlLoopEv+0xa6>
	}

	// Handle the case of the torch running
	else if (torchOn && currentStateData.torchOnState)
     74a:	80 91 49 05 	lds	r24, 0x0549
     74e:	11 c0       	rjmp	.+34     	; 0x772 <_ZN10BypassMode11controlLoopEv+0xa6>
		{
		// Do nothing
		}

	// Handle the case of the torch being off
	else if (!torchOn && !currentStateData.torchOnState)
     750:	80 91 49 05 	lds	r24, 0x0549
     754:	88 23       	and	r24, r24
     756:	69 f4       	brne	.+26     	; 0x772 <_ZN10BypassMode11controlLoopEv+0xa6>
		{
		// Since we're inactive, see if the usage data has been updated.
		if (currentStateData.usageUpdated)
     758:	80 91 65 05 	lds	r24, 0x0565
     75c:	88 23       	and	r24, r24
     75e:	49 f0       	breq	.+18     	; 0x772 <_ZN10BypassMode11controlLoopEv+0xa6>
			{
			display->setFlashWritePending(true);
     760:	8a 81       	ldd	r24, Y+2	; 0x02
     762:	9b 81       	ldd	r25, Y+3	; 0x03
     764:	61 e0       	ldi	r22, 0x01	; 1
     766:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <_ZN12THCInterface20setFlashWritePendingEb>
			// To save write cycles, wait 30 seconds before updating the daa.
			if (currentStateData.lastUseTimer.elapsedSeconds() >= 30)
     76a:	84 e5       	ldi	r24, 0x54	; 84
     76c:	95 e0       	ldi	r25, 0x05	; 5
     76e:	0e 94 10 18 	call	0x3020	; 0x3020 <_ZN5Timer14elapsedSecondsEv>
	//
	// HANDLE THE ARC ON/OFF CASES
	//

	// See if the Arc Ok signal changed so display can be updated.
	if (currentStateData.arcStateChanged)
     772:	80 91 4b 05 	lds	r24, 0x054B
     776:	88 23       	and	r24, r24
     778:	f1 f0       	breq	.+60     	; 0x7b6 <_ZN10BypassMode11controlLoopEv+0xea>
		{
		// Update the display with the current state.
		display->ArcGood(currentStateData.arcGoodState);
     77a:	60 91 4a 05 	lds	r22, 0x054A
     77e:	8a 81       	ldd	r24, Y+2	; 0x02
     780:	9b 81       	ldd	r25, Y+3	; 0x03
     782:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <_ZN12THCInterface7ArcGoodEb>
		// Clear the flag to denote we handled the state update.
		currentStateData.arcStateChanged = false;
     786:	10 92 4b 05 	sts	0x054B, r1

		// If the arc good went on, update the usage data.
		if (currentStateData.arcGoodState)
     78a:	80 91 4a 05 	lds	r24, 0x054A
     78e:	88 23       	and	r24, r24
     790:	91 f0       	breq	.+36     	; 0x7b6 <_ZN10BypassMode11controlLoopEv+0xea>
			{
			// Update the pierce count since we finished a pierce.
			usageData.pierceCount++;
     792:	80 91 72 05 	lds	r24, 0x0572
     796:	90 91 73 05 	lds	r25, 0x0573
     79a:	01 96       	adiw	r24, 0x01	; 1
     79c:	90 93 73 05 	sts	0x0573, r25
     7a0:	80 93 72 05 	sts	0x0572, r24

			// Start the timer that tracks torch on time.
			// (The ISR will update the use time when the arc goes off.)
			currentStateData.torchOnTimer.startTimer();
     7a4:	88 e5       	ldi	r24, 0x58	; 88
     7a6:	95 e0       	ldi	r25, 0x05	; 5
     7a8:	0e 94 3b 18 	call	0x3076	; 0x3076 <_ZN5Timer10startTimerEv>
     7ac:	04 c0       	rjmp	.+8      	; 0x7b6 <_ZN10BypassMode11controlLoopEv+0xea>
		usageData.pilotArcCount++;
		currentStateData.usageUpdated = true;
		}

	// Handle the case of a torch OFF being newly requested
	else if ((torchOn) && (!currentStateData.torchOnState))
     7ae:	88 81       	ld	r24, Y
     7b0:	88 23       	and	r24, r24
     7b2:	71 f2       	breq	.-100    	; 0x750 <_ZN10BypassMode11controlLoopEv+0x84>
     7b4:	b6 cf       	rjmp	.-148    	; 0x722 <_ZN10BypassMode11controlLoopEv+0x56>
			// (The ISR will update the use time when the arc goes off.)
			currentStateData.torchOnTimer.startTimer();
			}
		}

	}
     7b6:	df 91       	pop	r29
     7b8:	cf 91       	pop	r28
     7ba:	1f 91       	pop	r17
     7bc:	08 95       	ret

000007be <_Z16decodeLogicLevelib>:
//	limited time/RAM.
//
unsigned int decodeLogicLevel(int currentLevel, bool activeHigh)
	{
	// If the signal needs inverted, do it.
	if (activeHigh == false)
     7be:	66 23       	and	r22, r22
     7c0:	39 f4       	brne	.+14     	; 0x7d0 <_Z16decodeLogicLevelib+0x12>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	89 2b       	or	r24, r25
     7c8:	21 f4       	brne	.+8      	; 0x7d2 <_Z16decodeLogicLevelib+0x14>
     7ca:	21 e0       	ldi	r18, 0x01	; 1
     7cc:	30 e0       	ldi	r19, 0x00	; 0
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <_Z16decodeLogicLevelib+0x14>
		return ((currentLevel == 0) ? 1 : 0);

	// Return what was passed in since it doesn't need inverted.
	return currentLevel;
     7d0:	9c 01       	movw	r18, r24
	}
     7d2:	c9 01       	movw	r24, r18
     7d4:	08 95       	ret

000007d6 <_Z10torchOnIsrv>:
	{
	// Read the current state of the torch on request and
	// invert the state of the signal since it's active low.
	currentStateData.torchOnState = (
			digitalRead(IN_D_INT_TORCH_ON_PIN) == IN_D_TORCH_ON_PIN_ACTIVE ?
					true : false);
     7d6:	85 e1       	ldi	r24, 0x15	; 21
     7d8:	0e 94 23 24 	call	0x4846	; 0x4846 <digitalRead>
     7dc:	20 e0       	ldi	r18, 0x00	; 0
     7de:	89 2b       	or	r24, r25
     7e0:	09 f4       	brne	.+2      	; 0x7e4 <_Z10torchOnIsrv+0xe>
     7e2:	21 e0       	ldi	r18, 0x01	; 1
     7e4:	20 93 49 05 	sts	0x0549, r18

	// If the torch is being turned off, do it immediately.
	if (!currentStateData.torchOnState)
     7e8:	80 91 49 05 	lds	r24, 0x0549
     7ec:	88 23       	and	r24, r24
     7ee:	21 f4       	brne	.+8      	; 0x7f8 <_Z10torchOnIsrv+0x22>
		{
		digitalWrite(OUT_D_TORCH_RELAY, OUT_D_TORCH_RELAY_NOT_ACTIVE);
     7f0:	81 e1       	ldi	r24, 0x11	; 17
     7f2:	60 e0       	ldi	r22, 0x00	; 0
     7f4:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <digitalWrite>
     7f8:	08 95       	ret

000007fa <_Z10arcGoodIsrv>:
	{
	bool temp;

	// Read the current and correct for active state.
	temp = decodeLogicLevel(digitalRead(IN_D_INT_ARC_GOOD_PIN),
			IN_D_ARC_GOOD_PIN_ACTIVE);
     7fa:	84 e1       	ldi	r24, 0x14	; 20
     7fc:	0e 94 23 24 	call	0x4846	; 0x4846 <digitalRead>
     800:	20 e0       	ldi	r18, 0x00	; 0
     802:	89 2b       	or	r24, r25
     804:	09 f4       	brne	.+2      	; 0x808 <_Z10arcGoodIsrv+0xe>
     806:	21 e0       	ldi	r18, 0x01	; 1

	// Hack: I think this is very noisy, so ignore if no changes
	if (temp == currentStateData.arcGoodState)
     808:	80 91 4a 05 	lds	r24, 0x054A
     80c:	28 17       	cp	r18, r24
     80e:	49 f1       	breq	.+82     	; 0x862 <_Z10arcGoodIsrv+0x68>
		return;

	// Set the global to the new value.
	currentStateData.arcGoodState = temp;
     810:	20 93 4a 05 	sts	0x054A, r18

	// For now, just pass the arc state through.  Logic may
	// be added in the future and this would be removed.
	if (currentStateData.arcGoodState)
     814:	80 91 4a 05 	lds	r24, 0x054A
     818:	88 23       	and	r24, r24
     81a:	69 f0       	breq	.+26     	; 0x836 <_Z10arcGoodIsrv+0x3c>
		{
		digitalWrite(OUT_D_ARC_GOOD, OUT_D_ARC_GOOD_ACTIVE);
     81c:	82 e3       	ldi	r24, 0x32	; 50
     81e:	60 e0       	ldi	r22, 0x00	; 0
     820:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <digitalWrite>
		currentStateData.torchOnTimer.startTimer();
     824:	88 e5       	ldi	r24, 0x58	; 88
     826:	95 e0       	ldi	r25, 0x05	; 5
     828:	0e 94 3b 18 	call	0x3076	; 0x3076 <_ZN5Timer10startTimerEv>
		currentStateData.torchStabilizeTimer.startTimer();
     82c:	8c e5       	ldi	r24, 0x5C	; 92
     82e:	95 e0       	ldi	r25, 0x05	; 5
     830:	0e 94 3b 18 	call	0x3076	; 0x3076 <_ZN5Timer10startTimerEv>
     834:	11 c0       	rjmp	.+34     	; 0x858 <_Z10arcGoodIsrv+0x5e>
		}
	else
		{
		digitalWrite(OUT_D_ARC_GOOD, OUT_D_ARC_GOOD_NOT_ACTIVE);
     836:	82 e3       	ldi	r24, 0x32	; 50
     838:	61 e0       	ldi	r22, 0x01	; 1
     83a:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <digitalWrite>
		currentStateData.runVoltageControl = false;
     83e:	10 92 64 05 	sts	0x0564, r1
		AddSecondsToTipUse((THCStatData *) &usageData,
				currentStateData.torchOnTimer.elapsedSeconds());
     842:	88 e5       	ldi	r24, 0x58	; 88
     844:	95 e0       	ldi	r25, 0x05	; 5
     846:	0e 94 10 18 	call	0x3020	; 0x3020 <_ZN5Timer14elapsedSecondsEv>
     84a:	9b 01       	movw	r18, r22
     84c:	ac 01       	movw	r20, r24
     84e:	8f e6       	ldi	r24, 0x6F	; 111
     850:	95 e0       	ldi	r25, 0x05	; 5
     852:	b9 01       	movw	r22, r18
     854:	0e 94 0a 0a 	call	0x1414	; 0x1414 <_Z18AddSecondsToTipUseP11THCStatDataj>
		}

	currentStateData.usageUpdated = true;
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	80 93 65 05 	sts	0x0565, r24
	currentStateData.arcStateChanged = true;
     85e:	80 93 4b 05 	sts	0x054B, r24
     862:	08 95       	ret

00000864 <_Z7setupIOv>:
// Initialize all hardware for the I/O signals.
//
void setupIO(void)
	{
	// Define the input for all the push buttons
	pinMode(IN_D_BUTTON_SELECT, INPUT_PULLUP);
     864:	83 e2       	ldi	r24, 0x23	; 35
     866:	62 e0       	ldi	r22, 0x02	; 2
     868:	0e 94 3d 23 	call	0x467a	; 0x467a <pinMode>
	pinMode(IN_D_BUTTON_CANCEL, INPUT_PULLUP);
     86c:	85 e2       	ldi	r24, 0x25	; 37
     86e:	62 e0       	ldi	r22, 0x02	; 2
     870:	0e 94 3d 23 	call	0x467a	; 0x467a <pinMode>
	pinMode(IN_D_BUTTON_UP, INPUT_PULLUP);
     874:	87 e2       	ldi	r24, 0x27	; 39
     876:	62 e0       	ldi	r22, 0x02	; 2
     878:	0e 94 3d 23 	call	0x467a	; 0x467a <pinMode>
	pinMode(IN_D_BUTTON_DOWN, INPUT_PULLUP);
     87c:	89 e2       	ldi	r24, 0x29	; 41
     87e:	62 e0       	ldi	r22, 0x02	; 2
     880:	0e 94 3d 23 	call	0x467a	; 0x467a <pinMode>
	pinMode(IN_D_BUTTON_MODE, INPUT_PULLUP);
     884:	81 e2       	ldi	r24, 0x21	; 33
     886:	62 e0       	ldi	r22, 0x02	; 2
     888:	0e 94 3d 23 	call	0x467a	; 0x467a <pinMode>

	// Define the pin for the TORCH_ON and ARC_GOOD signals.
	// These will be interrupts to ensure they are responded
	// to in a timely manner.
	pinMode(IN_D_INT_TORCH_ON_PIN, INPUT_PULLUP);
     88c:	85 e1       	ldi	r24, 0x15	; 21
     88e:	62 e0       	ldi	r22, 0x02	; 2
     890:	0e 94 3d 23 	call	0x467a	; 0x467a <pinMode>
	pinMode(IN_D_INT_ARC_GOOD_PIN, INPUT_PULLUP);
     894:	84 e1       	ldi	r24, 0x14	; 20
     896:	62 e0       	ldi	r22, 0x02	; 2
     898:	0e 94 3d 23 	call	0x467a	; 0x467a <pinMode>

	// Define the control signal output pins
	pinMode(OUT_D_TORCH_RELAY, OUTPUT); // To relay that turns plasma on
     89c:	81 e1       	ldi	r24, 0x11	; 17
     89e:	61 e0       	ldi	r22, 0x01	; 1
     8a0:	0e 94 3d 23 	call	0x467a	; 0x467a <pinMode>
	pinMode(OUT_D_TORCH_UP, OUTPUT);// To CNC to signal the torch needs to go up
     8a4:	80 e3       	ldi	r24, 0x30	; 48
     8a6:	61 e0       	ldi	r22, 0x01	; 1
     8a8:	0e 94 3d 23 	call	0x467a	; 0x467a <pinMode>
	pinMode(OUT_D_TORCH_DOWN, OUTPUT);// To CNC to signal the torch needs to go up
     8ac:	8e e2       	ldi	r24, 0x2E	; 46
     8ae:	61 e0       	ldi	r22, 0x01	; 1
     8b0:	0e 94 3d 23 	call	0x467a	; 0x467a <pinMode>
	pinMode(OUT_D_ARC_GOOD, OUTPUT);// To CNC to signal the cutting arc is good
     8b4:	82 e3       	ldi	r24, 0x32	; 50
     8b6:	61 e0       	ldi	r22, 0x01	; 1
     8b8:	0e 94 3d 23 	call	0x467a	; 0x467a <pinMode>

	//
	// Initialize all the control signals.
	//
	digitalWrite(OUT_D_TORCH_RELAY, OUT_D_TORCH_RELAY_NOT_ACTIVE);// "Torch On" should be off by default.
     8bc:	81 e1       	ldi	r24, 0x11	; 17
     8be:	60 e0       	ldi	r22, 0x00	; 0
     8c0:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <digitalWrite>
	digitalWrite(OUT_D_TORCH_UP, OUT_D_TORCH_UP_NOT_ACTIVE);// "Torch Up" signal should be off by default
     8c4:	80 e3       	ldi	r24, 0x30	; 48
     8c6:	61 e0       	ldi	r22, 0x01	; 1
     8c8:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <digitalWrite>
	digitalWrite(OUT_D_TORCH_DOWN, OUT_D_TORCH_DOWN_NOT_ACTIVE);// "Torch Down" signal should be off by default
     8cc:	8e e2       	ldi	r24, 0x2E	; 46
     8ce:	61 e0       	ldi	r22, 0x01	; 1
     8d0:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <digitalWrite>
	digitalWrite(OUT_D_ARC_GOOD, OUT_D_ARC_GOOD_NOT_ACTIVE);// "Arc Good" signal should be off by default
     8d4:	82 e3       	ldi	r24, 0x32	; 50
     8d6:	61 e0       	ldi	r22, 0x01	; 1
     8d8:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <digitalWrite>

	//
	// Set up the interrupts for the "Torch On" and "Arc Good" signals.
	// We want change so we get interrupted on every change.
	//
	attachInterrupt(VECTOR_TORCH_ON_ISR, torchOnIsr, CHANGE);
     8dc:	82 e0       	ldi	r24, 0x02	; 2
     8de:	6b ee       	ldi	r22, 0xEB	; 235
     8e0:	73 e0       	ldi	r23, 0x03	; 3
     8e2:	41 e0       	ldi	r20, 0x01	; 1
     8e4:	50 e0       	ldi	r21, 0x00	; 0
     8e6:	0e 94 31 20 	call	0x4062	; 0x4062 <attachInterrupt>
	attachInterrupt(VECTOR_ARC_GOOD_ISR, arcGoodIsr, CHANGE);
     8ea:	83 e0       	ldi	r24, 0x03	; 3
     8ec:	6d ef       	ldi	r22, 0xFD	; 253
     8ee:	73 e0       	ldi	r23, 0x03	; 3
     8f0:	41 e0       	ldi	r20, 0x01	; 1
     8f2:	50 e0       	ldi	r21, 0x00	; 0
     8f4:	0e 94 31 20 	call	0x4062	; 0x4062 <attachInterrupt>

	// Read the current state of the "Torch On" signal and set the global variable
	currentStateData.torchOnState = (
			digitalRead(IN_D_INT_TORCH_ON_PIN) == IN_D_TORCH_ON_PIN_ACTIVE ?
					true : false);
     8f8:	85 e1       	ldi	r24, 0x15	; 21
     8fa:	0e 94 23 24 	call	0x4846	; 0x4846 <digitalRead>
     8fe:	20 e0       	ldi	r18, 0x00	; 0
     900:	89 2b       	or	r24, r25
     902:	09 f4       	brne	.+2      	; 0x906 <_Z7setupIOv+0xa2>
     904:	21 e0       	ldi	r18, 0x01	; 1
     906:	20 93 49 05 	sts	0x0549, r18

	// Read the current state of the "Arc Good" and set the global variable
	currentStateData.arcGoodState = (
			digitalRead(IN_D_INT_ARC_GOOD_PIN) == IN_D_ARC_GOOD_PIN_ACTIVE ?
					1 : 0);
     90a:	84 e1       	ldi	r24, 0x14	; 20
     90c:	0e 94 23 24 	call	0x4846	; 0x4846 <digitalRead>
     910:	20 e0       	ldi	r18, 0x00	; 0
     912:	89 2b       	or	r24, r25
     914:	09 f4       	brne	.+2      	; 0x918 <_Z7setupIOv+0xb4>
     916:	21 e0       	ldi	r18, 0x01	; 1
     918:	20 93 4a 05 	sts	0x054A, r18
	}
     91c:	08 95       	ret

0000091e <_GLOBAL__I_cutTimer>:
#include "HardwareSerial.h"

#include "Messages.h"
#include "Timer.hpp"

Timer cutTimer;
     91e:	84 e1       	ldi	r24, 0x14	; 20
     920:	95 e0       	ldi	r25, 0x05	; 5
     922:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN5TimerC1Ev>

	if (captureOnState)
		Serial1.write(PC_RESP_CAPTURE_ON);
	else
		Serial1.write(PC_RESP_CAPTURE_OFF);
	}
     926:	08 95       	ret

00000928 <_Z21sendCutVoltageMessagev>:
	buff[1] = (uint8_t) currentStateData.currentMode;
	Serial1.write(buff, 2);
}


void sendCutVoltageMessage()
     928:	df 93       	push	r29
     92a:	cf 93       	push	r28
     92c:	00 d0       	rcall	.+0      	; 0x92e <_Z21sendCutVoltageMessagev+0x6>
     92e:	00 d0       	rcall	.+0      	; 0x930 <_Z21sendCutVoltageMessagev+0x8>
     930:	cd b7       	in	r28, 0x3d	; 61
     932:	de b7       	in	r29, 0x3e	; 62
	{
	uint8_t byte[6];
	uint16_t millisecondsElapsed;

	byte[0] = PC_RESP_CUT_PACKET;
     934:	89 e0       	ldi	r24, 0x09	; 9
     936:	89 83       	std	Y+1, r24	; 0x01
	millisecondsElapsed = cutTimer.elapsedMilliSeconds();
     938:	84 e1       	ldi	r24, 0x14	; 20
     93a:	95 e0       	ldi	r25, 0x05	; 5
     93c:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <_ZN5Timer19elapsedMilliSecondsEv>
	byte[1] = (uint8_t)(millisecondsElapsed >> 8);
     940:	7a 83       	std	Y+2, r23	; 0x02
	byte[2] = (uint8_t)(millisecondsElapsed & 0xff);
     942:	6b 83       	std	Y+3, r22	; 0x03
	byte[3] = COUNT_MASK;
     944:	80 e8       	ldi	r24, 0x80	; 128
     946:	8c 83       	std	Y+4, r24	; 0x04

	if (currentStateData.torchOnState)
     948:	80 91 49 05 	lds	r24, 0x0549
     94c:	88 23       	and	r24, r24
     94e:	11 f0       	breq	.+4      	; 0x954 <_Z21sendCutVoltageMessagev+0x2c>
		byte[3] |= TORCH_ON_MASK;
     950:	80 ec       	ldi	r24, 0xC0	; 192
     952:	8c 83       	std	Y+4, r24	; 0x04

	if (currentStateData.arcGoodState)
     954:	80 91 4a 05 	lds	r24, 0x054A
     958:	88 23       	and	r24, r24
     95a:	19 f0       	breq	.+6      	; 0x962 <_Z21sendCutVoltageMessagev+0x3a>
		byte[3] |= ARC_GOOD_MASK;
     95c:	8c 81       	ldd	r24, Y+4	; 0x04
     95e:	80 62       	ori	r24, 0x20	; 32
     960:	8c 83       	std	Y+4, r24	; 0x04

	if (currentStateData.runVoltageControl)
     962:	80 91 64 05 	lds	r24, 0x0564
     966:	88 23       	and	r24, r24
     968:	19 f0       	breq	.+6      	; 0x970 <_Z21sendCutVoltageMessagev+0x48>
		byte[3] |= VOLT_CTL_ON_MASK;
     96a:	8c 81       	ldd	r24, Y+4	; 0x04
     96c:	80 61       	ori	r24, 0x10	; 16
     96e:	8c 83       	std	Y+4, r24	; 0x04

	if (currentStateData.torchUp)
     970:	80 91 66 05 	lds	r24, 0x0566
     974:	88 23       	and	r24, r24
     976:	19 f0       	breq	.+6      	; 0x97e <_Z21sendCutVoltageMessagev+0x56>
		byte[3] |= TORCH_UP_MASK;
     978:	8c 81       	ldd	r24, Y+4	; 0x04
     97a:	88 60       	ori	r24, 0x08	; 8
     97c:	8c 83       	std	Y+4, r24	; 0x04

	if (currentStateData.torchDown)
     97e:	80 91 67 05 	lds	r24, 0x0567
     982:	88 23       	and	r24, r24
     984:	19 f0       	breq	.+6      	; 0x98c <_Z21sendCutVoltageMessagev+0x64>
		byte[3] |= TORCH_DOWN_MASK;
     986:	8c 81       	ldd	r24, Y+4	; 0x04
     988:	84 60       	ori	r24, 0x04	; 4
     98a:	8c 83       	std	Y+4, r24	; 0x04

	byte[3] |= (char) ((currentStateData.currentVoltage >> 8) & MSB_COUNTS_MASK);
     98c:	20 91 4e 05 	lds	r18, 0x054E
     990:	90 91 4f 05 	lds	r25, 0x054F
     994:	93 70       	andi	r25, 0x03	; 3
     996:	8c 81       	ldd	r24, Y+4	; 0x04
     998:	89 2b       	or	r24, r25
     99a:	8c 83       	std	Y+4, r24	; 0x04

	byte[4] = (uint8_t) (currentStateData.currentVoltage & 0xff);
     99c:	2d 83       	std	Y+5, r18	; 0x05

	byte[5] = (uint8_t) (analogRead(14) - 255);
     99e:	8e e0       	ldi	r24, 0x0E	; 14
     9a0:	0e 94 09 23 	call	0x4612	; 0x4612 <analogRead>
     9a4:	8f 5f       	subi	r24, 0xFF	; 255
     9a6:	8e 83       	std	Y+6, r24	; 0x06
	Serial1.write((const uint8_t*) byte, 6);
     9a8:	84 ec       	ldi	r24, 0xC4	; 196
     9aa:	97 e0       	ldi	r25, 0x07	; 7
     9ac:	be 01       	movw	r22, r28
     9ae:	6f 5f       	subi	r22, 0xFF	; 255
     9b0:	7f 4f       	sbci	r23, 0xFF	; 255
     9b2:	46 e0       	ldi	r20, 0x06	; 6
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	0e 94 1f 1f 	call	0x3e3e	; 0x3e3e <_ZN5Print5writeEPKhj>
	}
     9ba:	26 96       	adiw	r28, 0x06	; 6
     9bc:	0f b6       	in	r0, 0x3f	; 63
     9be:	f8 94       	cli
     9c0:	de bf       	out	0x3e, r29	; 62
     9c2:	0f be       	out	0x3f, r0	; 63
     9c4:	cd bf       	out	0x3d, r28	; 61
     9c6:	cf 91       	pop	r28
     9c8:	df 91       	pop	r29
     9ca:	08 95       	ret

000009cc <_Z8SendModev>:
	buff[0] = (uint8_t) PC_RESP_UNIT;
	buff[1] = (uint8_t) currentStateData.currentUnit;
	Serial1.write(buff, 2);
}

void SendMode()
     9cc:	df 93       	push	r29
     9ce:	cf 93       	push	r28
     9d0:	0f 92       	push	r0
     9d2:	0f 92       	push	r0
     9d4:	cd b7       	in	r28, 0x3d	; 61
     9d6:	de b7       	in	r29, 0x3e	; 62
{
	uint8_t buff[2];

	// Build and send the response.
	buff[0] = (uint8_t) PC_RESP_MODE;
     9d8:	81 e0       	ldi	r24, 0x01	; 1
     9da:	89 83       	std	Y+1, r24	; 0x01
	buff[1] = (uint8_t) currentStateData.currentMode;
     9dc:	80 91 45 05 	lds	r24, 0x0545
     9e0:	8a 83       	std	Y+2, r24	; 0x02
	Serial1.write(buff, 2);
     9e2:	84 ec       	ldi	r24, 0xC4	; 196
     9e4:	97 e0       	ldi	r25, 0x07	; 7
     9e6:	be 01       	movw	r22, r28
     9e8:	6f 5f       	subi	r22, 0xFF	; 255
     9ea:	7f 4f       	sbci	r23, 0xFF	; 255
     9ec:	42 e0       	ldi	r20, 0x02	; 2
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	0e 94 1f 1f 	call	0x3e3e	; 0x3e3e <_ZN5Print5writeEPKhj>
}
     9f4:	0f 90       	pop	r0
     9f6:	0f 90       	pop	r0
     9f8:	cf 91       	pop	r28
     9fa:	df 91       	pop	r29
     9fc:	08 95       	ret

000009fe <_Z9SendUnitsv>:
	buff[1] = (uint8_t) (value >> 8);
	buff[2] = (uint8_t) (value & 0xff);
	Serial1.write(buff, 3);
}

void SendUnits()
     9fe:	df 93       	push	r29
     a00:	cf 93       	push	r28
     a02:	0f 92       	push	r0
     a04:	0f 92       	push	r0
     a06:	cd b7       	in	r28, 0x3d	; 61
     a08:	de b7       	in	r29, 0x3e	; 62
{
	uint8_t buff[2];

	// Build and send the response.
	buff[0] = (uint8_t) PC_RESP_UNIT;
     a0a:	84 e0       	ldi	r24, 0x04	; 4
     a0c:	89 83       	std	Y+1, r24	; 0x01
	buff[1] = (uint8_t) currentStateData.currentUnit;
     a0e:	80 91 47 05 	lds	r24, 0x0547
     a12:	8a 83       	std	Y+2, r24	; 0x02
	Serial1.write(buff, 2);
     a14:	84 ec       	ldi	r24, 0xC4	; 196
     a16:	97 e0       	ldi	r25, 0x07	; 7
     a18:	be 01       	movw	r22, r28
     a1a:	6f 5f       	subi	r22, 0xFF	; 255
     a1c:	7f 4f       	sbci	r23, 0xFF	; 255
     a1e:	42 e0       	ldi	r20, 0x02	; 2
     a20:	50 e0       	ldi	r21, 0x00	; 0
     a22:	0e 94 1f 1f 	call	0x3e3e	; 0x3e3e <_ZN5Print5writeEPKhj>
}
     a26:	0f 90       	pop	r0
     a28:	0f 90       	pop	r0
     a2a:	cf 91       	pop	r28
     a2c:	df 91       	pop	r29
     a2e:	08 95       	ret

00000a30 <_Z11SendVoltage11PC_RESPONSE>:
#include "Messages.h"
#include "Timer.hpp"

Timer cutTimer;

void SendVoltage(PC_RESPONSE type)
     a30:	df 93       	push	r29
     a32:	cf 93       	push	r28
     a34:	00 d0       	rcall	.+0      	; 0xa36 <_Z11SendVoltage11PC_RESPONSE+0x6>
     a36:	cd b7       	in	r28, 0x3d	; 61
     a38:	de b7       	in	r29, 0x3e	; 62
     a3a:	9c 01       	movw	r18, r24
{
	uint16_t value;
	uint8_t buff[3];

	if (type == PC_RESP_SETPOINT)
     a3c:	82 30       	cpi	r24, 0x02	; 2
     a3e:	91 05       	cpc	r25, r1
     a40:	29 f4       	brne	.+10     	; 0xa4c <_Z11SendVoltage11PC_RESPONSE+0x1c>
		value = currentStateData.voltSetPoint;
     a42:	60 91 4c 05 	lds	r22, 0x054C
     a46:	70 91 4d 05 	lds	r23, 0x054D
     a4a:	04 c0       	rjmp	.+8      	; 0xa54 <_Z11SendVoltage11PC_RESPONSE+0x24>
	else
		value = currentStateData.currentVoltage;
     a4c:	60 91 4e 05 	lds	r22, 0x054E
     a50:	70 91 4f 05 	lds	r23, 0x054F

	if (currentStateData.currentUnit == THC_UNIT_VOLTS)
     a54:	80 91 47 05 	lds	r24, 0x0547
     a58:	90 91 48 05 	lds	r25, 0x0548
     a5c:	02 97       	sbiw	r24, 0x02	; 2
     a5e:	29 f4       	brne	.+10     	; 0xa6a <_Z11SendVoltage11PC_RESPONSE+0x3a>
		value /= 7;
     a60:	cb 01       	movw	r24, r22
     a62:	67 e0       	ldi	r22, 0x07	; 7
     a64:	70 e0       	ldi	r23, 0x00	; 0
     a66:	0e 94 72 24 	call	0x48e4	; 0x48e4 <__udivmodhi4>

	buff[0] = type;
     a6a:	29 83       	std	Y+1, r18	; 0x01
	buff[1] = (uint8_t) (value >> 8);
     a6c:	7a 83       	std	Y+2, r23	; 0x02
	buff[2] = (uint8_t) (value & 0xff);
     a6e:	6b 83       	std	Y+3, r22	; 0x03
	Serial1.write(buff, 3);
     a70:	84 ec       	ldi	r24, 0xC4	; 196
     a72:	97 e0       	ldi	r25, 0x07	; 7
     a74:	be 01       	movw	r22, r28
     a76:	6f 5f       	subi	r22, 0xFF	; 255
     a78:	7f 4f       	sbci	r23, 0xFF	; 255
     a7a:	43 e0       	ldi	r20, 0x03	; 3
     a7c:	50 e0       	ldi	r21, 0x00	; 0
     a7e:	0e 94 1f 1f 	call	0x3e3e	; 0x3e3e <_ZN5Print5writeEPKhj>
}
     a82:	0f 90       	pop	r0
     a84:	0f 90       	pop	r0
     a86:	0f 90       	pop	r0
     a88:	cf 91       	pop	r28
     a8a:	df 91       	pop	r29
     a8c:	08 95       	ret

00000a8e <_Z23sendVoltageCaptureStateb>:
	}

void sendVoltageCaptureState(bool captureOnState)
	{

	if (captureOnState)
     a8e:	88 23       	and	r24, r24
     a90:	21 f0       	breq	.+8      	; 0xa9a <_Z23sendVoltageCaptureStateb+0xc>
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     a92:	84 ec       	ldi	r24, 0xC4	; 196
     a94:	97 e0       	ldi	r25, 0x07	; 7
     a96:	68 e0       	ldi	r22, 0x08	; 8
     a98:	03 c0       	rjmp	.+6      	; 0xaa0 <_Z23sendVoltageCaptureStateb+0x12>
     a9a:	84 ec       	ldi	r24, 0xC4	; 196
     a9c:	97 e0       	ldi	r25, 0x07	; 7
     a9e:	67 e0       	ldi	r22, 0x07	; 7
     aa0:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <_ZN14HardwareSerial5writeEh>
     aa4:	08 95       	ret

00000aa6 <_Z18SendCutStartPacketv>:
	Serial1.write((const uint8_t*) byte, 6);
	}

void SendCutStartPacket()
	{
		cutTimer.startTimer();
     aa6:	84 e1       	ldi	r24, 0x14	; 20
     aa8:	95 e0       	ldi	r25, 0x05	; 5
     aaa:	0e 94 3b 18 	call	0x3076	; 0x3076 <_ZN5Timer10startTimerEv>
     aae:	84 ec       	ldi	r24, 0xC4	; 196
     ab0:	97 e0       	ldi	r25, 0x07	; 7
     ab2:	66 e0       	ldi	r22, 0x06	; 6
     ab4:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <_ZN14HardwareSerial5writeEh>
		Serial1.write(PC_RESP_START_CUT);
	}
     ab8:	08 95       	ret

00000aba <_ZN18NonVolatileStorageC1Ev>:
//
// NonVolatileStorage Constructor
//
// When created, just set the flag to denote that no data is loaded.
//
NonVolatileStorage::NonVolatileStorage()
     aba:	fc 01       	movw	r30, r24
	{
	initialized = false;
     abc:	10 82       	st	Z, r1

	// None of the following need initialized, but do
	// it anyway to prevent uninitialized variable warnings.
	addrOffset = 1;
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	81 83       	std	Z+1, r24	; 0x01
	scale = DEFAULT_SCALE;
     ac2:	88 e2       	ldi	r24, 0x28	; 40
     ac4:	82 83       	std	Z+2, r24	; 0x02
	voltSetPoint = DEFAULT_SET_POINT;
     ac6:	88 e5       	ldi	r24, 0x58	; 88
     ac8:	92 e0       	ldi	r25, 0x02	; 2
     aca:	93 87       	std	Z+11, r25	; 0x0b
     acc:	82 87       	std	Z+10, r24	; 0x0a
	pilotArcCount = 0;
     ace:	14 82       	std	Z+4, r1	; 0x04
     ad0:	13 82       	std	Z+3, r1	; 0x03
	pierceCount = 0;
     ad2:	16 82       	std	Z+6, r1	; 0x06
     ad4:	15 82       	std	Z+5, r1	; 0x05
	tipHours = 0;
     ad6:	17 82       	std	Z+7, r1	; 0x07
	tipMinutes = 0;
     ad8:	10 86       	std	Z+8, r1	; 0x08
	tipSeconds = 0;
     ada:	11 86       	std	Z+9, r1	; 0x09
	writeCount = 0;
     adc:	14 86       	std	Z+12, r1	; 0x0c
     ade:	15 86       	std	Z+13, r1	; 0x0d
     ae0:	16 86       	std	Z+14, r1	; 0x0e
     ae2:	17 86       	std	Z+15, r1	; 0x0f
	defaultState = THC_STATE_ENABLED;
     ae4:	11 8a       	std	Z+17, r1	; 0x11
     ae6:	10 8a       	std	Z+16, r1	; 0x10

	}
     ae8:	08 95       	ret

00000aea <_ZN18NonVolatileStorage10DataSetAllEP11THCStatData>:
// passed in.  If not initialized, then just return.
//
// Parameters:
//	In/Out - ptr to data structure to set object values to
//
void NonVolatileStorage::DataSetAll(THCStatData* data)
     aea:	fc 01       	movw	r30, r24
     aec:	db 01       	movw	r26, r22
	{
	if (!initialized)
     aee:	80 81       	ld	r24, Z
     af0:	88 23       	and	r24, r24
     af2:	31 f1       	breq	.+76     	; 0xb40 <_ZN18NonVolatileStorage10DataSetAllEP11THCStatData+0x56>
		return;

	scale = data->voltageScaleFactor;
     af4:	8c 91       	ld	r24, X
     af6:	82 83       	std	Z+2, r24	; 0x02
	pilotArcCount = data->pilotArcCount;
     af8:	11 96       	adiw	r26, 0x01	; 1
     afa:	8d 91       	ld	r24, X+
     afc:	9c 91       	ld	r25, X
     afe:	12 97       	sbiw	r26, 0x02	; 2
     b00:	94 83       	std	Z+4, r25	; 0x04
     b02:	83 83       	std	Z+3, r24	; 0x03
	pierceCount = data->pierceCount;
     b04:	13 96       	adiw	r26, 0x03	; 3
     b06:	8d 91       	ld	r24, X+
     b08:	9c 91       	ld	r25, X
     b0a:	14 97       	sbiw	r26, 0x04	; 4
     b0c:	96 83       	std	Z+6, r25	; 0x06
     b0e:	85 83       	std	Z+5, r24	; 0x05
	tipHours = data->tipHours;
     b10:	15 96       	adiw	r26, 0x05	; 5
     b12:	8c 91       	ld	r24, X
     b14:	15 97       	sbiw	r26, 0x05	; 5
     b16:	87 83       	std	Z+7, r24	; 0x07
	tipMinutes = data->tipMinutes;
     b18:	16 96       	adiw	r26, 0x06	; 6
     b1a:	8c 91       	ld	r24, X
     b1c:	16 97       	sbiw	r26, 0x06	; 6
     b1e:	80 87       	std	Z+8, r24	; 0x08
	tipSeconds = data->tipSeconds;
     b20:	17 96       	adiw	r26, 0x07	; 7
     b22:	8c 91       	ld	r24, X
     b24:	17 97       	sbiw	r26, 0x07	; 7
     b26:	81 87       	std	Z+9, r24	; 0x09
	voltSetPoint = data->voltSetPoint;
     b28:	18 96       	adiw	r26, 0x08	; 8
     b2a:	8d 91       	ld	r24, X+
     b2c:	9c 91       	ld	r25, X
     b2e:	19 97       	sbiw	r26, 0x09	; 9
     b30:	93 87       	std	Z+11, r25	; 0x0b
     b32:	82 87       	std	Z+10, r24	; 0x0a
	defaultState = (THCState_e) data->defaultState;
     b34:	1a 96       	adiw	r26, 0x0a	; 10
     b36:	8d 91       	ld	r24, X+
     b38:	9c 91       	ld	r25, X
     b3a:	1b 97       	sbiw	r26, 0x0b	; 11
     b3c:	91 8b       	std	Z+17, r25	; 0x11
     b3e:	80 8b       	std	Z+16, r24	; 0x10
     b40:	08 95       	ret

00000b42 <_ZN18NonVolatileStorage8getBlockEv>:


unsigned char NonVolatileStorage::getBlock(void)
	{
	return addrOffset;
	}
     b42:	fc 01       	movw	r30, r24
     b44:	81 81       	ldd	r24, Z+1	; 0x01
     b46:	08 95       	ret

00000b48 <_ZN18NonVolatileStorage8DataSaveEv>:
// DataSave
//
// Save the current object values in EEPROM.  If not initialized
// properly, then just return.
//
void NonVolatileStorage::DataSave(void)
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	cf 93       	push	r28
     b4e:	df 93       	push	r29
     b50:	8c 01       	movw	r16, r24
	{
	unsigned int addrOffsetValue;

	// Don't write anything if the values were never initialized.
	if (!initialized)
     b52:	fc 01       	movw	r30, r24
     b54:	80 81       	ld	r24, Z
     b56:	88 23       	and	r24, r24
     b58:	09 f4       	brne	.+2      	; 0xb5c <_ZN18NonVolatileStorage8DataSaveEv+0x14>
     b5a:	aa c0       	rjmp	.+340    	; 0xcb0 <_ZN18NonVolatileStorage8DataSaveEv+0x168>
		return;
	addrOffsetValue = (addrOffset * MEMORY_BLOCK_SIZE) + 1;
     b5c:	21 81       	ldd	r18, Z+1	; 0x01
     b5e:	c2 2f       	mov	r28, r18
     b60:	d0 e0       	ldi	r29, 0x00	; 0
     b62:	74 e0       	ldi	r23, 0x04	; 4
     b64:	cc 0f       	add	r28, r28
     b66:	dd 1f       	adc	r29, r29
     b68:	7a 95       	dec	r23
     b6a:	e1 f7       	brne	.-8      	; 0xb64 <_ZN18NonVolatileStorage8DataSaveEv+0x1c>
     b6c:	21 96       	adiw	r28, 0x01	; 1

	// Increment the count of data saved.
	writeCount++;
     b6e:	84 85       	ldd	r24, Z+12	; 0x0c
     b70:	95 85       	ldd	r25, Z+13	; 0x0d
     b72:	a6 85       	ldd	r26, Z+14	; 0x0e
     b74:	b7 85       	ldd	r27, Z+15	; 0x0f
     b76:	01 96       	adiw	r24, 0x01	; 1
     b78:	a1 1d       	adc	r26, r1
     b7a:	b1 1d       	adc	r27, r1
     b7c:	84 87       	std	Z+12, r24	; 0x0c
     b7e:	95 87       	std	Z+13, r25	; 0x0d
     b80:	a6 87       	std	Z+14, r26	; 0x0e
     b82:	b7 87       	std	Z+15, r27	; 0x0f
	// If we've exceeded the EEPROM write limit, move to the next
	// block of memory.
	if (writeCount >= WRITE_LIMIT)
     b84:	88 51       	subi	r24, 0x18	; 24
     b86:	93 47       	sbci	r25, 0x73	; 115
     b88:	a1 40       	sbci	r26, 0x01	; 1
     b8a:	b0 40       	sbci	r27, 0x00	; 0
     b8c:	18 f0       	brcs	.+6      	; 0xb94 <_ZN18NonVolatileStorage8DataSaveEv+0x4c>
		addrOffset += MEMORY_BLOCK_SIZE;
     b8e:	20 5f       	subi	r18, 0xF0	; 240
     b90:	f8 01       	movw	r30, r16
     b92:	21 83       	std	Z+1, r18	; 0x01

	// Now, write all the values.
	EEPROM.write(REL_ADDR_PILOT_ARC_COUNT_BYTE1 + addrOffsetValue,
			(unsigned char) pilotArcCount >> 8);
     b94:	24 96       	adiw	r28, 0x04	; 4
     b96:	81 e8       	ldi	r24, 0x81	; 129
     b98:	95 e0       	ldi	r25, 0x05	; 5
     b9a:	be 01       	movw	r22, r28
     b9c:	40 e0       	ldi	r20, 0x00	; 0
     b9e:	0e 94 67 1a 	call	0x34ce	; 0x34ce <_ZN11EEPROMClass5writeEih>
	EEPROM.write(REL_ADDR_PILOT_ARC_COUNT_BYTE2 + addrOffsetValue,
			(unsigned char) pilotArcCount & 0xff);
     ba2:	21 96       	adiw	r28, 0x01	; 1
     ba4:	81 e8       	ldi	r24, 0x81	; 129
     ba6:	95 e0       	ldi	r25, 0x05	; 5
     ba8:	be 01       	movw	r22, r28
     baa:	f8 01       	movw	r30, r16
     bac:	43 81       	ldd	r20, Z+3	; 0x03
     bae:	0e 94 67 1a 	call	0x34ce	; 0x34ce <_ZN11EEPROMClass5writeEih>
	EEPROM.write(REL_ADDR_PIERCE_COUNT_BYTE1 + addrOffsetValue,
			(unsigned char) (pierceCount >> 8));
     bb2:	21 96       	adiw	r28, 0x01	; 1
     bb4:	f8 01       	movw	r30, r16
     bb6:	46 81       	ldd	r20, Z+6	; 0x06
     bb8:	81 e8       	ldi	r24, 0x81	; 129
     bba:	95 e0       	ldi	r25, 0x05	; 5
     bbc:	be 01       	movw	r22, r28
     bbe:	0e 94 67 1a 	call	0x34ce	; 0x34ce <_ZN11EEPROMClass5writeEih>
	EEPROM.write(REL_ADDR_PIERCE_COUNT_BYTE2 + addrOffsetValue,
			(unsigned char) (pierceCount & 0xff));
     bc2:	21 96       	adiw	r28, 0x01	; 1
     bc4:	81 e8       	ldi	r24, 0x81	; 129
     bc6:	95 e0       	ldi	r25, 0x05	; 5
     bc8:	be 01       	movw	r22, r28
     bca:	f8 01       	movw	r30, r16
     bcc:	45 81       	ldd	r20, Z+5	; 0x05
     bce:	0e 94 67 1a 	call	0x34ce	; 0x34ce <_ZN11EEPROMClass5writeEih>
	EEPROM.write(REL_ADDR_TIP_HOURS_BYTE + addrOffsetValue, tipHours);
     bd2:	21 96       	adiw	r28, 0x01	; 1
     bd4:	81 e8       	ldi	r24, 0x81	; 129
     bd6:	95 e0       	ldi	r25, 0x05	; 5
     bd8:	be 01       	movw	r22, r28
     bda:	f8 01       	movw	r30, r16
     bdc:	47 81       	ldd	r20, Z+7	; 0x07
     bde:	0e 94 67 1a 	call	0x34ce	; 0x34ce <_ZN11EEPROMClass5writeEih>
	EEPROM.write(REL_ADDR_TIP_MINUTES_BYTE + addrOffsetValue, tipMinutes);
     be2:	21 96       	adiw	r28, 0x01	; 1
     be4:	81 e8       	ldi	r24, 0x81	; 129
     be6:	95 e0       	ldi	r25, 0x05	; 5
     be8:	be 01       	movw	r22, r28
     bea:	f8 01       	movw	r30, r16
     bec:	40 85       	ldd	r20, Z+8	; 0x08
     bee:	0e 94 67 1a 	call	0x34ce	; 0x34ce <_ZN11EEPROMClass5writeEih>
	EEPROM.write(REL_ADDR_TIP_SECONDS_BYTE + addrOffsetValue, tipSeconds);
     bf2:	21 96       	adiw	r28, 0x01	; 1
     bf4:	81 e8       	ldi	r24, 0x81	; 129
     bf6:	95 e0       	ldi	r25, 0x05	; 5
     bf8:	be 01       	movw	r22, r28
     bfa:	f8 01       	movw	r30, r16
     bfc:	41 85       	ldd	r20, Z+9	; 0x09
     bfe:	0e 94 67 1a 	call	0x34ce	; 0x34ce <_ZN11EEPROMClass5writeEih>
	EEPROM.write(REL_ADDR_VOLT_SCALING + addrOffsetValue, scale);
     c02:	27 97       	sbiw	r28, 0x07	; 7
     c04:	81 e8       	ldi	r24, 0x81	; 129
     c06:	95 e0       	ldi	r25, 0x05	; 5
     c08:	be 01       	movw	r22, r28
     c0a:	f8 01       	movw	r30, r16
     c0c:	42 81       	ldd	r20, Z+2	; 0x02
     c0e:	0e 94 67 1a 	call	0x34ce	; 0x34ce <_ZN11EEPROMClass5writeEih>
	EEPROM.write(REL_ADDR_WRITE_COUNT_BYTE1 + addrOffsetValue,
			(unsigned char) (writeCount >> 24));
     c12:	28 96       	adiw	r28, 0x08	; 8
     c14:	f8 01       	movw	r30, r16
     c16:	24 85       	ldd	r18, Z+12	; 0x0c
     c18:	35 85       	ldd	r19, Z+13	; 0x0d
     c1a:	46 85       	ldd	r20, Z+14	; 0x0e
     c1c:	57 85       	ldd	r21, Z+15	; 0x0f
     c1e:	25 2f       	mov	r18, r21
     c20:	33 27       	eor	r19, r19
     c22:	44 27       	eor	r20, r20
     c24:	55 27       	eor	r21, r21
     c26:	81 e8       	ldi	r24, 0x81	; 129
     c28:	95 e0       	ldi	r25, 0x05	; 5
     c2a:	be 01       	movw	r22, r28
     c2c:	42 2f       	mov	r20, r18
     c2e:	0e 94 67 1a 	call	0x34ce	; 0x34ce <_ZN11EEPROMClass5writeEih>
	EEPROM.write(REL_ADDR_WRITE_COUNT_BYTE2 + addrOffsetValue,
			(unsigned char) (writeCount >> 16) & 0xff);
     c32:	21 96       	adiw	r28, 0x01	; 1
     c34:	f8 01       	movw	r30, r16
     c36:	24 85       	ldd	r18, Z+12	; 0x0c
     c38:	35 85       	ldd	r19, Z+13	; 0x0d
     c3a:	46 85       	ldd	r20, Z+14	; 0x0e
     c3c:	57 85       	ldd	r21, Z+15	; 0x0f
     c3e:	9a 01       	movw	r18, r20
     c40:	44 27       	eor	r20, r20
     c42:	55 27       	eor	r21, r21
     c44:	81 e8       	ldi	r24, 0x81	; 129
     c46:	95 e0       	ldi	r25, 0x05	; 5
     c48:	be 01       	movw	r22, r28
     c4a:	42 2f       	mov	r20, r18
     c4c:	0e 94 67 1a 	call	0x34ce	; 0x34ce <_ZN11EEPROMClass5writeEih>
	EEPROM.write(REL_ADDR_WRITE_COUNT_BYTE3 + addrOffsetValue,
			(unsigned char) (writeCount >> 8) & 0xff);
     c50:	21 96       	adiw	r28, 0x01	; 1
     c52:	f8 01       	movw	r30, r16
     c54:	24 85       	ldd	r18, Z+12	; 0x0c
     c56:	35 85       	ldd	r19, Z+13	; 0x0d
     c58:	46 85       	ldd	r20, Z+14	; 0x0e
     c5a:	57 85       	ldd	r21, Z+15	; 0x0f
     c5c:	23 2f       	mov	r18, r19
     c5e:	34 2f       	mov	r19, r20
     c60:	45 2f       	mov	r20, r21
     c62:	55 27       	eor	r21, r21
     c64:	81 e8       	ldi	r24, 0x81	; 129
     c66:	95 e0       	ldi	r25, 0x05	; 5
     c68:	be 01       	movw	r22, r28
     c6a:	42 2f       	mov	r20, r18
     c6c:	0e 94 67 1a 	call	0x34ce	; 0x34ce <_ZN11EEPROMClass5writeEih>
	EEPROM.write(REL_ADDR_WRITE_COUNT_BYTE4 + addrOffsetValue,
			(unsigned char) writeCount & 0xff);
     c70:	21 96       	adiw	r28, 0x01	; 1
     c72:	81 e8       	ldi	r24, 0x81	; 129
     c74:	95 e0       	ldi	r25, 0x05	; 5
     c76:	be 01       	movw	r22, r28
     c78:	f8 01       	movw	r30, r16
     c7a:	44 85       	ldd	r20, Z+12	; 0x0c
     c7c:	0e 94 67 1a 	call	0x34ce	; 0x34ce <_ZN11EEPROMClass5writeEih>
	EEPROM.write(REL_ADDR_VOLT_SETPOINT_B1 + addrOffsetValue,
			(unsigned char) (voltSetPoint & 0xff));
     c80:	2d 97       	sbiw	r28, 0x0d	; 13
     c82:	81 e8       	ldi	r24, 0x81	; 129
     c84:	95 e0       	ldi	r25, 0x05	; 5
     c86:	be 01       	movw	r22, r28
     c88:	f8 01       	movw	r30, r16
     c8a:	42 85       	ldd	r20, Z+10	; 0x0a
     c8c:	0e 94 67 1a 	call	0x34ce	; 0x34ce <_ZN11EEPROMClass5writeEih>
	EEPROM.write(REL_ADDR_VOLT_SETPOINT_B2 + addrOffsetValue,
			(unsigned char) ((voltSetPoint & 0xff00) >> 8));
     c90:	21 96       	adiw	r28, 0x01	; 1
     c92:	f8 01       	movw	r30, r16
     c94:	43 85       	ldd	r20, Z+11	; 0x0b
     c96:	81 e8       	ldi	r24, 0x81	; 129
     c98:	95 e0       	ldi	r25, 0x05	; 5
     c9a:	be 01       	movw	r22, r28
     c9c:	0e 94 67 1a 	call	0x34ce	; 0x34ce <_ZN11EEPROMClass5writeEih>
	EEPROM.write(REL_ADDR_DEFAULT_STATE + addrOffsetValue,
			(unsigned char) defaultState);
     ca0:	2d 96       	adiw	r28, 0x0d	; 13
     ca2:	81 e8       	ldi	r24, 0x81	; 129
     ca4:	95 e0       	ldi	r25, 0x05	; 5
     ca6:	be 01       	movw	r22, r28
     ca8:	f8 01       	movw	r30, r16
     caa:	40 89       	ldd	r20, Z+16	; 0x10
     cac:	0e 94 67 1a 	call	0x34ce	; 0x34ce <_ZN11EEPROMClass5writeEih>
	}
     cb0:	df 91       	pop	r29
     cb2:	cf 91       	pop	r28
     cb4:	1f 91       	pop	r17
     cb6:	0f 91       	pop	r16
     cb8:	08 95       	ret

00000cba <_ZN18NonVolatileStorage9DataResetEv>:
		DataSave();
		}
	return addrOffset;
	}

void NonVolatileStorage::DataReset(void)
     cba:	fc 01       	movw	r30, r24
	{
	// Reset the usage counts.
	pilotArcCount = 0;
     cbc:	14 82       	std	Z+4, r1	; 0x04
     cbe:	13 82       	std	Z+3, r1	; 0x03
	pierceCount = 0;
     cc0:	16 82       	std	Z+6, r1	; 0x06
     cc2:	15 82       	std	Z+5, r1	; 0x05
	tipHours = 0;
     cc4:	17 82       	std	Z+7, r1	; 0x07
	tipMinutes = 0;
     cc6:	10 86       	std	Z+8, r1	; 0x08
	// Save the reset values.
	DataSave();
     cc8:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN18NonVolatileStorage8DataSaveEv>
	}
     ccc:	08 95       	ret

00000cce <_ZN18NonVolatileStorage8setBlockEh>:
	}




unsigned char NonVolatileStorage::setBlock(unsigned char newBlockAddr)
     cce:	cf 93       	push	r28
     cd0:	df 93       	push	r29
     cd2:	ec 01       	movw	r28, r24
     cd4:	46 2f       	mov	r20, r22
	{
	if (newBlockAddr > 5)
     cd6:	66 30       	cpi	r22, 0x06	; 6
     cd8:	08 f0       	brcs	.+2      	; 0xcdc <_ZN18NonVolatileStorage8setBlockEh+0xe>
     cda:	40 e0       	ldi	r20, 0x00	; 0
		newBlockAddr = 0;

	if (newBlockAddr != addrOffset)
     cdc:	89 81       	ldd	r24, Y+1	; 0x01
     cde:	48 17       	cp	r20, r24
     ce0:	71 f0       	breq	.+28     	; 0xcfe <_ZN18NonVolatileStorage8setBlockEh+0x30>
		{
		// Set the new base block address.
		addrOffset = newBlockAddr;
     ce2:	49 83       	std	Y+1, r20	; 0x01
		// Reset the write count.
		writeCount = 0;
     ce4:	1c 86       	std	Y+12, r1	; 0x0c
     ce6:	1d 86       	std	Y+13, r1	; 0x0d
     ce8:	1e 86       	std	Y+14, r1	; 0x0e
     cea:	1f 86       	std	Y+15, r1	; 0x0f
		// Save the offset value
		EEPROM.write(ADDR_OFFSET, addrOffset);
     cec:	81 e8       	ldi	r24, 0x81	; 129
     cee:	95 e0       	ldi	r25, 0x05	; 5
     cf0:	60 e0       	ldi	r22, 0x00	; 0
     cf2:	70 e0       	ldi	r23, 0x00	; 0
     cf4:	0e 94 67 1a 	call	0x34ce	; 0x34ce <_ZN11EEPROMClass5writeEih>
		// Save all the data to the new location.
		DataSave();
     cf8:	ce 01       	movw	r24, r28
     cfa:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN18NonVolatileStorage8DataSaveEv>
		}
	return addrOffset;
	}
     cfe:	89 81       	ldd	r24, Y+1	; 0x01
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	08 95       	ret

00000d06 <_ZN18NonVolatileStorage17InitializeStorageEh>:
// those reset values to the flash.  It is typically used when
// the flash is blank or if the flash data is corrupt (determined
// based on a magic number).
//
//
void NonVolatileStorage::InitializeStorage(unsigned char addrOffsetParam)
     d06:	af 92       	push	r10
     d08:	bf 92       	push	r11
     d0a:	cf 92       	push	r12
     d0c:	df 92       	push	r13
     d0e:	ef 92       	push	r14
     d10:	ff 92       	push	r15
     d12:	0f 93       	push	r16
     d14:	1f 93       	push	r17
     d16:	7c 01       	movw	r14, r24
     d18:	46 2f       	mov	r20, r22
	{
	unsigned int addrOffsetValue;

	// Initialize all the EEPROM memory assuming this
	// is a new system.
	addrOffset = addrOffsetParam;
     d1a:	fc 01       	movw	r30, r24
     d1c:	61 83       	std	Z+1, r22	; 0x01
	scale = DEFAULT_SCALE;
     d1e:	88 e2       	ldi	r24, 0x28	; 40
     d20:	82 83       	std	Z+2, r24	; 0x02
	voltSetPoint = DEFAULT_SET_POINT;
     d22:	88 e5       	ldi	r24, 0x58	; 88
     d24:	92 e0       	ldi	r25, 0x02	; 2
     d26:	93 87       	std	Z+11, r25	; 0x0b
     d28:	82 87       	std	Z+10, r24	; 0x0a
	pilotArcCount = 0;
     d2a:	14 82       	std	Z+4, r1	; 0x04
     d2c:	13 82       	std	Z+3, r1	; 0x03
	pierceCount = 0;
     d2e:	16 82       	std	Z+6, r1	; 0x06
     d30:	15 82       	std	Z+5, r1	; 0x05
	tipHours = 0;
     d32:	17 82       	std	Z+7, r1	; 0x07
	tipMinutes = 0;
     d34:	10 86       	std	Z+8, r1	; 0x08
	tipSeconds = 0;
     d36:	11 86       	std	Z+9, r1	; 0x09
	writeCount = 0;
     d38:	14 86       	std	Z+12, r1	; 0x0c
     d3a:	15 86       	std	Z+13, r1	; 0x0d
     d3c:	16 86       	std	Z+14, r1	; 0x0e
     d3e:	17 86       	std	Z+15, r1	; 0x0f
	defaultState = THC_STATE_ENABLED;
     d40:	11 8a       	std	Z+17, r1	; 0x11
     d42:	10 8a       	std	Z+16, r1	; 0x10

	addrOffsetValue = (addrOffset * MEMORY_BLOCK_SIZE) + 1;
     d44:	06 2f       	mov	r16, r22
     d46:	10 e0       	ldi	r17, 0x00	; 0
     d48:	f4 e0       	ldi	r31, 0x04	; 4
     d4a:	00 0f       	add	r16, r16
     d4c:	11 1f       	adc	r17, r17
     d4e:	fa 95       	dec	r31
     d50:	e1 f7       	brne	.-8      	; 0xd4a <_ZN18NonVolatileStorage17InitializeStorageEh+0x44>
     d52:	58 01       	movw	r10, r16
     d54:	08 94       	sec
     d56:	a1 1c       	adc	r10, r1
     d58:	b1 1c       	adc	r11, r1
	//
	// Now save the initialized data.
	//

	// Save the offset value
	EEPROM.write(ADDR_OFFSET, addrOffset);
     d5a:	e1 e8       	ldi	r30, 0x81	; 129
     d5c:	ce 2e       	mov	r12, r30
     d5e:	e5 e0       	ldi	r30, 0x05	; 5
     d60:	de 2e       	mov	r13, r30
     d62:	c6 01       	movw	r24, r12
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	0e 94 67 1a 	call	0x34ce	; 0x34ce <_ZN11EEPROMClass5writeEih>

	// Save the values that had defaults.
	EEPROM.write(REL_ADDR_VOLT_SCALING + addrOffsetValue, scale);
     d6c:	0c 5f       	subi	r16, 0xFC	; 252
     d6e:	1f 4f       	sbci	r17, 0xFF	; 255
     d70:	c6 01       	movw	r24, r12
     d72:	b8 01       	movw	r22, r16
     d74:	f7 01       	movw	r30, r14
     d76:	42 81       	ldd	r20, Z+2	; 0x02
     d78:	0e 94 67 1a 	call	0x34ce	; 0x34ce <_ZN11EEPROMClass5writeEih>
	EEPROM.write(REL_ADDR_VOLT_SETPOINT_B1 + addrOffsetValue, (unsigned char) (voltSetPoint & 0xff));
     d7c:	b5 01       	movw	r22, r10
     d7e:	6f 5f       	subi	r22, 0xFF	; 255
     d80:	7f 4f       	sbci	r23, 0xFF	; 255
     d82:	c6 01       	movw	r24, r12
     d84:	f7 01       	movw	r30, r14
     d86:	42 85       	ldd	r20, Z+10	; 0x0a
     d88:	0e 94 67 1a 	call	0x34ce	; 0x34ce <_ZN11EEPROMClass5writeEih>
	EEPROM.write(REL_ADDR_VOLT_SETPOINT_B2 + addrOffsetValue, (unsigned char) (voltSetPoint & 0xff00) >> 8);
     d8c:	01 50       	subi	r16, 0x01	; 1
     d8e:	10 40       	sbci	r17, 0x00	; 0
     d90:	c6 01       	movw	r24, r12
     d92:	b8 01       	movw	r22, r16
     d94:	40 e0       	ldi	r20, 0x00	; 0
     d96:	0e 94 67 1a 	call	0x34ce	; 0x34ce <_ZN11EEPROMClass5writeEih>
	EEPROM.write(REL_ADDR_DEFAULT_STATE + addrOffsetValue,
			(unsigned char) defaultState);
     d9a:	03 5f       	subi	r16, 0xF3	; 243
     d9c:	1f 4f       	sbci	r17, 0xFF	; 255
     d9e:	c6 01       	movw	r24, r12
     da0:	b8 01       	movw	r22, r16
     da2:	f7 01       	movw	r30, r14
     da4:	40 89       	ldd	r20, Z+16	; 0x10
     da6:	0e 94 67 1a 	call	0x34ce	; 0x34ce <_ZN11EEPROMClass5writeEih>

	// Save all the values that are just zeroed.
	EEPROM.write(REL_ADDR_CHECK_BYTE + addrOffsetValue, EEPROM_MAGIC_NUMBER);
     daa:	c6 01       	movw	r24, r12
     dac:	b5 01       	movw	r22, r10
     dae:	4a e2       	ldi	r20, 0x2A	; 42
     db0:	0e 94 67 1a 	call	0x34ce	; 0x34ce <_ZN11EEPROMClass5writeEih>
	EEPROM.write(REL_ADDR_PILOT_ARC_COUNT_BYTE1 + addrOffsetValue, 0);
     db4:	0b 50       	subi	r16, 0x0B	; 11
     db6:	10 40       	sbci	r17, 0x00	; 0
     db8:	c6 01       	movw	r24, r12
     dba:	b8 01       	movw	r22, r16
     dbc:	40 e0       	ldi	r20, 0x00	; 0
     dbe:	0e 94 67 1a 	call	0x34ce	; 0x34ce <_ZN11EEPROMClass5writeEih>
	EEPROM.write(REL_ADDR_PILOT_ARC_COUNT_BYTE2 + addrOffsetValue, 0);
     dc2:	0f 5f       	subi	r16, 0xFF	; 255
     dc4:	1f 4f       	sbci	r17, 0xFF	; 255
     dc6:	c6 01       	movw	r24, r12
     dc8:	b8 01       	movw	r22, r16
     dca:	40 e0       	ldi	r20, 0x00	; 0
     dcc:	0e 94 67 1a 	call	0x34ce	; 0x34ce <_ZN11EEPROMClass5writeEih>
	EEPROM.write(REL_ADDR_PIERCE_COUNT_BYTE1 + addrOffsetValue, 0);
     dd0:	0f 5f       	subi	r16, 0xFF	; 255
     dd2:	1f 4f       	sbci	r17, 0xFF	; 255
     dd4:	c6 01       	movw	r24, r12
     dd6:	b8 01       	movw	r22, r16
     dd8:	40 e0       	ldi	r20, 0x00	; 0
     dda:	0e 94 67 1a 	call	0x34ce	; 0x34ce <_ZN11EEPROMClass5writeEih>
	EEPROM.write(REL_ADDR_PIERCE_COUNT_BYTE2 + addrOffsetValue, 0);
     dde:	0f 5f       	subi	r16, 0xFF	; 255
     de0:	1f 4f       	sbci	r17, 0xFF	; 255
     de2:	c6 01       	movw	r24, r12
     de4:	b8 01       	movw	r22, r16
     de6:	40 e0       	ldi	r20, 0x00	; 0
     de8:	0e 94 67 1a 	call	0x34ce	; 0x34ce <_ZN11EEPROMClass5writeEih>
	EEPROM.write(REL_ADDR_TIP_HOURS_BYTE + addrOffsetValue, 0);
     dec:	0f 5f       	subi	r16, 0xFF	; 255
     dee:	1f 4f       	sbci	r17, 0xFF	; 255
     df0:	c6 01       	movw	r24, r12
     df2:	b8 01       	movw	r22, r16
     df4:	40 e0       	ldi	r20, 0x00	; 0
     df6:	0e 94 67 1a 	call	0x34ce	; 0x34ce <_ZN11EEPROMClass5writeEih>
	EEPROM.write(REL_ADDR_TIP_MINUTES_BYTE + addrOffsetValue, 0);
     dfa:	0f 5f       	subi	r16, 0xFF	; 255
     dfc:	1f 4f       	sbci	r17, 0xFF	; 255
     dfe:	c6 01       	movw	r24, r12
     e00:	b8 01       	movw	r22, r16
     e02:	40 e0       	ldi	r20, 0x00	; 0
     e04:	0e 94 67 1a 	call	0x34ce	; 0x34ce <_ZN11EEPROMClass5writeEih>
	EEPROM.write(REL_ADDR_TIP_SECONDS_BYTE + addrOffsetValue, 0);
     e08:	0f 5f       	subi	r16, 0xFF	; 255
     e0a:	1f 4f       	sbci	r17, 0xFF	; 255
     e0c:	c6 01       	movw	r24, r12
     e0e:	b8 01       	movw	r22, r16
     e10:	40 e0       	ldi	r20, 0x00	; 0
     e12:	0e 94 67 1a 	call	0x34ce	; 0x34ce <_ZN11EEPROMClass5writeEih>
	EEPROM.write(REL_ADDR_WRITE_COUNT_BYTE1 + addrOffsetValue, 0);
     e16:	0f 5f       	subi	r16, 0xFF	; 255
     e18:	1f 4f       	sbci	r17, 0xFF	; 255
     e1a:	c6 01       	movw	r24, r12
     e1c:	b8 01       	movw	r22, r16
     e1e:	40 e0       	ldi	r20, 0x00	; 0
     e20:	0e 94 67 1a 	call	0x34ce	; 0x34ce <_ZN11EEPROMClass5writeEih>
	EEPROM.write(REL_ADDR_WRITE_COUNT_BYTE2 + addrOffsetValue, 0);
     e24:	0f 5f       	subi	r16, 0xFF	; 255
     e26:	1f 4f       	sbci	r17, 0xFF	; 255
     e28:	c6 01       	movw	r24, r12
     e2a:	b8 01       	movw	r22, r16
     e2c:	40 e0       	ldi	r20, 0x00	; 0
     e2e:	0e 94 67 1a 	call	0x34ce	; 0x34ce <_ZN11EEPROMClass5writeEih>
	EEPROM.write(REL_ADDR_WRITE_COUNT_BYTE3 + addrOffsetValue, 0);
     e32:	0f 5f       	subi	r16, 0xFF	; 255
     e34:	1f 4f       	sbci	r17, 0xFF	; 255
     e36:	c6 01       	movw	r24, r12
     e38:	b8 01       	movw	r22, r16
     e3a:	40 e0       	ldi	r20, 0x00	; 0
     e3c:	0e 94 67 1a 	call	0x34ce	; 0x34ce <_ZN11EEPROMClass5writeEih>
	EEPROM.write(REL_ADDR_WRITE_COUNT_BYTE4 + addrOffsetValue, 0);
     e40:	0f 5f       	subi	r16, 0xFF	; 255
     e42:	1f 4f       	sbci	r17, 0xFF	; 255
     e44:	c6 01       	movw	r24, r12
     e46:	b8 01       	movw	r22, r16
     e48:	40 e0       	ldi	r20, 0x00	; 0
     e4a:	0e 94 67 1a 	call	0x34ce	; 0x34ce <_ZN11EEPROMClass5writeEih>
	}
     e4e:	1f 91       	pop	r17
     e50:	0f 91       	pop	r16
     e52:	ff 90       	pop	r15
     e54:	ef 90       	pop	r14
     e56:	df 90       	pop	r13
     e58:	cf 90       	pop	r12
     e5a:	bf 90       	pop	r11
     e5c:	af 90       	pop	r10
     e5e:	08 95       	ret

00000e60 <_ZN18NonVolatileStorage8DataLoadEv>:
//
// This method will load all the data from EEPROM.  If there
// is no valid data (determined by an invalid check byte),
// then it will initialize everything and save it.
//
void NonVolatileStorage::DataLoad(void)
     e60:	8f 92       	push	r8
     e62:	9f 92       	push	r9
     e64:	af 92       	push	r10
     e66:	bf 92       	push	r11
     e68:	cf 92       	push	r12
     e6a:	df 92       	push	r13
     e6c:	ef 92       	push	r14
     e6e:	ff 92       	push	r15
     e70:	0f 93       	push	r16
     e72:	1f 93       	push	r17
     e74:	cf 93       	push	r28
     e76:	df 93       	push	r29
     e78:	4c 01       	movw	r8, r24
	{
	unsigned char byte1, byte2;
	unsigned int addrOffsetValue;

	// Read the offset value to see where the data is in RAM
	addrOffset = EEPROM.read(ADDR_OFFSET);
     e7a:	81 e8       	ldi	r24, 0x81	; 129
     e7c:	95 e0       	ldi	r25, 0x05	; 5
     e7e:	60 e0       	ldi	r22, 0x00	; 0
     e80:	70 e0       	ldi	r23, 0x00	; 0
     e82:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <_ZN11EEPROMClass4readEi>
     e86:	f4 01       	movw	r30, r8
     e88:	81 83       	std	Z+1, r24	; 0x01
	addrOffsetValue = (addrOffset * MEMORY_BLOCK_SIZE) + 1;
     e8a:	c8 2f       	mov	r28, r24
     e8c:	d0 e0       	ldi	r29, 0x00	; 0
     e8e:	94 e0       	ldi	r25, 0x04	; 4
     e90:	cc 0f       	add	r28, r28
     e92:	dd 1f       	adc	r29, r29
     e94:	9a 95       	dec	r25
     e96:	e1 f7       	brne	.-8      	; 0xe90 <_ZN18NonVolatileStorage8DataLoadEv+0x30>
     e98:	8e 01       	movw	r16, r28
     e9a:	0f 5f       	subi	r16, 0xFF	; 255
     e9c:	1f 4f       	sbci	r17, 0xFF	; 255
	// Get the magic number.
	byte1 = EEPROM.read(REL_ADDR_CHECK_BYTE + addrOffsetValue);
     e9e:	81 e8       	ldi	r24, 0x81	; 129
     ea0:	95 e0       	ldi	r25, 0x05	; 5
     ea2:	b8 01       	movw	r22, r16
     ea4:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <_ZN11EEPROMClass4readEi>

	// If the magic number is not right, assume the
	// EEPROM has not been initialized.
	if (byte1 != EEPROM_MAGIC_NUMBER)
     ea8:	8a 32       	cpi	r24, 0x2A	; 42
     eaa:	29 f0       	breq	.+10     	; 0xeb6 <_ZN18NonVolatileStorage8DataLoadEv+0x56>
		{
		DebugPrint("No NVRam Data\n");
		InitializeStorage(0);
     eac:	c4 01       	movw	r24, r8
     eae:	60 e0       	ldi	r22, 0x00	; 0
     eb0:	0e 94 83 06 	call	0xd06	; 0xd06 <_ZN18NonVolatileStorage17InitializeStorageEh>
     eb4:	c4 c0       	rjmp	.+392    	; 0x103e <_ZN18NonVolatileStorage8DataLoadEv+0x1de>
	DebugPrint("\nNonVolatileStorage::DataLoad()\n");

	DebugPrint("\nMemory Block: ");
	DebugPrint(addrOffsetValue);

	voltSetPoint = EEPROM.read(REL_ADDR_VOLT_SETPOINT_B1 + addrOffsetValue);
     eb6:	0f 5f       	subi	r16, 0xFF	; 255
     eb8:	1f 4f       	sbci	r17, 0xFF	; 255
     eba:	81 e8       	ldi	r24, 0x81	; 129
     ebc:	95 e0       	ldi	r25, 0x05	; 5
     ebe:	b8 01       	movw	r22, r16
     ec0:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <_ZN11EEPROMClass4readEi>
     ec4:	08 2f       	mov	r16, r24
     ec6:	10 e0       	ldi	r17, 0x00	; 0
     ec8:	f4 01       	movw	r30, r8
     eca:	13 87       	std	Z+11, r17	; 0x0b
     ecc:	02 87       	std	Z+10, r16	; 0x0a
	voltSetPoint |= (EEPROM.read(REL_ADDR_VOLT_SETPOINT_B2 + addrOffsetValue) << 8);
     ece:	23 96       	adiw	r28, 0x03	; 3
     ed0:	81 e8       	ldi	r24, 0x81	; 129
     ed2:	95 e0       	ldi	r25, 0x05	; 5
     ed4:	be 01       	movw	r22, r28
     ed6:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <_ZN11EEPROMClass4readEi>
     eda:	38 2f       	mov	r19, r24
     edc:	20 e0       	ldi	r18, 0x00	; 0
     ede:	20 2b       	or	r18, r16
     ee0:	31 2b       	or	r19, r17
     ee2:	f4 01       	movw	r30, r8
     ee4:	33 87       	std	Z+11, r19	; 0x0b
     ee6:	22 87       	std	Z+10, r18	; 0x0a
	DebugPrint("\nvoltSetPoint: ");
	DebugPrint(voltSetPoint);

	scale = EEPROM.read(REL_ADDR_VOLT_SCALING + addrOffsetValue);
     ee8:	21 96       	adiw	r28, 0x01	; 1
     eea:	81 e8       	ldi	r24, 0x81	; 129
     eec:	95 e0       	ldi	r25, 0x05	; 5
     eee:	be 01       	movw	r22, r28
     ef0:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <_ZN11EEPROMClass4readEi>
     ef4:	f4 01       	movw	r30, r8
     ef6:	82 83       	std	Z+2, r24	; 0x02
	DebugPrint("\nScale: ");
	DebugPrint(scale);

	byte1 = EEPROM.read(REL_ADDR_PILOT_ARC_COUNT_BYTE1 + addrOffsetValue);
     ef8:	21 96       	adiw	r28, 0x01	; 1
     efa:	81 e8       	ldi	r24, 0x81	; 129
     efc:	95 e0       	ldi	r25, 0x05	; 5
     efe:	be 01       	movw	r22, r28
     f00:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <_ZN11EEPROMClass4readEi>
     f04:	18 2f       	mov	r17, r24
	byte2 = EEPROM.read(REL_ADDR_PILOT_ARC_COUNT_BYTE2 + addrOffsetValue);
     f06:	21 96       	adiw	r28, 0x01	; 1
     f08:	81 e8       	ldi	r24, 0x81	; 129
     f0a:	95 e0       	ldi	r25, 0x05	; 5
     f0c:	be 01       	movw	r22, r28
     f0e:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <_ZN11EEPROMClass4readEi>
	pilotArcCount = (((unsigned int) byte1) << 8) | ((unsigned int) byte2);
     f12:	31 2f       	mov	r19, r17
     f14:	20 e0       	ldi	r18, 0x00	; 0
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	28 2b       	or	r18, r24
     f1a:	39 2b       	or	r19, r25
     f1c:	f4 01       	movw	r30, r8
     f1e:	34 83       	std	Z+4, r19	; 0x04
     f20:	23 83       	std	Z+3, r18	; 0x03
	DebugPrint("\nPilot Arc Count: ");
	DebugPrint(pilotArcCount);

	byte1 = EEPROM.read(REL_ADDR_PIERCE_COUNT_BYTE1 + addrOffsetValue);
     f22:	21 96       	adiw	r28, 0x01	; 1
     f24:	81 e8       	ldi	r24, 0x81	; 129
     f26:	95 e0       	ldi	r25, 0x05	; 5
     f28:	be 01       	movw	r22, r28
     f2a:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <_ZN11EEPROMClass4readEi>
     f2e:	18 2f       	mov	r17, r24
	byte2 = EEPROM.read(REL_ADDR_PIERCE_COUNT_BYTE2 + addrOffsetValue);
     f30:	21 96       	adiw	r28, 0x01	; 1
     f32:	81 e8       	ldi	r24, 0x81	; 129
     f34:	95 e0       	ldi	r25, 0x05	; 5
     f36:	be 01       	movw	r22, r28
     f38:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <_ZN11EEPROMClass4readEi>
	pierceCount = (((unsigned int) byte1) << 8) | ((unsigned int) byte2);
     f3c:	31 2f       	mov	r19, r17
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	28 2b       	or	r18, r24
     f44:	39 2b       	or	r19, r25
     f46:	f4 01       	movw	r30, r8
     f48:	36 83       	std	Z+6, r19	; 0x06
     f4a:	25 83       	std	Z+5, r18	; 0x05
	DebugPrint("\nPierce Count: ");
	DebugPrint(pierceCount);

	tipHours = EEPROM.read(REL_ADDR_TIP_HOURS_BYTE + addrOffsetValue);
     f4c:	21 96       	adiw	r28, 0x01	; 1
     f4e:	81 e8       	ldi	r24, 0x81	; 129
     f50:	95 e0       	ldi	r25, 0x05	; 5
     f52:	be 01       	movw	r22, r28
     f54:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <_ZN11EEPROMClass4readEi>
     f58:	f4 01       	movw	r30, r8
     f5a:	87 83       	std	Z+7, r24	; 0x07
	DebugPrint("\nTip Hours: ");
	DebugPrint(tipHours);
	tipMinutes = EEPROM.read(REL_ADDR_TIP_MINUTES_BYTE + addrOffsetValue);
     f5c:	21 96       	adiw	r28, 0x01	; 1
     f5e:	81 e8       	ldi	r24, 0x81	; 129
     f60:	95 e0       	ldi	r25, 0x05	; 5
     f62:	be 01       	movw	r22, r28
     f64:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <_ZN11EEPROMClass4readEi>
     f68:	f4 01       	movw	r30, r8
     f6a:	80 87       	std	Z+8, r24	; 0x08
	DebugPrint("\nTip Minutes: ");
	DebugPrint(tipMinutes);
	tipSeconds = EEPROM.read(REL_ADDR_TIP_SECONDS_BYTE + addrOffsetValue);
     f6c:	21 96       	adiw	r28, 0x01	; 1
     f6e:	81 e8       	ldi	r24, 0x81	; 129
     f70:	95 e0       	ldi	r25, 0x05	; 5
     f72:	be 01       	movw	r22, r28
     f74:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <_ZN11EEPROMClass4readEi>
     f78:	f4 01       	movw	r30, r8
     f7a:	81 87       	std	Z+9, r24	; 0x09
	DebugPrint("\nTip Seconds: ");
	DebugPrint(tipSeconds);

	defaultState = (THCState_e) EEPROM.read(REL_ADDR_DEFAULT_STATE);
     f7c:	81 e8       	ldi	r24, 0x81	; 129
     f7e:	95 e0       	ldi	r25, 0x05	; 5
     f80:	6f e0       	ldi	r22, 0x0F	; 15
     f82:	70 e0       	ldi	r23, 0x00	; 0
     f84:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <_ZN11EEPROMClass4readEi>
     f88:	f4 01       	movw	r30, r8
     f8a:	80 8b       	std	Z+16, r24	; 0x10
     f8c:	11 8a       	std	Z+17, r1	; 0x11

	writeCount = 0;
     f8e:	14 86       	std	Z+12, r1	; 0x0c
     f90:	15 86       	std	Z+13, r1	; 0x0d
     f92:	16 86       	std	Z+14, r1	; 0x0e
     f94:	17 86       	std	Z+15, r1	; 0x0f
	writeCount = ((unsigned long) EEPROM.read(
			REL_ADDR_WRITE_COUNT_BYTE1 + addrOffsetValue)) << 24;
     f96:	21 96       	adiw	r28, 0x01	; 1
     f98:	81 e8       	ldi	r24, 0x81	; 129
     f9a:	95 e0       	ldi	r25, 0x05	; 5
     f9c:	be 01       	movw	r22, r28
     f9e:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <_ZN11EEPROMClass4readEi>
     fa2:	e8 2e       	mov	r14, r24
     fa4:	ff 24       	eor	r15, r15
     fa6:	00 e0       	ldi	r16, 0x00	; 0
     fa8:	10 e0       	ldi	r17, 0x00	; 0
     faa:	1e 2d       	mov	r17, r14
     fac:	00 27       	eor	r16, r16
     fae:	ff 24       	eor	r15, r15
     fb0:	ee 24       	eor	r14, r14
     fb2:	f4 01       	movw	r30, r8
     fb4:	e4 86       	std	Z+12, r14	; 0x0c
     fb6:	f5 86       	std	Z+13, r15	; 0x0d
     fb8:	06 87       	std	Z+14, r16	; 0x0e
     fba:	17 87       	std	Z+15, r17	; 0x0f
	writeCount |= ((unsigned long) EEPROM.read(
			REL_ADDR_WRITE_COUNT_BYTE2 + addrOffsetValue)) << 16;
     fbc:	21 96       	adiw	r28, 0x01	; 1
     fbe:	81 e8       	ldi	r24, 0x81	; 129
     fc0:	95 e0       	ldi	r25, 0x05	; 5
     fc2:	be 01       	movw	r22, r28
     fc4:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <_ZN11EEPROMClass4readEi>
     fc8:	a8 2e       	mov	r10, r24
     fca:	bb 24       	eor	r11, r11
     fcc:	cc 24       	eor	r12, r12
     fce:	dd 24       	eor	r13, r13
     fd0:	65 01       	movw	r12, r10
     fd2:	bb 24       	eor	r11, r11
     fd4:	aa 24       	eor	r10, r10
     fd6:	ae 28       	or	r10, r14
     fd8:	bf 28       	or	r11, r15
     fda:	c0 2a       	or	r12, r16
     fdc:	d1 2a       	or	r13, r17
     fde:	f4 01       	movw	r30, r8
     fe0:	a4 86       	std	Z+12, r10	; 0x0c
     fe2:	b5 86       	std	Z+13, r11	; 0x0d
     fe4:	c6 86       	std	Z+14, r12	; 0x0e
     fe6:	d7 86       	std	Z+15, r13	; 0x0f
	writeCount |= ((unsigned long) EEPROM.read(
			REL_ADDR_WRITE_COUNT_BYTE3 + addrOffsetValue)) << 8;
     fe8:	21 96       	adiw	r28, 0x01	; 1
     fea:	81 e8       	ldi	r24, 0x81	; 129
     fec:	95 e0       	ldi	r25, 0x05	; 5
     fee:	be 01       	movw	r22, r28
     ff0:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <_ZN11EEPROMClass4readEi>
     ff4:	e8 2e       	mov	r14, r24
     ff6:	ff 24       	eor	r15, r15
     ff8:	00 e0       	ldi	r16, 0x00	; 0
     ffa:	10 e0       	ldi	r17, 0x00	; 0
     ffc:	10 2f       	mov	r17, r16
     ffe:	0f 2d       	mov	r16, r15
    1000:	fe 2c       	mov	r15, r14
    1002:	ee 24       	eor	r14, r14
    1004:	ea 28       	or	r14, r10
    1006:	fb 28       	or	r15, r11
    1008:	0c 29       	or	r16, r12
    100a:	1d 29       	or	r17, r13
    100c:	f4 01       	movw	r30, r8
    100e:	e4 86       	std	Z+12, r14	; 0x0c
    1010:	f5 86       	std	Z+13, r15	; 0x0d
    1012:	06 87       	std	Z+14, r16	; 0x0e
    1014:	17 87       	std	Z+15, r17	; 0x0f
	writeCount |= ((unsigned long) EEPROM.read(
			REL_ADDR_WRITE_COUNT_BYTE4 + addrOffsetValue));
    1016:	21 96       	adiw	r28, 0x01	; 1
    1018:	81 e8       	ldi	r24, 0x81	; 129
    101a:	95 e0       	ldi	r25, 0x05	; 5
    101c:	be 01       	movw	r22, r28
    101e:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <_ZN11EEPROMClass4readEi>
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	a0 e0       	ldi	r26, 0x00	; 0
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	e8 2a       	or	r14, r24
    102a:	f9 2a       	or	r15, r25
    102c:	0a 2b       	or	r16, r26
    102e:	1b 2b       	or	r17, r27
    1030:	f4 01       	movw	r30, r8
    1032:	e4 86       	std	Z+12, r14	; 0x0c
    1034:	f5 86       	std	Z+13, r15	; 0x0d
    1036:	06 87       	std	Z+14, r16	; 0x0e
    1038:	17 87       	std	Z+15, r17	; 0x0f
	DebugPrint("\nWrite Count: ");
	DebugPrint(writeCount);
	DebugPrint("\n\n");

	initialized = true;
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	80 83       	st	Z, r24
	}
    103e:	df 91       	pop	r29
    1040:	cf 91       	pop	r28
    1042:	1f 91       	pop	r17
    1044:	0f 91       	pop	r16
    1046:	ff 90       	pop	r15
    1048:	ef 90       	pop	r14
    104a:	df 90       	pop	r13
    104c:	cf 90       	pop	r12
    104e:	bf 90       	pop	r11
    1050:	af 90       	pop	r10
    1052:	9f 90       	pop	r9
    1054:	8f 90       	pop	r8
    1056:	08 95       	ret

00001058 <_ZN18NonVolatileStorage10DataGetAllEP11THCStatData>:
// at one time.
//
// Parameters
//	In/Out - data structure updated with all values.
//
void NonVolatileStorage::DataGetAll(THCStatData* data)
    1058:	0f 93       	push	r16
    105a:	1f 93       	push	r17
    105c:	cf 93       	push	r28
    105e:	df 93       	push	r29
    1060:	ec 01       	movw	r28, r24
    1062:	8b 01       	movw	r16, r22
	{
	if (!initialized)
    1064:	88 81       	ld	r24, Y
    1066:	88 23       	and	r24, r24
    1068:	19 f4       	brne	.+6      	; 0x1070 <_ZN18NonVolatileStorage10DataGetAllEP11THCStatData+0x18>
		DataLoad();
    106a:	ce 01       	movw	r24, r28
    106c:	0e 94 30 07 	call	0xe60	; 0xe60 <_ZN18NonVolatileStorage8DataLoadEv>

	data->voltageScaleFactor = scale;
    1070:	8a 81       	ldd	r24, Y+2	; 0x02
    1072:	f8 01       	movw	r30, r16
    1074:	80 83       	st	Z, r24
	data->pilotArcCount = pilotArcCount;
    1076:	8b 81       	ldd	r24, Y+3	; 0x03
    1078:	9c 81       	ldd	r25, Y+4	; 0x04
    107a:	92 83       	std	Z+2, r25	; 0x02
    107c:	81 83       	std	Z+1, r24	; 0x01
	data->pierceCount = pierceCount;
    107e:	8d 81       	ldd	r24, Y+5	; 0x05
    1080:	9e 81       	ldd	r25, Y+6	; 0x06
    1082:	94 83       	std	Z+4, r25	; 0x04
    1084:	83 83       	std	Z+3, r24	; 0x03
	data->tipHours = tipHours;
    1086:	8f 81       	ldd	r24, Y+7	; 0x07
    1088:	85 83       	std	Z+5, r24	; 0x05
	data->tipMinutes = tipMinutes;
    108a:	88 85       	ldd	r24, Y+8	; 0x08
    108c:	86 83       	std	Z+6, r24	; 0x06
	data->tipSeconds = tipSeconds;
    108e:	89 85       	ldd	r24, Y+9	; 0x09
    1090:	87 83       	std	Z+7, r24	; 0x07
	data->voltSetPoint = voltSetPoint;
    1092:	8a 85       	ldd	r24, Y+10	; 0x0a
    1094:	9b 85       	ldd	r25, Y+11	; 0x0b
    1096:	91 87       	std	Z+9, r25	; 0x09
    1098:	80 87       	std	Z+8, r24	; 0x08
	data->defaultState = (THCState_e) defaultState;
    109a:	88 89       	ldd	r24, Y+16	; 0x10
    109c:	99 89       	ldd	r25, Y+17	; 0x11
    109e:	93 87       	std	Z+11, r25	; 0x0b
    10a0:	82 87       	std	Z+10, r24	; 0x0a
	data->initialWriteCount = writeCount;
    10a2:	8c 85       	ldd	r24, Y+12	; 0x0c
    10a4:	9d 85       	ldd	r25, Y+13	; 0x0d
    10a6:	ae 85       	ldd	r26, Y+14	; 0x0e
    10a8:	bf 85       	ldd	r27, Y+15	; 0x0f
    10aa:	84 87       	std	Z+12, r24	; 0x0c
    10ac:	95 87       	std	Z+13, r25	; 0x0d
    10ae:	a6 87       	std	Z+14, r26	; 0x0e
    10b0:	b7 87       	std	Z+15, r27	; 0x0f
	data->flashBlock = addrOffset;
    10b2:	89 81       	ldd	r24, Y+1	; 0x01
    10b4:	80 8b       	std	Z+16, r24	; 0x10
	}
    10b6:	df 91       	pop	r29
    10b8:	cf 91       	pop	r28
    10ba:	1f 91       	pop	r17
    10bc:	0f 91       	pop	r16
    10be:	08 95       	ret

000010c0 <_Z9TorchGoodP12THCInterface>:


void TorchGood(THCInterface *display)
    10c0:	0f 93       	push	r16
    10c2:	1f 93       	push	r17
    10c4:	8c 01       	movw	r16, r24
	{
	// Make sure TorchUp is off
	digitalWrite(OUT_D_TORCH_UP, !OUT_D_TORCH_UP_ACTIVE);
    10c6:	80 e3       	ldi	r24, 0x30	; 48
    10c8:	61 e0       	ldi	r22, 0x01	; 1
    10ca:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <digitalWrite>
	// Make sure TorchDown is off
	digitalWrite(OUT_D_TORCH_DOWN, OUT_D_TORCH_DOWN_NOT_ACTIVE);
    10ce:	8e e2       	ldi	r24, 0x2E	; 46
    10d0:	61 e0       	ldi	r22, 0x01	; 1
    10d2:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <digitalWrite>
	// Set the flags for torch status.
	currentStateData.torchDown = false;
    10d6:	10 92 67 05 	sts	0x0567, r1
	currentStateData.torchUp = false;
    10da:	10 92 66 05 	sts	0x0566, r1
	// Update the display with the torch control status
	display->SetTorchState(TORCH_STATE_GOOD);
    10de:	c8 01       	movw	r24, r16
    10e0:	62 e0       	ldi	r22, 0x02	; 2
    10e2:	70 e0       	ldi	r23, 0x00	; 0
    10e4:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <_ZN12THCInterface13SetTorchStateE12TorchState_e>
	}
    10e8:	1f 91       	pop	r17
    10ea:	0f 91       	pop	r16
    10ec:	08 95       	ret

000010ee <_Z9TorchKerfP12THCInterface>:
	// Update the display with the torch control status
	display->SetTorchState(TORCH_STATE_DOWN);
	}


void TorchKerf(THCInterface *display)
    10ee:	0f 93       	push	r16
    10f0:	1f 93       	push	r17
    10f2:	8c 01       	movw	r16, r24
	{
	// Make sure TorchUp is off
	digitalWrite(OUT_D_TORCH_UP, !OUT_D_TORCH_UP_ACTIVE);
    10f4:	80 e3       	ldi	r24, 0x30	; 48
    10f6:	61 e0       	ldi	r22, 0x01	; 1
    10f8:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <digitalWrite>
	// Make sure TorchDown is off
	digitalWrite(OUT_D_TORCH_DOWN, !OUT_D_TORCH_DOWN_ACTIVE);
    10fc:	8e e2       	ldi	r24, 0x2E	; 46
    10fe:	61 e0       	ldi	r22, 0x01	; 1
    1100:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <digitalWrite>
	// Set the flags for torch status.
	currentStateData.torchDown = false;
    1104:	10 92 67 05 	sts	0x0567, r1
	currentStateData.torchUp = false;
    1108:	10 92 66 05 	sts	0x0566, r1
	currentStateData.kerfEncountered = true;
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	80 93 68 05 	sts	0x0568, r24
	currentStateData.runVoltageControl = false;
    1112:	10 92 64 05 	sts	0x0564, r1
	// Update the display with the torch control status
	display->SetTorchState(TORCH_STATE_KERF);
    1116:	c8 01       	movw	r24, r16
    1118:	64 e0       	ldi	r22, 0x04	; 4
    111a:	70 e0       	ldi	r23, 0x00	; 0
    111c:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <_ZN12THCInterface13SetTorchStateE12TorchState_e>
	}
    1120:	1f 91       	pop	r17
    1122:	0f 91       	pop	r16
    1124:	08 95       	ret

00001126 <_Z9TorchDownP12THCInterface>:
	currentStateData.torchUp = true;
	// Update the display with the torch control status
	display->SetTorchState(TORCH_STATE_UP);
	}

void TorchDown(THCInterface *display)
    1126:	0f 93       	push	r16
    1128:	1f 93       	push	r17
    112a:	8c 01       	movw	r16, r24
	{
	// Make sure TorchUp is off
	digitalWrite(OUT_D_TORCH_UP, OUT_D_TORCH_UP_NOT_ACTIVE);
    112c:	80 e3       	ldi	r24, 0x30	; 48
    112e:	61 e0       	ldi	r22, 0x01	; 1
    1130:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <digitalWrite>
	// Turn on TorchDown
	digitalWrite(OUT_D_TORCH_DOWN, OUT_D_TORCH_DOWN_ACTIVE);
    1134:	8e e2       	ldi	r24, 0x2E	; 46
    1136:	60 e0       	ldi	r22, 0x00	; 0
    1138:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <digitalWrite>
	// Set the flags for torch status.
	currentStateData.torchDown = true;
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	80 93 67 05 	sts	0x0567, r24
	currentStateData.torchUp = false;
    1142:	10 92 66 05 	sts	0x0566, r1
	// Update the display with the torch control status
	display->SetTorchState(TORCH_STATE_DOWN);
    1146:	c8 01       	movw	r24, r16
    1148:	61 e0       	ldi	r22, 0x01	; 1
    114a:	70 e0       	ldi	r23, 0x00	; 0
    114c:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <_ZN12THCInterface13SetTorchStateE12TorchState_e>
	}
    1150:	1f 91       	pop	r17
    1152:	0f 91       	pop	r16
    1154:	08 95       	ret

00001156 <_Z7TorchUpP12THCInterface>:
#include "Timer.hpp"

#include "StateCutting.hpp"


void TorchUp(THCInterface *display)
    1156:	0f 93       	push	r16
    1158:	1f 93       	push	r17
    115a:	8c 01       	movw	r16, r24
	{
	// Turn on TorchUp
	digitalWrite(OUT_D_TORCH_UP, OUT_D_TORCH_UP_ACTIVE);
    115c:	80 e3       	ldi	r24, 0x30	; 48
    115e:	60 e0       	ldi	r22, 0x00	; 0
    1160:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <digitalWrite>
	// Make sure TorchDown is off
	digitalWrite(OUT_D_TORCH_DOWN, OUT_D_TORCH_DOWN_NOT_ACTIVE);
    1164:	8e e2       	ldi	r24, 0x2E	; 46
    1166:	61 e0       	ldi	r22, 0x01	; 1
    1168:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <digitalWrite>
	// Set the flags for torch status.
	currentStateData.torchDown = false;
    116c:	10 92 67 05 	sts	0x0567, r1
	currentStateData.torchUp = true;
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	80 93 66 05 	sts	0x0566, r24
	// Update the display with the torch control status
	display->SetTorchState(TORCH_STATE_UP);
    1176:	c8 01       	movw	r24, r16
    1178:	60 e0       	ldi	r22, 0x00	; 0
    117a:	70 e0       	ldi	r23, 0x00	; 0
    117c:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <_ZN12THCInterface13SetTorchStateE12TorchState_e>
	}
    1180:	1f 91       	pop	r17
    1182:	0f 91       	pop	r16
    1184:	08 95       	ret

00001186 <_Z19StateCuttingHandlerP12THCInterface>:





Command_e StateCuttingHandler(THCInterface *display)
    1186:	cf 93       	push	r28
    1188:	df 93       	push	r29
    118a:	ec 01       	movw	r28, r24
	//
	// Check for ARC GOOD changes
	//

	// See if the Arc Ok signal changed so display can be updated.
	if (currentStateData.arcStateChanged)
    118c:	80 91 4b 05 	lds	r24, 0x054B
    1190:	88 23       	and	r24, r24
    1192:	d9 f0       	breq	.+54     	; 0x11ca <_Z19StateCuttingHandlerP12THCInterface+0x44>
		{
		// Update the display with the current state.
		display->ArcGood(currentStateData.arcGoodState);
    1194:	60 91 4a 05 	lds	r22, 0x054A
    1198:	ce 01       	movw	r24, r28
    119a:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <_ZN12THCInterface7ArcGoodEb>
		// Clear the flag to denote we handled the state update.
		currentStateData.arcStateChanged = false;
    119e:	10 92 4b 05 	sts	0x054B, r1
		// If the arc good went on, update the usage data.
		if (currentStateData.arcGoodState)
    11a2:	80 91 4a 05 	lds	r24, 0x054A
    11a6:	88 23       	and	r24, r24
    11a8:	81 f0       	breq	.+32     	; 0x11ca <_Z19StateCuttingHandlerP12THCInterface+0x44>
			{
			//Serial1.print(currentStateData.cutStartTime.elapsedMilliSeconds());
			//Serial1.println(": arc on");
			// Update the pierce count since we finished a pierce.
			usageData.pierceCount++;
    11aa:	80 91 72 05 	lds	r24, 0x0572
    11ae:	90 91 73 05 	lds	r25, 0x0573
    11b2:	01 96       	adiw	r24, 0x01	; 1
    11b4:	90 93 73 05 	sts	0x0573, r25
    11b8:	80 93 72 05 	sts	0x0572, r24
			// Update the flag so the data will be flushed later.
			currentStateData.usageUpdated = true;
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	80 93 65 05 	sts	0x0565, r24
			// Start the timer that tracks torch on time.
			currentStateData.torchOnTimer.startTimer();
    11c2:	88 e5       	ldi	r24, 0x58	; 88
    11c4:	95 e0       	ldi	r25, 0x05	; 5
    11c6:	0e 94 3b 18 	call	0x3076	; 0x3076 <_ZN5Timer10startTimerEv>
		}

	//
	// Check for the TORCH ON signal being turned off.
	//
	if (!currentStateData.torchOnState)
    11ca:	80 91 49 05 	lds	r24, 0x0549
    11ce:	88 23       	and	r24, r24
    11d0:	a9 f4       	brne	.+42     	; 0x11fc <_Z19StateCuttingHandlerP12THCInterface+0x76>
		{
		// Turn off the relay so that the torch on signal to the plasma goes off.
		digitalWrite(OUT_D_TORCH_RELAY, OUT_D_TORCH_RELAY_NOT_ACTIVE);
    11d2:	81 e1       	ldi	r24, 0x11	; 17
    11d4:	60 e0       	ldi	r22, 0x00	; 0
    11d6:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <digitalWrite>
		//Serial1.print(currentStateData.cutStartTime.elapsedMilliSeconds());
		//Serial1.println(": torch off");
		// Must ensure torch up/down off if torch off..
		TorchGood(display);
    11da:	ce 01       	movw	r24, r28
    11dc:	0e 94 60 08 	call	0x10c0	; 0x10c0 <_Z9TorchGoodP12THCInterface>

		// Update the status display of the torch on signal
		display->TorchOn(currentStateData.torchOnState);
    11e0:	60 91 49 05 	lds	r22, 0x0549
    11e4:	ce 01       	movw	r24, r28
    11e6:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_ZN12THCInterface7TorchOnEb>

		// Change the state from cutting to enabled.
		currentStateData.currentState = THC_STATE_ENABLED;
    11ea:	10 92 44 05 	sts	0x0544, r1
    11ee:	10 92 43 05 	sts	0x0543, r1

		// Start timer for delayed memory write
		currentStateData.lastUseTimer.startTimer();
    11f2:	84 e5       	ldi	r24, 0x54	; 84
    11f4:	95 e0       	ldi	r25, 0x05	; 5
    11f6:	0e 94 3b 18 	call	0x3076	; 0x3076 <_ZN5Timer10startTimerEv>
    11fa:	04 c0       	rjmp	.+8      	; 0x1204 <_Z19StateCuttingHandlerP12THCInterface+0x7e>
		}

	//
	// Check for the arc going out.
	//
	if (!currentStateData.arcGoodState)
    11fc:	80 91 4a 05 	lds	r24, 0x054A
    1200:	88 23       	and	r24, r24
    1202:	29 f4       	brne	.+10     	; 0x120e <_Z19StateCuttingHandlerP12THCInterface+0x88>
		{
		// Reset control flags
		// Turn off the voltage control and reset the kerf crossing flag.
		currentStateData.runVoltageControl = false;
    1204:	10 92 64 05 	sts	0x0564, r1
		currentStateData.kerfEncountered = false;
    1208:	10 92 68 05 	sts	0x0568, r1
    120c:	9e c0       	rjmp	.+316    	; 0x134a <_Z19StateCuttingHandlerP12THCInterface+0x1c4>
		}

	//
	// If voltage control is not active, see if it should be turned on.
	//
	if (!currentStateData.runVoltageControl)
    120e:	80 91 64 05 	lds	r24, 0x0564
    1212:	88 23       	and	r24, r24
    1214:	09 f5       	brne	.+66     	; 0x1258 <_Z19StateCuttingHandlerP12THCInterface+0xd2>
		{
		// Handle the case where voltage control is off due to a kerf being crossed.
		if (currentStateData.kerfEncountered)
    1216:	80 91 68 05 	lds	r24, 0x0568
    121a:	88 23       	and	r24, r24
    121c:	79 f0       	breq	.+30     	; 0x123c <_Z19StateCuttingHandlerP12THCInterface+0xb6>
			{
			if (currentStateData.kerfVoltage >= currentStateData.currentVoltage)
    121e:	20 91 69 05 	lds	r18, 0x0569
    1222:	30 91 6a 05 	lds	r19, 0x056A
    1226:	80 91 4e 05 	lds	r24, 0x054E
    122a:	90 91 4f 05 	lds	r25, 0x054F
    122e:	28 17       	cp	r18, r24
    1230:	39 07       	cpc	r19, r25
    1232:	08 f4       	brcc	.+2      	; 0x1236 <_Z19StateCuttingHandlerP12THCInterface+0xb0>
    1234:	8a c0       	rjmp	.+276    	; 0x134a <_Z19StateCuttingHandlerP12THCInterface+0x1c4>
	display->SetTorchState(TORCH_STATE_KERF);
	}

void TorchKerfCrossed(THCInterface *display)
	{
	currentStateData.kerfEncountered = false;
    1236:	10 92 68 05 	sts	0x0568, r1
    123a:	0a c0       	rjmp	.+20     	; 0x1250 <_Z19StateCuttingHandlerP12THCInterface+0xca>
				// The voltage has returned to a "pre-kerf" level, so resume control.
				TorchKerfCrossed(display);
			}

		// This is the initial start of cut case, so see if the timer has expired.
		else if (currentStateData.torchStabilizeTimer.elapsedMilliSeconds() > TORCH_STABILIZE_TIME_MLLISECONDS)
    123c:	8c e5       	ldi	r24, 0x5C	; 92
    123e:	95 e0       	ldi	r25, 0x05	; 5
    1240:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <_ZN5Timer19elapsedMilliSecondsEv>
    1244:	61 5b       	subi	r22, 0xB1	; 177
    1246:	74 40       	sbci	r23, 0x04	; 4
    1248:	80 40       	sbci	r24, 0x00	; 0
    124a:	90 40       	sbci	r25, 0x00	; 0
    124c:	08 f4       	brcc	.+2      	; 0x1250 <_Z19StateCuttingHandlerP12THCInterface+0xca>
    124e:	7d c0       	rjmp	.+250    	; 0x134a <_Z19StateCuttingHandlerP12THCInterface+0x1c4>
			{
			currentStateData.runVoltageControl = true;
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	80 93 64 05 	sts	0x0564, r24
    1256:	79 c0       	rjmp	.+242    	; 0x134a <_Z19StateCuttingHandlerP12THCInterface+0x1c4>
	// adjust the tip voltage.

	//
	// Handle case of where Torch Up is active
	//
	if (currentStateData.torchUp)
    1258:	80 91 66 05 	lds	r24, 0x0566
    125c:	88 23       	and	r24, r24
    125e:	71 f0       	breq	.+28     	; 0x127c <_Z19StateCuttingHandlerP12THCInterface+0xf6>
		{
		// Check to see if the torch is high enough.
		if (currentStateData.currentVoltage	>=
    1260:	80 91 4c 05 	lds	r24, 0x054C
    1264:	90 91 4d 05 	lds	r25, 0x054D
    1268:	01 97       	sbiw	r24, 0x01	; 1
    126a:	20 91 4e 05 	lds	r18, 0x054E
    126e:	30 91 4f 05 	lds	r19, 0x054F
    1272:	28 17       	cp	r18, r24
    1274:	39 07       	cpc	r19, r25
    1276:	08 f4       	brcc	.+2      	; 0x127a <_Z19StateCuttingHandlerP12THCInterface+0xf4>
    1278:	63 c0       	rjmp	.+198    	; 0x1340 <_Z19StateCuttingHandlerP12THCInterface+0x1ba>
    127a:	10 c0       	rjmp	.+32     	; 0x129c <_Z19StateCuttingHandlerP12THCInterface+0x116>
		}

	//
	// Handle the case where Torch Down is active
	//
	else if (currentStateData.torchDown)
    127c:	80 91 67 05 	lds	r24, 0x0567
    1280:	88 23       	and	r24, r24
    1282:	81 f1       	breq	.+96     	; 0x12e4 <_Z19StateCuttingHandlerP12THCInterface+0x15e>
		{
		// Check to see if the torch is low enough.
		if (currentStateData.currentVoltage <=
    1284:	20 91 4e 05 	lds	r18, 0x054E
    1288:	30 91 4f 05 	lds	r19, 0x054F
    128c:	80 91 4c 05 	lds	r24, 0x054C
    1290:	90 91 4d 05 	lds	r25, 0x054D
    1294:	01 96       	adiw	r24, 0x01	; 1
    1296:	82 17       	cp	r24, r18
    1298:	93 07       	cpc	r25, r19
    129a:	20 f0       	brcs	.+8      	; 0x12a4 <_Z19StateCuttingHandlerP12THCInterface+0x11e>
			(currentStateData.voltSetPoint + VOLTAGE_OFF_HYSTERESIS))
			{
			// Handle case of torch at height.
			TorchGood(display);
    129c:	ce 01       	movw	r24, r28
    129e:	0e 94 60 08 	call	0x10c0	; 0x10c0 <_Z9TorchGoodP12THCInterface>
    12a2:	4e c0       	rjmp	.+156    	; 0x1340 <_Z19StateCuttingHandlerP12THCInterface+0x1ba>
		else // Check to see if we're crossing a kerf
			{
			// We consider that we're crossing a kerf if either:
			// a) voltage goes 2 above the voltage when torch up was detected, or
			// b) after 7 ms. the voltage has not gone down.
			if ((currentStateData.currentVoltage > (currentStateData.kerfVoltage+1)) ||
    12a4:	80 91 69 05 	lds	r24, 0x0569
    12a8:	90 91 6a 05 	lds	r25, 0x056A
    12ac:	01 96       	adiw	r24, 0x01	; 1
    12ae:	82 17       	cp	r24, r18
    12b0:	93 07       	cpc	r25, r19
    12b2:	a0 f0       	brcs	.+40     	; 0x12dc <_Z19StateCuttingHandlerP12THCInterface+0x156>
    12b4:	8b e6       	ldi	r24, 0x6B	; 107
    12b6:	95 e0       	ldi	r25, 0x05	; 5
    12b8:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <_ZN5Timer19elapsedMilliSecondsEv>
    12bc:	68 30       	cpi	r22, 0x08	; 8
    12be:	71 05       	cpc	r23, r1
    12c0:	81 05       	cpc	r24, r1
    12c2:	91 05       	cpc	r25, r1
    12c4:	e8 f1       	brcs	.+122    	; 0x1340 <_Z19StateCuttingHandlerP12THCInterface+0x1ba>
    12c6:	20 91 4e 05 	lds	r18, 0x054E
    12ca:	30 91 4f 05 	lds	r19, 0x054F
    12ce:	80 91 69 05 	lds	r24, 0x0569
    12d2:	90 91 6a 05 	lds	r25, 0x056A
    12d6:	28 17       	cp	r18, r24
    12d8:	39 07       	cpc	r19, r25
    12da:	90 f1       	brcs	.+100    	; 0x1340 <_Z19StateCuttingHandlerP12THCInterface+0x1ba>
				((currentStateData.kerfTimer.elapsedMilliSeconds()> 7) &&
				 (currentStateData.currentVoltage >= (currentStateData.kerfVoltage))) )
				{
				// Assume we've encountered a kerf, call routine to set all flags.
				TorchKerf(display);
    12dc:	ce 01       	movw	r24, r28
    12de:	0e 94 77 08 	call	0x10ee	; 0x10ee <_Z9TorchKerfP12THCInterface>
    12e2:	2e c0       	rjmp	.+92     	; 0x1340 <_Z19StateCuttingHandlerP12THCInterface+0x1ba>
		}

	//
	// See if the voltage is too low, and if so, move the torch up.
	//
	else if (currentStateData.currentVoltage <=
    12e4:	40 91 4e 05 	lds	r20, 0x054E
    12e8:	50 91 4f 05 	lds	r21, 0x054F
    12ec:	20 91 4c 05 	lds	r18, 0x054C
    12f0:	30 91 4d 05 	lds	r19, 0x054D
    12f4:	c9 01       	movw	r24, r18
    12f6:	04 97       	sbiw	r24, 0x04	; 4
    12f8:	84 17       	cp	r24, r20
    12fa:	95 07       	cpc	r25, r21
    12fc:	20 f0       	brcs	.+8      	; 0x1306 <_Z19StateCuttingHandlerP12THCInterface+0x180>
			(currentStateData.voltSetPoint - VOLTAGE_ON_HYSTERESIS))
		// Update display that torch needs to go up
		TorchUp(display);
    12fe:	ce 01       	movw	r24, r28
    1300:	0e 94 ab 08 	call	0x1156	; 0x1156 <_Z7TorchUpP12THCInterface>
    1304:	1d c0       	rjmp	.+58     	; 0x1340 <_Z19StateCuttingHandlerP12THCInterface+0x1ba>

	//
	// See if the voltage is too high, and if so move the torch down.
	//
	else if ( (currentStateData.currentVoltage >=
    1306:	2c 5f       	subi	r18, 0xFC	; 252
    1308:	3f 4f       	sbci	r19, 0xFF	; 255
    130a:	42 17       	cp	r20, r18
    130c:	53 07       	cpc	r21, r19
    130e:	c0 f0       	brcs	.+48     	; 0x1340 <_Z19StateCuttingHandlerP12THCInterface+0x1ba>
    1310:	80 91 68 05 	lds	r24, 0x0568
    1314:	88 23       	and	r24, r24
    1316:	a1 f4       	brne	.+40     	; 0x1340 <_Z19StateCuttingHandlerP12THCInterface+0x1ba>
			  (currentStateData.voltSetPoint + VOLTAGE_ON_HYSTERESIS)) &&
			!currentStateData.kerfEncountered)
		{
		// Update display that torch needs to go up
		TorchDown(display);
    1318:	ce 01       	movw	r24, r28
    131a:	0e 94 93 08 	call	0x1126	; 0x1126 <_Z9TorchDownP12THCInterface>
		// Set flags to signal torch down.
		currentStateData.torchUp = false;
    131e:	10 92 66 05 	sts	0x0566, r1
		currentStateData.torchDown = true;
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	80 93 67 05 	sts	0x0567, r24
		currentStateData.kerfVoltage = currentStateData.currentVoltage;
    1328:	80 91 4e 05 	lds	r24, 0x054E
    132c:	90 91 4f 05 	lds	r25, 0x054F
    1330:	90 93 6a 05 	sts	0x056A, r25
    1334:	80 93 69 05 	sts	0x0569, r24
		currentStateData.kerfTimer.startTimer();
    1338:	8b e6       	ldi	r24, 0x6B	; 107
    133a:	95 e0       	ldi	r25, 0x05	; 5
    133c:	0e 94 3b 18 	call	0x3076	; 0x3076 <_ZN5Timer10startTimerEv>
		}

	// Only process the voltage up/down buttons since we're cutting.
	return display->processUpDownButtons();
    1340:	ce 01       	movw	r24, r28
    1342:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <_ZN12THCInterface20processUpDownButtonsEv>
    1346:	9c 01       	movw	r18, r24
    1348:	02 c0       	rjmp	.+4      	; 0x134e <_Z19StateCuttingHandlerP12THCInterface+0x1c8>
    134a:	20 e0       	ldi	r18, 0x00	; 0
    134c:	30 e0       	ldi	r19, 0x00	; 0
	}
    134e:	c9 01       	movw	r24, r18
    1350:	df 91       	pop	r29
    1352:	cf 91       	pop	r28
    1354:	08 95       	ret

00001356 <_Z19StateEnabledHandlerP12THCInterface>:
#include "IOConfig.h"
#include "Timer.hpp"
#include "NonVolatile.hpp"
#include "StateEnabled.hpp"

Command_e StateEnabledHandler(THCInterface *display)
    1356:	cf 93       	push	r28
    1358:	df 93       	push	r29
    135a:	ec 01       	movw	r28, r24
	{

	// If we're inactive, see if the usage data has been updated.
	if (currentStateData.usageUpdated)
    135c:	80 91 65 05 	lds	r24, 0x0565
    1360:	88 23       	and	r24, r24
    1362:	81 f0       	breq	.+32     	; 0x1384 <_Z19StateEnabledHandlerP12THCInterface+0x2e>
		{
		display->setFlashWritePending(true);
    1364:	ce 01       	movw	r24, r28
    1366:	61 e0       	ldi	r22, 0x01	; 1
    1368:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <_ZN12THCInterface20setFlashWritePendingEb>
		// To save write cycles, wait 30 seconds before updating the daa.
		if (currentStateData.lastUseTimer.elapsedSeconds() >= 30)
    136c:	84 e5       	ldi	r24, 0x54	; 84
    136e:	95 e0       	ldi	r25, 0x05	; 5
    1370:	0e 94 10 18 	call	0x3020	; 0x3020 <_ZN5Timer14elapsedSecondsEv>
    1374:	6e 31       	cpi	r22, 0x1E	; 30
    1376:	71 05       	cpc	r23, r1
    1378:	81 05       	cpc	r24, r1
    137a:	91 05       	cpc	r25, r1
    137c:	18 f0       	brcs	.+6      	; 0x1384 <_Z19StateEnabledHandlerP12THCInterface+0x2e>
    137e:	28 e0       	ldi	r18, 0x08	; 8
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	44 c0       	rjmp	.+136    	; 0x140c <_Z19StateEnabledHandlerP12THCInterface+0xb6>
			return COMMAND_SAVE_USAGE_DATA;
			}
		}

	// See if a request was received to turn the torch on.
	if (currentStateData.torchOnState)
    1384:	80 91 49 05 	lds	r24, 0x0549
    1388:	88 23       	and	r24, r24
    138a:	41 f1       	breq	.+80     	; 0x13dc <_Z19StateEnabledHandlerP12THCInterface+0x86>
		{
		currentStateData.cutStartTime.startTimer();
    138c:	80 e6       	ldi	r24, 0x60	; 96
    138e:	95 e0       	ldi	r25, 0x05	; 5
    1390:	0e 94 3b 18 	call	0x3076	; 0x3076 <_ZN5Timer10startTimerEv>
		//Serial1.print(currentStateData.cutStartTime.elapsedMilliSeconds());
		//Serial1.println(": Torch On");
		// We were idle and the torch was turned on.
		// Trip the relay to turn the plasma torch on
		digitalWrite(OUT_D_TORCH_RELAY, OUT_D_TORCH_RELAY_ACTIVE);
    1394:	81 e1       	ldi	r24, 0x11	; 17
    1396:	61 e0       	ldi	r22, 0x01	; 1
    1398:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <digitalWrite>
		// Update the pilot arc count since we're starting the torch
		// and update the flag to denote usage data is dirty.
		usageData.pilotArcCount++;
    139c:	80 91 70 05 	lds	r24, 0x0570
    13a0:	90 91 71 05 	lds	r25, 0x0571
    13a4:	01 96       	adiw	r24, 0x01	; 1
    13a6:	90 93 71 05 	sts	0x0571, r25
    13aa:	80 93 70 05 	sts	0x0570, r24
		currentStateData.usageUpdated = true;
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	80 93 65 05 	sts	0x0565, r24

		// Change the state to CUTTING
		currentStateData.currentState = THC_STATE_CUTTING;
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	90 93 44 05 	sts	0x0544, r25
    13bc:	80 93 43 05 	sts	0x0543, r24

		// Make sure voltage control is off.
		currentStateData.runVoltageControl = false;
    13c0:	10 92 64 05 	sts	0x0564, r1

		currentStateData.torchUp = false;
    13c4:	10 92 66 05 	sts	0x0566, r1
		currentStateData.torchDown = false;
    13c8:	10 92 67 05 	sts	0x0567, r1

		// If we were in any other menu, then revert to the cutting display
		display->setMenu(MENU_OPERATING);
    13cc:	ce 01       	movw	r24, r28
    13ce:	60 e0       	ldi	r22, 0x00	; 0
    13d0:	70 e0       	ldi	r23, 0x00	; 0
    13d2:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <_ZN12THCInterface7setMenuE6Menu_e>
    13d6:	20 e0       	ldi	r18, 0x00	; 0
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	18 c0       	rjmp	.+48     	; 0x140c <_Z19StateEnabledHandlerP12THCInterface+0xb6>

	// See if the Arc Ok signal changed so display can be updated.
	// The only change in ENABLED should be when cutting and
	// the torch is turned off, the ARC Good signal going off
	// should lag slightly.
	if (currentStateData.arcStateChanged)
    13dc:	80 91 4b 05 	lds	r24, 0x054B
    13e0:	88 23       	and	r24, r24
    13e2:	81 f0       	breq	.+32     	; 0x1404 <_Z19StateEnabledHandlerP12THCInterface+0xae>
		//    Serial1.println(": arc good");
		//else
		//    Serial1.println(" arc bad");

		// Update the display with the current state.
		display->ArcGood(currentStateData.arcGoodState);
    13e4:	60 91 4a 05 	lds	r22, 0x054A
    13e8:	ce 01       	movw	r24, r28
    13ea:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <_ZN12THCInterface7ArcGoodEb>
		if (!currentStateData.arcGoodState)
    13ee:	80 91 4a 05 	lds	r24, 0x054A
    13f2:	88 23       	and	r24, r24
    13f4:	29 f4       	brne	.+10     	; 0x1400 <_Z19StateEnabledHandlerP12THCInterface+0xaa>
			display->SetTorchState(TORCH_STATE_NONE);
    13f6:	ce 01       	movw	r24, r28
    13f8:	63 e0       	ldi	r22, 0x03	; 3
    13fa:	70 e0       	ldi	r23, 0x00	; 0
    13fc:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <_ZN12THCInterface13SetTorchStateE12TorchState_e>

		// Clear the flag to denote we handled the state update.
		currentStateData.arcStateChanged = false;
    1400:	10 92 4b 05 	sts	0x054B, r1
		}

	// We're still in idle, so see if any new commands were entered and return them.
	return display->processButtons();
    1404:	ce 01       	movw	r24, r28
    1406:	0e 94 53 13 	call	0x26a6	; 0x26a6 <_ZN12THCInterface14processButtonsEv>
    140a:	9c 01       	movw	r18, r24
	}
    140c:	c9 01       	movw	r24, r18
    140e:	df 91       	pop	r29
    1410:	cf 91       	pop	r28
    1412:	08 95       	ret

00001414 <_Z18AddSecondsToTipUseP11THCStatDataj>:
// Flag value to determine when to send cutting voltages.
bool captureOn = false;


// Add time to the tip usage.
void AddSecondsToTipUse(THCStatData *usageData, unsigned int seconds)
    1414:	fc 01       	movw	r30, r24
    1416:	9b 01       	movw	r18, r22
	{
	unsigned int temp;

	temp = (unsigned int) usageData->tipSeconds + seconds;
    1418:	87 81       	ldd	r24, Z+7	; 0x07
    141a:	28 0f       	add	r18, r24
    141c:	31 1d       	adc	r19, r1
	usageData->tipSeconds = temp % 60;
    141e:	c9 01       	movw	r24, r18
    1420:	6c e3       	ldi	r22, 0x3C	; 60
    1422:	70 e0       	ldi	r23, 0x00	; 0
    1424:	0e 94 72 24 	call	0x48e4	; 0x48e4 <__udivmodhi4>
    1428:	87 83       	std	Z+7, r24	; 0x07
	// Calculate the number of minutes
	temp = temp / 60;
    142a:	c9 01       	movw	r24, r18
    142c:	6c e3       	ldi	r22, 0x3C	; 60
    142e:	70 e0       	ldi	r23, 0x00	; 0
    1430:	0e 94 72 24 	call	0x48e4	; 0x48e4 <__udivmodhi4>
    1434:	9b 01       	movw	r18, r22
	temp += (unsigned int) usageData->tipMinutes;
    1436:	86 81       	ldd	r24, Z+6	; 0x06
    1438:	28 0f       	add	r18, r24
    143a:	31 1d       	adc	r19, r1
	usageData->tipMinutes = temp % 60;
    143c:	c9 01       	movw	r24, r18
    143e:	6c e3       	ldi	r22, 0x3C	; 60
    1440:	70 e0       	ldi	r23, 0x00	; 0
    1442:	0e 94 72 24 	call	0x48e4	; 0x48e4 <__udivmodhi4>
    1446:	86 83       	std	Z+6, r24	; 0x06
	usageData->tipHours += (temp / 60);
    1448:	c9 01       	movw	r24, r18
    144a:	6c e3       	ldi	r22, 0x3C	; 60
    144c:	70 e0       	ldi	r23, 0x00	; 0
    144e:	0e 94 72 24 	call	0x48e4	; 0x48e4 <__udivmodhi4>
    1452:	85 81       	ldd	r24, Z+5	; 0x05
    1454:	86 0f       	add	r24, r22
    1456:	85 83       	std	Z+5, r24	; 0x05

	}
    1458:	08 95       	ret

0000145a <_Z41__static_initialization_and_destruction_0ii>:
		digitalWrite(OUT_D_TORCH_RELAY, OUT_D_TORCH_RELAY_ACTIVE);
	else
		// Turn off torch for test
		digitalWrite(OUT_D_TORCH_RELAY, OUT_D_TORCH_RELAY_NOT_ACTIVE);

}
    145a:	81 30       	cpi	r24, 0x01	; 1
    145c:	91 05       	cpc	r25, r1
    145e:	01 f5       	brne	.+64     	; 0x14a0 <_Z41__static_initialization_and_destruction_0ii+0x46>
    1460:	6f 5f       	subi	r22, 0xFF	; 255
    1462:	7f 4f       	sbci	r23, 0xFF	; 255
    1464:	31 f5       	brne	.+76     	; 0x14b2 <_Z41__static_initialization_and_destruction_0ii+0x58>
// Given the size and complexity of this application, its reasonable
// to just make the key variables global.
//

// UI Control Object (display and input buttons)
THCInterface display;
    1466:	88 e1       	ldi	r24, 0x18	; 24
    1468:	95 e0       	ldi	r25, 0x05	; 5
    146a:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <_ZN12THCInterfaceC1Ev>

// Object used to maintain configuration information in flash.
NonVolatileStorage flash;
    146e:	81 e3       	ldi	r24, 0x31	; 49
    1470:	95 e0       	ldi	r25, 0x05	; 5
    1472:	0e 94 5d 05 	call	0xaba	; 0xaba <_ZN18NonVolatileStorageC1Ev>
		bool torchDown;

		bool kerfEncountered;
		unsigned int kerfVoltage;
		Timer kerfTimer;
} StateData;
    1476:	84 e5       	ldi	r24, 0x54	; 84
    1478:	95 e0       	ldi	r25, 0x05	; 5
    147a:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN5TimerC1Ev>
    147e:	88 e5       	ldi	r24, 0x58	; 88
    1480:	95 e0       	ldi	r25, 0x05	; 5
    1482:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN5TimerC1Ev>
    1486:	8c e5       	ldi	r24, 0x5C	; 92
    1488:	95 e0       	ldi	r25, 0x05	; 5
    148a:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN5TimerC1Ev>
    148e:	80 e6       	ldi	r24, 0x60	; 96
    1490:	95 e0       	ldi	r25, 0x05	; 5
    1492:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN5TimerC1Ev>
    1496:	8b e6       	ldi	r24, 0x6B	; 107
    1498:	95 e0       	ldi	r25, 0x05	; 5
    149a:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN5TimerC1Ev>
    149e:	08 95       	ret

// Key global data structure.
StateData currentStateData;
    14a0:	89 2b       	or	r24, r25
    14a2:	39 f4       	brne	.+14     	; 0x14b2 <_Z41__static_initialization_and_destruction_0ii+0x58>
    14a4:	6f 5f       	subi	r22, 0xFF	; 255
    14a6:	7f 4f       	sbci	r23, 0xFF	; 255
    14a8:	21 f4       	brne	.+8      	; 0x14b2 <_Z41__static_initialization_and_destruction_0ii+0x58>
// Given the size and complexity of this application, its reasonable
// to just make the key variables global.
//

// UI Control Object (display and input buttons)
THCInterface display;
    14aa:	88 e1       	ldi	r24, 0x18	; 24
    14ac:	95 e0       	ldi	r25, 0x05	; 5
    14ae:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <_ZN12THCInterfaceD1Ev>
    14b2:	08 95       	ret

000014b4 <_GLOBAL__D_display>:
		digitalWrite(OUT_D_TORCH_RELAY, OUT_D_TORCH_RELAY_ACTIVE);
	else
		// Turn off torch for test
		digitalWrite(OUT_D_TORCH_RELAY, OUT_D_TORCH_RELAY_NOT_ACTIVE);

}
    14b4:	80 e0       	ldi	r24, 0x00	; 0
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	6f ef       	ldi	r22, 0xFF	; 255
    14ba:	7f ef       	ldi	r23, 0xFF	; 255
    14bc:	0e 94 2d 0a 	call	0x145a	; 0x145a <_Z41__static_initialization_and_destruction_0ii>
    14c0:	08 95       	ret

000014c2 <_GLOBAL__I_display>:
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	6f ef       	ldi	r22, 0xFF	; 255
    14c8:	7f ef       	ldi	r23, 0xFF	; 255
    14ca:	0e 94 2d 0a 	call	0x145a	; 0x145a <_Z41__static_initialization_and_destruction_0ii>
    14ce:	08 95       	ret

000014d0 <_Z11TestTorchOnb>:



void TestTorchOn(bool value)
{
	if (value)
    14d0:	88 23       	and	r24, r24
    14d2:	19 f0       	breq	.+6      	; 0x14da <_Z11TestTorchOnb+0xa>
		// Turn on torch for test
		digitalWrite(OUT_D_TORCH_RELAY, OUT_D_TORCH_RELAY_ACTIVE);
    14d4:	81 e1       	ldi	r24, 0x11	; 17
    14d6:	61 e0       	ldi	r22, 0x01	; 1
    14d8:	02 c0       	rjmp	.+4      	; 0x14de <_Z11TestTorchOnb+0xe>
	else
		// Turn off torch for test
		digitalWrite(OUT_D_TORCH_RELAY, OUT_D_TORCH_RELAY_NOT_ACTIVE);
    14da:	81 e1       	ldi	r24, 0x11	; 17
    14dc:	60 e0       	ldi	r22, 0x00	; 0
    14de:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <digitalWrite>
    14e2:	08 95       	ret

000014e4 <_Z14processCommand9Command_e>:


void processCommand(Command_e newCmd)
	{
	// Process any command returned by the state handler.
	switch (newCmd)
    14e4:	86 30       	cpi	r24, 0x06	; 6
    14e6:	91 05       	cpc	r25, r1
    14e8:	d9 f1       	breq	.+118    	; 0x1560 <_Z14processCommand9Command_e+0x7c>
    14ea:	87 30       	cpi	r24, 0x07	; 7
    14ec:	91 05       	cpc	r25, r1
    14ee:	3c f4       	brge	.+14     	; 0x14fe <_Z14processCommand9Command_e+0x1a>
    14f0:	81 30       	cpi	r24, 0x01	; 1
    14f2:	91 05       	cpc	r25, r1
    14f4:	59 f0       	breq	.+22     	; 0x150c <_Z14processCommand9Command_e+0x28>
    14f6:	02 97       	sbiw	r24, 0x02	; 2
    14f8:	09 f0       	breq	.+2      	; 0x14fc <_Z14processCommand9Command_e+0x18>
    14fa:	78 c0       	rjmp	.+240    	; 0x15ec <_Z14processCommand9Command_e+0x108>
    14fc:	11 c0       	rjmp	.+34     	; 0x1520 <_Z14processCommand9Command_e+0x3c>
    14fe:	87 30       	cpi	r24, 0x07	; 7
    1500:	91 05       	cpc	r25, r1
    1502:	c9 f1       	breq	.+114    	; 0x1576 <_Z14processCommand9Command_e+0x92>
    1504:	08 97       	sbiw	r24, 0x08	; 8
    1506:	09 f0       	breq	.+2      	; 0x150a <_Z14processCommand9Command_e+0x26>
    1508:	71 c0       	rjmp	.+226    	; 0x15ec <_Z14processCommand9Command_e+0x108>
    150a:	4c c0       	rjmp	.+152    	; 0x15a4 <_Z14processCommand9Command_e+0xc0>
			//Serial.print("COMMAND_NONE\n");
			break;

		case COMMAND_VOLT_UP:
			DebugPrint("COMMAND_VOLT_UP\n");
			if (currentStateData.voltSetPoint < 999)
    150c:	80 91 4c 05 	lds	r24, 0x054C
    1510:	90 91 4d 05 	lds	r25, 0x054D
    1514:	23 e0       	ldi	r18, 0x03	; 3
    1516:	87 3e       	cpi	r24, 0xE7	; 231
    1518:	92 07       	cpc	r25, r18
    151a:	c8 f4       	brcc	.+50     	; 0x154e <_Z14processCommand9Command_e+0x6a>
				{
				usageData.voltSetPoint = ++currentStateData.voltSetPoint;
    151c:	01 96       	adiw	r24, 0x01	; 1
    151e:	08 c0       	rjmp	.+16     	; 0x1530 <_Z14processCommand9Command_e+0x4c>
			display.Display_TargetVoltage(currentStateData.voltSetPoint);
			break;

		case COMMAND_VOLT_DOWN:
			DebugPrint("COMMAND_VOLT_DOWN\n");
			if (currentStateData.voltSetPoint > 25)
    1520:	80 91 4c 05 	lds	r24, 0x054C
    1524:	90 91 4d 05 	lds	r25, 0x054D
    1528:	8a 31       	cpi	r24, 0x1A	; 26
    152a:	91 05       	cpc	r25, r1
    152c:	80 f0       	brcs	.+32     	; 0x154e <_Z14processCommand9Command_e+0x6a>
				{
				usageData.voltSetPoint = --currentStateData.voltSetPoint;
    152e:	01 97       	sbiw	r24, 0x01	; 1
    1530:	90 93 4d 05 	sts	0x054D, r25
    1534:	80 93 4c 05 	sts	0x054C, r24
    1538:	90 93 78 05 	sts	0x0578, r25
    153c:	80 93 77 05 	sts	0x0577, r24
				// Start timer for delayed memory write
				currentStateData.lastUseTimer.startTimer();
    1540:	84 e5       	ldi	r24, 0x54	; 84
    1542:	95 e0       	ldi	r25, 0x05	; 5
    1544:	0e 94 3b 18 	call	0x3076	; 0x3076 <_ZN5Timer10startTimerEv>
				currentStateData.usageUpdated = true;
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	80 93 65 05 	sts	0x0565, r24
				}
			display.Display_TargetVoltage(currentStateData.voltSetPoint);
    154e:	60 91 4c 05 	lds	r22, 0x054C
    1552:	70 91 4d 05 	lds	r23, 0x054D
    1556:	88 e1       	ldi	r24, 0x18	; 24
    1558:	95 e0       	ldi	r25, 0x05	; 5
    155a:	0e 94 2e 10 	call	0x205c	; 0x205c <_ZN12THCInterface21Display_TargetVoltageEj>
    155e:	08 95       	ret
			break;

		case COMMAND_RESET_USE_DATA:
			DebugPrint("COMMAND_RESET_USE_DATA\n");
			// Reset the usage data.
			flash.DataReset();
    1560:	81 e3       	ldi	r24, 0x31	; 49
    1562:	95 e0       	ldi	r25, 0x05	; 5
    1564:	0e 94 5d 06 	call	0xcba	; 0xcba <_ZN18NonVolatileStorage9DataResetEv>
			// Reload the reset values.
			flash.DataGetAll((THCStatData*) &usageData);
    1568:	81 e3       	ldi	r24, 0x31	; 49
    156a:	95 e0       	ldi	r25, 0x05	; 5
    156c:	6f e6       	ldi	r22, 0x6F	; 111
    156e:	75 e0       	ldi	r23, 0x05	; 5
    1570:	0e 94 2c 08 	call	0x1058	; 0x1058 <_ZN18NonVolatileStorage10DataGetAllEP11THCStatData>
    1574:	08 95       	ret

		case COMMAND_RESET_FLASH_BLOCK:
			DebugPrint("COMMAND_RESET_FLASH_BLOCK\n");
			// Set the flash block to the next block after the current and
			// update the program variable with the block reference.
			usageData.flashBlock = flash.setBlock(flash.getBlock() + 1);
    1576:	81 e3       	ldi	r24, 0x31	; 49
    1578:	95 e0       	ldi	r25, 0x05	; 5
    157a:	0e 94 a1 05 	call	0xb42	; 0xb42 <_ZN18NonVolatileStorage8getBlockEv>
    157e:	68 2f       	mov	r22, r24
    1580:	6f 5f       	subi	r22, 0xFF	; 255
    1582:	81 e3       	ldi	r24, 0x31	; 49
    1584:	95 e0       	ldi	r25, 0x05	; 5
    1586:	0e 94 67 06 	call	0xcce	; 0xcce <_ZN18NonVolatileStorage8setBlockEh>
    158a:	80 93 7f 05 	sts	0x057F, r24
			// Flush all the usage data to the flash variables
			flash.DataSetAll((THCStatData*) &usageData);
    158e:	81 e3       	ldi	r24, 0x31	; 49
    1590:	95 e0       	ldi	r25, 0x05	; 5
    1592:	6f e6       	ldi	r22, 0x6F	; 111
    1594:	75 e0       	ldi	r23, 0x05	; 5
    1596:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN18NonVolatileStorage10DataSetAllEP11THCStatData>
			// Save the current usages to the new block.
			flash.DataSave();
    159a:	81 e3       	ldi	r24, 0x31	; 49
    159c:	95 e0       	ldi	r25, 0x05	; 5
    159e:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN18NonVolatileStorage8DataSaveEv>
    15a2:	08 95       	ret
			break;

		case COMMAND_SAVE_USAGE_DATA:
			// Copy the updated data to the flash object
			//usageData.voltSetPoint = currentStateData.voltSetPoint;
			flash.DataSetAll((THCStatData *) &usageData);
    15a4:	81 e3       	ldi	r24, 0x31	; 49
    15a6:	95 e0       	ldi	r25, 0x05	; 5
    15a8:	6f e6       	ldi	r22, 0x6F	; 111
    15aa:	75 e0       	ldi	r23, 0x05	; 5
    15ac:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN18NonVolatileStorage10DataSetAllEP11THCStatData>
			// Write the object data to the memory.
			flash.DataSave();
    15b0:	81 e3       	ldi	r24, 0x31	; 49
    15b2:	95 e0       	ldi	r25, 0x05	; 5
    15b4:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN18NonVolatileStorage8DataSaveEv>
			// Clear the new data flag.
			currentStateData.usageUpdated = false;
    15b8:	10 92 65 05 	sts	0x0565, r1
			display.setFlashWritePending(false);
    15bc:	88 e1       	ldi	r24, 0x18	; 24
    15be:	95 e0       	ldi	r25, 0x05	; 5
    15c0:	60 e0       	ldi	r22, 0x00	; 0
    15c2:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <_ZN12THCInterface20setFlashWritePendingEb>
			usageData.initialWriteCount++;
    15c6:	80 91 7b 05 	lds	r24, 0x057B
    15ca:	90 91 7c 05 	lds	r25, 0x057C
    15ce:	a0 91 7d 05 	lds	r26, 0x057D
    15d2:	b0 91 7e 05 	lds	r27, 0x057E
    15d6:	01 96       	adiw	r24, 0x01	; 1
    15d8:	a1 1d       	adc	r26, r1
    15da:	b1 1d       	adc	r27, r1
    15dc:	80 93 7b 05 	sts	0x057B, r24
    15e0:	90 93 7c 05 	sts	0x057C, r25
    15e4:	a0 93 7d 05 	sts	0x057D, r26
    15e8:	b0 93 7e 05 	sts	0x057E, r27
    15ec:	08 95       	ret

000015ee <_Z16handleModeChangev>:
void handleModeChange()
	{

	// Only allow mode change if there is no torch on or arc good signal
	// (this is a short-cut for checking to see if we're cutting.
	if (!currentStateData.torchOnState && !currentStateData.arcGoodState)
    15ee:	80 91 49 05 	lds	r24, 0x0549
    15f2:	88 23       	and	r24, r24
    15f4:	09 f0       	breq	.+2      	; 0x15f8 <_Z16handleModeChangev+0xa>
    15f6:	44 c0       	rjmp	.+136    	; 0x1680 <_Z16handleModeChangev+0x92>
    15f8:	80 91 4a 05 	lds	r24, 0x054A
    15fc:	88 23       	and	r24, r24
    15fe:	09 f0       	breq	.+2      	; 0x1602 <_Z16handleModeChangev+0x14>
    1600:	3f c0       	rjmp	.+126    	; 0x1680 <_Z16handleModeChangev+0x92>
		{
		if (currentStateData.currentMode == THC_MODE_DISABLED)
    1602:	80 91 45 05 	lds	r24, 0x0545
    1606:	90 91 46 05 	lds	r25, 0x0546
    160a:	00 97       	sbiw	r24, 0x00	; 0
    160c:	59 f4       	brne	.+22     	; 0x1624 <_Z16handleModeChangev+0x36>
			{
			DebugPrint("Mode Change to: THC_MODE_BYPASS\n");
			currentStateData.currentMode = THC_MODE_BYPASS;
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	90 93 46 05 	sts	0x0546, r25
    1616:	80 93 45 05 	sts	0x0545, r24
			display.setMenu(MENU_BYPASS);
    161a:	88 e1       	ldi	r24, 0x18	; 24
    161c:	95 e0       	ldi	r25, 0x05	; 5
    161e:	66 e0       	ldi	r22, 0x06	; 6
    1620:	70 e0       	ldi	r23, 0x00	; 0
    1622:	1f c0       	rjmp	.+62     	; 0x1662 <_Z16handleModeChangev+0x74>
			}
		else if (currentStateData.currentMode  == THC_MODE_BYPASS)
    1624:	81 30       	cpi	r24, 0x01	; 1
    1626:	91 05       	cpc	r25, r1
    1628:	59 f4       	brne	.+22     	; 0x1640 <_Z16handleModeChangev+0x52>
			{
			DebugPrint("Mode Change to: THC_MODE_CRUISE\n");
			currentStateData.currentMode = THC_MODE_CRUISE;
    162a:	82 e0       	ldi	r24, 0x02	; 2
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	90 93 46 05 	sts	0x0546, r25
    1632:	80 93 45 05 	sts	0x0545, r24
			display.setMenu(MENU_CRUISE_MODE);
    1636:	88 e1       	ldi	r24, 0x18	; 24
    1638:	95 e0       	ldi	r25, 0x05	; 5
    163a:	67 e0       	ldi	r22, 0x07	; 7
    163c:	70 e0       	ldi	r23, 0x00	; 0
    163e:	11 c0       	rjmp	.+34     	; 0x1662 <_Z16handleModeChangev+0x74>
			}
		else if (currentStateData.currentMode  == THC_MODE_CRUISE)
    1640:	82 30       	cpi	r24, 0x02	; 2
    1642:	91 05       	cpc	r25, r1
    1644:	89 f4       	brne	.+34     	; 0x1668 <_Z16handleModeChangev+0x7a>
			{
			DebugPrint("Mode Change to: THC_MODE_ENABLED\n");
			currentStateData.currentMode = THC_MODE_ENABLED;
    1646:	83 e0       	ldi	r24, 0x03	; 3
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	90 93 46 05 	sts	0x0546, r25
    164e:	80 93 45 05 	sts	0x0545, r24
			currentStateData.currentState = THC_STATE_ENABLED;
    1652:	10 92 44 05 	sts	0x0544, r1
    1656:	10 92 43 05 	sts	0x0543, r1
			display.setMenu(MENU_OPERATING);
    165a:	88 e1       	ldi	r24, 0x18	; 24
    165c:	95 e0       	ldi	r25, 0x05	; 5
    165e:	60 e0       	ldi	r22, 0x00	; 0
    1660:	70 e0       	ldi	r23, 0x00	; 0
    1662:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <_ZN12THCInterface7setMenuE6Menu_e>
    1666:	08 95       	ret
			}
		else if (currentStateData.currentMode  == THC_MODE_ENABLED)
    1668:	03 97       	sbiw	r24, 0x03	; 3
    166a:	51 f4       	brne	.+20     	; 0x1680 <_Z16handleModeChangev+0x92>
			{
			DebugPrint("Mode Change to: THC_MODE_DISABLED\n");
			currentStateData.currentMode = THC_MODE_DISABLED;
    166c:	10 92 46 05 	sts	0x0546, r1
    1670:	10 92 45 05 	sts	0x0545, r1
			display.setMenu(MENU_DISABLED);
    1674:	88 e1       	ldi	r24, 0x18	; 24
    1676:	95 e0       	ldi	r25, 0x05	; 5
    1678:	65 e0       	ldi	r22, 0x05	; 5
    167a:	70 e0       	ldi	r23, 0x00	; 0
    167c:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <_ZN12THCInterface7setMenuE6Menu_e>
    1680:	08 95       	ret

00001682 <_Z11readVoltagev>:
	{
	int newVoltage; //, delta;
	unsigned int raw;

	// Get the new voltage.
	newVoltage = analogRead(IN_A_VOLTAGE);
    1682:	88 e0       	ldi	r24, 0x08	; 8
    1684:	0e 94 09 23 	call	0x4612	; 0x4612 <analogRead>
	raw = (unsigned int) newVoltage;

	if (newVoltage <= ANALOG_VOLTAGE_NOISE_FLOOR)
    1688:	18 16       	cp	r1, r24
    168a:	19 06       	cpc	r1, r25
    168c:	2c f0       	brlt	.+10     	; 0x1698 <_Z11readVoltagev+0x16>
		currentStateData.currentVoltage = 0;
    168e:	10 92 4f 05 	sts	0x054F, r1
    1692:	10 92 4e 05 	sts	0x054E, r1
    1696:	04 c0       	rjmp	.+8      	; 0x16a0 <_Z11readVoltagev+0x1e>
	else
		currentStateData.currentVoltage = raw;
    1698:	90 93 4f 05 	sts	0x054F, r25
    169c:	80 93 4e 05 	sts	0x054E, r24

	if ((currentStateData.torchOnState) && captureOn)
    16a0:	80 91 49 05 	lds	r24, 0x0549
    16a4:	88 23       	and	r24, r24
    16a6:	31 f0       	breq	.+12     	; 0x16b4 <_Z11readVoltagev+0x32>
    16a8:	80 91 80 05 	lds	r24, 0x0580
    16ac:	88 23       	and	r24, r24
    16ae:	11 f0       	breq	.+4      	; 0x16b4 <_Z11readVoltagev+0x32>
	{
		sendCutVoltageMessage();
    16b0:	0e 94 94 04 	call	0x928	; 0x928 <_Z21sendCutVoltageMessagev>
    16b4:	08 95       	ret

000016b6 <loop>:




// The loop function is called in an endless loop
void loop()
    16b6:	2f 92       	push	r2
    16b8:	3f 92       	push	r3
    16ba:	4f 92       	push	r4
    16bc:	5f 92       	push	r5
    16be:	6f 92       	push	r6
    16c0:	7f 92       	push	r7
    16c2:	8f 92       	push	r8
    16c4:	9f 92       	push	r9
    16c6:	af 92       	push	r10
    16c8:	bf 92       	push	r11
    16ca:	cf 92       	push	r12
    16cc:	df 92       	push	r13
    16ce:	ef 92       	push	r14
    16d0:	ff 92       	push	r15
    16d2:	0f 93       	push	r16
    16d4:	1f 93       	push	r17
    16d6:	cf 93       	push	r28
    16d8:	df 93       	push	r29
	Timer loopTimer;

	loopTimer.startTimer();
#endif

	bypassHandler = new BypassMode(&display);
    16da:	84 e0       	ldi	r24, 0x04	; 4
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	0e 94 44 22 	call	0x4488	; 0x4488 <_Znwj>
    16e2:	78 2e       	mov	r7, r24
    16e4:	09 2f       	mov	r16, r25
    16e6:	68 e1       	ldi	r22, 0x18	; 24
    16e8:	75 e0       	ldi	r23, 0x05	; 5
    16ea:	0e 94 60 03 	call	0x6c0	; 0x6c0 <_ZN10BypassModeC1EP12THCInterface>

	// Initialize the variable used to detect state changes.
	oldState = currentStateData.currentState;
    16ee:	40 90 43 05 	lds	r4, 0x0543
    16f2:	50 90 44 05 	lds	r5, 0x0544

	DebugPrint("THC Init Complete - starting main loop\n");

	currentStateData.currentMode = THC_MODE_ENABLED;
    16f6:	83 e0       	ldi	r24, 0x03	; 3
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	90 93 46 05 	sts	0x0546, r25
    16fe:	80 93 45 05 	sts	0x0545, r24
	if (currentStateData.currentMode == THC_MODE_BYPASS)
		display.setMenu(MENU_BYPASS);
	else if (currentStateData.currentMode == THC_MODE_CRUISE)
		display.setMenu(MENU_CRUISE_MODE);
	else if (currentStateData.currentMode  == THC_MODE_ENABLED)
		display.setMenu(MENU_OPERATING);
    1702:	88 e1       	ldi	r24, 0x18	; 24
    1704:	95 e0       	ldi	r25, 0x05	; 5
    1706:	60 e0       	ldi	r22, 0x00	; 0
    1708:	70 e0       	ldi	r23, 0x00	; 0
    170a:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <_ZN12THCInterface7setMenuE6Menu_e>
		display.setMenu(MENU_DISABLED);

	// Initialize the wait timer for the main loop.
	// This timer is used to ensure that you don't execute the control
	// loop any more often than every millisecond.
	loopWaitTimer = millis();
    170e:	0e 94 8f 22 	call	0x451e	; 0x451e <millis>
    1712:	4b 01       	movw	r8, r22
    1714:	5c 01       	movw	r10, r24
    1716:	cc 24       	eor	r12, r12
    1718:	dd 24       	eor	r13, r13
    171a:	ee 24       	eor	r14, r14
    171c:	ff 24       	eor	r15, r15
					 (currentStateData.currentVoltage > MIN_CRUISE_SET_VOLTAGE))
					{
					display.setMenu(MENU_OPERATING);
					currentStateData.voltSetPoint = currentStateData.currentVoltage;
					currentStateData.currentMode = THC_MODE_ENABLED;
					currentStateData.currentState = THC_STATE_CUTTING;
    171e:	51 e0       	ldi	r21, 0x01	; 1
    1720:	25 2e       	mov	r2, r21
    1722:	31 2c       	mov	r3, r1
					currentStateData.runVoltageControl = true;
    1724:	66 24       	eor	r6, r6
    1726:	63 94       	inc	r6
	//
	while (1)
		{
		// Ensure a millisecond has elapsed before running again.
		// This should give a little more consistent behavior.
		while (loopWaitTimer == millis())
    1728:	0e 94 8f 22 	call	0x451e	; 0x451e <millis>
    172c:	86 16       	cp	r8, r22
    172e:	97 06       	cpc	r9, r23
    1730:	a8 06       	cpc	r10, r24
    1732:	b9 06       	cpc	r11, r25
    1734:	c9 f3       	breq	.-14     	; 0x1728 <loop+0x72>
			{
			//Serial1.print(":");
			}
		// Reset the timer for the next loop.
		loopWaitTimer = millis();
    1736:	0e 94 8f 22 	call	0x451e	; 0x451e <millis>
    173a:	4b 01       	movw	r8, r22
    173c:	5c 01       	movw	r10, r24
			DebugPrintLn(loopTimer.elapsedMilliSeconds());
		loopTimer.startTimer();
#endif

		// Read and filter the torch voltage.
		readVoltage();
    173e:	0e 94 41 0b 	call	0x1682	; 0x1682 <_Z11readVoltagev>

		// Only update the display about 10 times a second (assuming a 1 ms loop time).
		if (++delayDisplayUpdate > 100)
    1742:	08 94       	sec
    1744:	e1 1c       	adc	r14, r1
    1746:	f1 1c       	adc	r15, r1
    1748:	25 e6       	ldi	r18, 0x65	; 101
    174a:	e2 16       	cp	r14, r18
    174c:	f1 04       	cpc	r15, r1
    174e:	40 f0       	brcs	.+16     	; 0x1760 <loop+0xaa>
			if (currentStateData.currentUnit == THC_UNIT_VOLTS)
				display.Display_CurrentVoltage(currentStateData.currentVoltage/7);
			else
				display.Display_CurrentVoltage(currentStateData.currentVoltage);
				*/
			sendCutVoltageMessage();
    1750:	0e 94 94 04 	call	0x928	; 0x928 <_Z21sendCutVoltageMessagev>

			delayDisplayUpdate = 0;
			SendVoltage(PC_RESP_CURRENT);
    1754:	85 e0       	ldi	r24, 0x05	; 5
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	0e 94 18 05 	call	0xa30	; 0xa30 <_Z11SendVoltage11PC_RESPONSE>
    175c:	ee 24       	eor	r14, r14
    175e:	ff 24       	eor	r15, r15
			}

		// Check to see if the user has requested a mode change.
		// If so, it is handled within the routine.
		if (display.modeChangedPressed() == true)
    1760:	88 e1       	ldi	r24, 0x18	; 24
    1762:	95 e0       	ldi	r25, 0x05	; 5
    1764:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <_ZN12THCInterface18modeChangedPressedEv>
    1768:	88 23       	and	r24, r24
    176a:	11 f0       	breq	.+4      	; 0x1770 <loop+0xba>
			handleModeChange();
    176c:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <_Z16handleModeChangev>

		if (Serial1.available() > 0)
    1770:	84 ec       	ldi	r24, 0xC4	; 196
    1772:	97 e0       	ldi	r25, 0x07	; 7
    1774:	0e 94 3f 1d 	call	0x3a7e	; 0x3a7e <_ZN14HardwareSerial9availableEv>
    1778:	18 16       	cp	r1, r24
    177a:	19 06       	cpc	r1, r25
    177c:	0c f0       	brlt	.+2      	; 0x1780 <loop+0xca>
    177e:	37 c1       	rjmp	.+622    	; 0x19ee <loop+0x338>
		{
			uint8_t buff[10];
			uint16_t temp;

			switch (Serial1.peek())
    1780:	84 ec       	ldi	r24, 0xC4	; 196
    1782:	97 e0       	ldi	r25, 0x07	; 7
    1784:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <_ZN14HardwareSerial4peekEv>
    1788:	fc 01       	movw	r30, r24
    178a:	87 31       	cpi	r24, 0x17	; 23
    178c:	91 05       	cpc	r25, r1
    178e:	08 f0       	brcs	.+2      	; 0x1792 <loop+0xdc>
    1790:	2e c1       	rjmp	.+604    	; 0x19ee <loop+0x338>
    1792:	ee 58       	subi	r30, 0x8E	; 142
    1794:	ff 4f       	sbci	r31, 0xFF	; 255
    1796:	ee 0f       	add	r30, r30
    1798:	ff 1f       	adc	r31, r31
    179a:	05 90       	lpm	r0, Z+
    179c:	f4 91       	lpm	r31, Z+
    179e:	e0 2d       	mov	r30, r0
    17a0:	19 94       	eijmp
			{
			case PC_CMD_SYNC:
				// Read and throw away the sync byte.
				Serial1.read();
    17a2:	84 ec       	ldi	r24, 0xC4	; 196
    17a4:	97 e0       	ldi	r25, 0x07	; 7
    17a6:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <_ZN14HardwareSerial4readEv>
    17aa:	21 c1       	rjmp	.+578    	; 0x19ee <loop+0x338>
				break;

			case PC_CMD_STEP_MODE:
				// Read and throw away the sync byte.
				Serial1.read();
    17ac:	84 ec       	ldi	r24, 0xC4	; 196
    17ae:	97 e0       	ldi	r25, 0x07	; 7
    17b0:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <_ZN14HardwareSerial4readEv>
				handleModeChange();
    17b4:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <_Z16handleModeChangev>
    17b8:	04 c0       	rjmp	.+8      	; 0x17c2 <loop+0x10c>
				SendMode();
				break;

			case PC_CMD_GET_MODE:
				// Read the command byte and throw away.
				Serial1.read();
    17ba:	84 ec       	ldi	r24, 0xC4	; 196
    17bc:	97 e0       	ldi	r25, 0x07	; 7
    17be:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <_ZN14HardwareSerial4readEv>
				// Build and send the response.
				SendMode();
    17c2:	0e 94 e6 04 	call	0x9cc	; 0x9cc <_Z8SendModev>
    17c6:	13 c1       	rjmp	.+550    	; 0x19ee <loop+0x338>
				break;

			case PC_CMD_STEP_UNIT:
				// Read the command byte and throw away.
				Serial1.read();
    17c8:	84 ec       	ldi	r24, 0xC4	; 196
    17ca:	97 e0       	ldi	r25, 0x07	; 7
    17cc:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <_ZN14HardwareSerial4readEv>
				// Update the unit.
				// Change the units between volts and counts.
				if (currentStateData.currentUnit == THC_UNIT_COUNTS)
    17d0:	80 91 47 05 	lds	r24, 0x0547
    17d4:	90 91 48 05 	lds	r25, 0x0548
    17d8:	01 97       	sbiw	r24, 0x01	; 1
    17da:	39 f4       	brne	.+14     	; 0x17ea <loop+0x134>
					currentStateData.currentUnit = THC_UNIT_VOLTS;
    17dc:	82 e0       	ldi	r24, 0x02	; 2
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	90 93 48 05 	sts	0x0548, r25
    17e4:	80 93 47 05 	sts	0x0547, r24
    17e8:	04 c0       	rjmp	.+8      	; 0x17f2 <loop+0x13c>
				else
					currentStateData.currentUnit = THC_UNIT_COUNTS;
    17ea:	30 92 48 05 	sts	0x0548, r3
    17ee:	20 92 47 05 	sts	0x0547, r2

				// Build and send the responses.
				SendUnits();
    17f2:	0e 94 ff 04 	call	0x9fe	; 0x9fe <_Z9SendUnitsv>
				SendVoltage(PC_RESP_SETPOINT);
    17f6:	82 e0       	ldi	r24, 0x02	; 2
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	0e 94 18 05 	call	0xa30	; 0xa30 <_Z11SendVoltage11PC_RESPONSE>
				SendVoltage(PC_RESP_CURRENT);
    17fe:	85 e0       	ldi	r24, 0x05	; 5
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	0e 94 18 05 	call	0xa30	; 0xa30 <_Z11SendVoltage11PC_RESPONSE>
				display.ForceDisplay_CurrentVoltage(currentStateData.currentVoltage);
    1806:	60 91 4e 05 	lds	r22, 0x054E
    180a:	70 91 4f 05 	lds	r23, 0x054F
    180e:	88 e1       	ldi	r24, 0x18	; 24
    1810:	95 e0       	ldi	r25, 0x05	; 5
    1812:	0e 94 25 10 	call	0x204a	; 0x204a <_ZN12THCInterface27ForceDisplay_CurrentVoltageEj>
    1816:	bb c0       	rjmp	.+374    	; 0x198e <loop+0x2d8>
				display.Display_TargetVoltage(currentStateData.voltSetPoint);
				break;

			case PC_CMD_GET_UNIT:
				// Read the command byte and throw away.
				Serial1.read();
    1818:	84 ec       	ldi	r24, 0xC4	; 196
    181a:	97 e0       	ldi	r25, 0x07	; 7
    181c:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <_ZN14HardwareSerial4readEv>
				SendUnits();
    1820:	0e 94 ff 04 	call	0x9fe	; 0x9fe <_Z9SendUnitsv>
    1824:	e4 c0       	rjmp	.+456    	; 0x19ee <loop+0x338>
				break;

			case PC_CMD_DISPLAY_ON_OFF:
				if (Serial1.available() < 2)
    1826:	84 ec       	ldi	r24, 0xC4	; 196
    1828:	97 e0       	ldi	r25, 0x07	; 7
    182a:	0e 94 3f 1d 	call	0x3a7e	; 0x3a7e <_ZN14HardwareSerial9availableEv>
    182e:	df c0       	rjmp	.+446    	; 0x19ee <loop+0x338>

			case PC_CMD_GET_STATUS:
				break;

			case PC_CMD_SET_SETPOINT:
				if (Serial1.available() < 3)
    1830:	84 ec       	ldi	r24, 0xC4	; 196
    1832:	97 e0       	ldi	r25, 0x07	; 7
    1834:	0e 94 3f 1d 	call	0x3a7e	; 0x3a7e <_ZN14HardwareSerial9availableEv>
    1838:	03 97       	sbiw	r24, 0x03	; 3
    183a:	0c f4       	brge	.+2      	; 0x183e <loop+0x188>
    183c:	d8 c0       	rjmp	.+432    	; 0x19ee <loop+0x338>
					break;
				// Read the command byte and throw away.
				Serial1.read();
    183e:	84 ec       	ldi	r24, 0xC4	; 196
    1840:	97 e0       	ldi	r25, 0x07	; 7
    1842:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <_ZN14HardwareSerial4readEv>
				// Respond to the command.
				buff[0] = (uint8_t) Serial1.read();
    1846:	84 ec       	ldi	r24, 0xC4	; 196
    1848:	97 e0       	ldi	r25, 0x07	; 7
    184a:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <_ZN14HardwareSerial4readEv>
    184e:	18 2f       	mov	r17, r24
				buff[1] = (uint8_t) Serial1.read();
    1850:	84 ec       	ldi	r24, 0xC4	; 196
    1852:	97 e0       	ldi	r25, 0x07	; 7
    1854:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <_ZN14HardwareSerial4readEv>
				temp = (((uint16_t) buff[0]) << 8) | ((uint16_t) buff[1]);
    1858:	d1 2f       	mov	r29, r17
    185a:	c0 e0       	ldi	r28, 0x00	; 0
    185c:	28 2f       	mov	r18, r24
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	2c 2b       	or	r18, r28
    1862:	3d 2b       	or	r19, r29
				if (currentStateData.currentUnit == THC_UNIT_VOLTS)
    1864:	80 91 47 05 	lds	r24, 0x0547
    1868:	90 91 48 05 	lds	r25, 0x0548
    186c:	02 97       	sbiw	r24, 0x02	; 2
    186e:	51 f4       	brne	.+20     	; 0x1884 <loop+0x1ce>
					temp *= 7;
    1870:	c9 01       	movw	r24, r18
    1872:	43 e0       	ldi	r20, 0x03	; 3
    1874:	88 0f       	add	r24, r24
    1876:	99 1f       	adc	r25, r25
    1878:	4a 95       	dec	r20
    187a:	e1 f7       	brne	.-8      	; 0x1874 <loop+0x1be>
    187c:	ac 01       	movw	r20, r24
    187e:	42 1b       	sub	r20, r18
    1880:	53 0b       	sbc	r21, r19
    1882:	9a 01       	movw	r18, r20
				currentStateData.voltSetPoint = temp;
    1884:	30 93 4d 05 	sts	0x054D, r19
    1888:	20 93 4c 05 	sts	0x054C, r18
    188c:	04 c0       	rjmp	.+8      	; 0x1896 <loop+0x1e0>
				SendVoltage(PC_RESP_SETPOINT);
				break;

			case PC_CMD_GET_SETPOINT:
				// Read the command byte and throw away.
				Serial1.read();
    188e:	84 ec       	ldi	r24, 0xC4	; 196
    1890:	97 e0       	ldi	r25, 0x07	; 7
    1892:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <_ZN14HardwareSerial4readEv>
				// Build and send the response.
				SendVoltage(PC_RESP_SETPOINT);
    1896:	82 e0       	ldi	r24, 0x02	; 2
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	0e 94 18 05 	call	0xa30	; 0xa30 <_Z11SendVoltage11PC_RESPONSE>
    189e:	a7 c0       	rjmp	.+334    	; 0x19ee <loop+0x338>
				break;

			case PC_CMD_GET_CURRENT:
				// Read the command byte and throw away.
				Serial1.read();
    18a0:	84 ec       	ldi	r24, 0xC4	; 196
    18a2:	97 e0       	ldi	r25, 0x07	; 7
    18a4:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <_ZN14HardwareSerial4readEv>
				// Build and send the response.
				SendVoltage(PC_RESP_CURRENT);
    18a8:	85 e0       	ldi	r24, 0x05	; 5
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	f6 cf       	rjmp	.-20     	; 0x189a <loop+0x1e4>
				break;

			case PC_CMD_TEST_TORCH_ON:
				// Read the command byte and throw away.
				Serial1.read();
    18ae:	84 ec       	ldi	r24, 0xC4	; 196
    18b0:	97 e0       	ldi	r25, 0x07	; 7
    18b2:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <_ZN14HardwareSerial4readEv>
				// Toggle the torch.
				TestTorchOn(true);
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	05 c0       	rjmp	.+10     	; 0x18c4 <loop+0x20e>
				break;

			case PC_CMD_TEST_TORCH_OFF:
				// Read the command byte and throw away.
				Serial1.read();
    18ba:	84 ec       	ldi	r24, 0xC4	; 196
    18bc:	97 e0       	ldi	r25, 0x07	; 7
    18be:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <_ZN14HardwareSerial4readEv>
				// Toggle the torch.
				TestTorchOn(false);
    18c2:	80 e0       	ldi	r24, 0x00	; 0
    18c4:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <_Z11TestTorchOnb>
    18c8:	92 c0       	rjmp	.+292    	; 0x19ee <loop+0x338>
				break;

			case PC_CMD_CAPTURE_START:
				// Read the command byte and throw away.
				Serial1.read();
    18ca:	84 ec       	ldi	r24, 0xC4	; 196
    18cc:	97 e0       	ldi	r25, 0x07	; 7
    18ce:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <_ZN14HardwareSerial4readEv>
				captureOn = true;
    18d2:	60 92 80 05 	sts	0x0580, r6
				sendVoltageCaptureState(captureOn);
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	0e c0       	rjmp	.+28     	; 0x18f6 <loop+0x240>
				break;

			case PC_CMD_CAPTURE_STOP:
				// Read the command byte and throw away.
				Serial1.read();
    18da:	84 ec       	ldi	r24, 0xC4	; 196
    18dc:	97 e0       	ldi	r25, 0x07	; 7
    18de:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <_ZN14HardwareSerial4readEv>
				captureOn = false;
    18e2:	10 92 80 05 	sts	0x0580, r1
				sendVoltageCaptureState(captureOn);
    18e6:	80 e0       	ldi	r24, 0x00	; 0
    18e8:	06 c0       	rjmp	.+12     	; 0x18f6 <loop+0x240>
				break;

			case PC_CMD_CAPTURE_GET_STATE:
				// Read the command byte and throw away.
				Serial1.read();
    18ea:	84 ec       	ldi	r24, 0xC4	; 196
    18ec:	97 e0       	ldi	r25, 0x07	; 7
    18ee:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <_ZN14HardwareSerial4readEv>
				sendVoltageCaptureState(captureOn);
    18f2:	80 91 80 05 	lds	r24, 0x0580
    18f6:	0e 94 47 05 	call	0xa8e	; 0xa8e <_Z23sendVoltageCaptureStateb>
    18fa:	79 c0       	rjmp	.+242    	; 0x19ee <loop+0x338>
				break;

			case PC_CMD_SETPOINT_UP:
				// Read the command byte and throw away.
				Serial1.read();
    18fc:	84 ec       	ldi	r24, 0xC4	; 196
    18fe:	97 e0       	ldi	r25, 0x07	; 7
    1900:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <_ZN14HardwareSerial4readEv>
				// Handle the up.
				if ((currentStateData.currentUnit == THC_UNIT_VOLTS) && (currentStateData.voltSetPoint/7 < 180))
    1904:	80 91 47 05 	lds	r24, 0x0547
    1908:	90 91 48 05 	lds	r25, 0x0548
    190c:	82 30       	cpi	r24, 0x02	; 2
    190e:	91 05       	cpc	r25, r1
    1910:	51 f4       	brne	.+20     	; 0x1926 <loop+0x270>
    1912:	80 91 4c 05 	lds	r24, 0x054C
    1916:	90 91 4d 05 	lds	r25, 0x054D
    191a:	54 e0       	ldi	r21, 0x04	; 4
    191c:	8c 3e       	cpi	r24, 0xEC	; 236
    191e:	95 07       	cpc	r25, r21
    1920:	90 f5       	brcc	.+100    	; 0x1986 <loop+0x2d0>
				{
					currentStateData.voltSetPoint += 7;
    1922:	07 96       	adiw	r24, 0x07	; 7
    1924:	2c c0       	rjmp	.+88     	; 0x197e <loop+0x2c8>
				}
				else if ((currentStateData.currentUnit == THC_UNIT_COUNTS) && (currentStateData.voltSetPoint < 1020))
    1926:	01 97       	sbiw	r24, 0x01	; 1
    1928:	71 f5       	brne	.+92     	; 0x1986 <loop+0x2d0>
    192a:	80 91 4c 05 	lds	r24, 0x054C
    192e:	90 91 4d 05 	lds	r25, 0x054D
    1932:	23 e0       	ldi	r18, 0x03	; 3
    1934:	8c 3f       	cpi	r24, 0xFC	; 252
    1936:	92 07       	cpc	r25, r18
    1938:	30 f5       	brcc	.+76     	; 0x1986 <loop+0x2d0>
				{
					currentStateData.voltSetPoint++;
    193a:	01 96       	adiw	r24, 0x01	; 1
    193c:	20 c0       	rjmp	.+64     	; 0x197e <loop+0x2c8>
				display.Display_TargetVoltage(currentStateData.voltSetPoint);
				break;

			case PC_CMD_SETPOINT_DOWN:
				// Read the command byte and throw away.
				Serial1.read();
    193e:	84 ec       	ldi	r24, 0xC4	; 196
    1940:	97 e0       	ldi	r25, 0x07	; 7
    1942:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <_ZN14HardwareSerial4readEv>
				// Handle the down.
				if ((currentStateData.currentUnit == THC_UNIT_VOLTS) && (currentStateData.voltSetPoint/7 > 50))
    1946:	80 91 47 05 	lds	r24, 0x0547
    194a:	90 91 48 05 	lds	r25, 0x0548
    194e:	82 30       	cpi	r24, 0x02	; 2
    1950:	91 05       	cpc	r25, r1
    1952:	51 f4       	brne	.+20     	; 0x1968 <loop+0x2b2>
    1954:	80 91 4c 05 	lds	r24, 0x054C
    1958:	90 91 4d 05 	lds	r25, 0x054D
    195c:	41 e0       	ldi	r20, 0x01	; 1
    195e:	85 36       	cpi	r24, 0x65	; 101
    1960:	94 07       	cpc	r25, r20
    1962:	88 f0       	brcs	.+34     	; 0x1986 <loop+0x2d0>
				{
					currentStateData.voltSetPoint -= 7;
    1964:	07 97       	sbiw	r24, 0x07	; 7
    1966:	0b c0       	rjmp	.+22     	; 0x197e <loop+0x2c8>
				}
				else if ((currentStateData.currentUnit == THC_UNIT_COUNTS) && (currentStateData.voltSetPoint > 350))
    1968:	01 97       	sbiw	r24, 0x01	; 1
    196a:	69 f4       	brne	.+26     	; 0x1986 <loop+0x2d0>
    196c:	80 91 4c 05 	lds	r24, 0x054C
    1970:	90 91 4d 05 	lds	r25, 0x054D
    1974:	51 e0       	ldi	r21, 0x01	; 1
    1976:	8f 35       	cpi	r24, 0x5F	; 95
    1978:	95 07       	cpc	r25, r21
    197a:	28 f0       	brcs	.+10     	; 0x1986 <loop+0x2d0>
				{
					currentStateData.voltSetPoint--;
    197c:	01 97       	sbiw	r24, 0x01	; 1
    197e:	90 93 4d 05 	sts	0x054D, r25
    1982:	80 93 4c 05 	sts	0x054C, r24
				}
				// Build and send the response.
				SendVoltage(PC_RESP_SETPOINT);
    1986:	82 e0       	ldi	r24, 0x02	; 2
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	0e 94 18 05 	call	0xa30	; 0xa30 <_Z11SendVoltage11PC_RESPONSE>
				// Update the LCD
				display.Display_TargetVoltage(currentStateData.voltSetPoint);
    198e:	60 91 4c 05 	lds	r22, 0x054C
    1992:	70 91 4d 05 	lds	r23, 0x054D
    1996:	88 e1       	ldi	r24, 0x18	; 24
    1998:	95 e0       	ldi	r25, 0x05	; 5
    199a:	0e 94 2e 10 	call	0x205c	; 0x205c <_ZN12THCInterface21Display_TargetVoltageEj>
    199e:	27 c0       	rjmp	.+78     	; 0x19ee <loop+0x338>
				break;

			case PC_CMD_TEST_ARC_GOOD_ON:
				// Read the command byte and throw away.
				Serial1.read();
    19a0:	84 ec       	ldi	r24, 0xC4	; 196
    19a2:	97 e0       	ldi	r25, 0x07	; 7
    19a4:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <_ZN14HardwareSerial4readEv>
				// Turn on arc good for test
				digitalWrite(OUT_D_ARC_GOOD, OUT_D_ARC_GOOD_ACTIVE);
    19a8:	82 e3       	ldi	r24, 0x32	; 50
    19aa:	17 c0       	rjmp	.+46     	; 0x19da <loop+0x324>
				break;

			case PC_CMD_TEST_ARC_GOOD_OFF:
				// Read the command byte and throw away.
				Serial1.read();
    19ac:	84 ec       	ldi	r24, 0xC4	; 196
    19ae:	97 e0       	ldi	r25, 0x07	; 7
    19b0:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <_ZN14HardwareSerial4readEv>
				// Turn off arc good for test
				digitalWrite(OUT_D_ARC_GOOD, OUT_D_ARC_GOOD_NOT_ACTIVE);
    19b4:	82 e3       	ldi	r24, 0x32	; 50
    19b6:	18 c0       	rjmp	.+48     	; 0x19e8 <loop+0x332>
				break;

			case PC_CMD_TEST_THC_UP_ON:
				// Read the command byte and throw away.
				Serial1.read();
    19b8:	84 ec       	ldi	r24, 0xC4	; 196
    19ba:	97 e0       	ldi	r25, 0x07	; 7
    19bc:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <_ZN14HardwareSerial4readEv>
				// Turn on torch up for test
				digitalWrite(OUT_D_TORCH_UP, OUT_D_TORCH_UP_ACTIVE);
    19c0:	80 e3       	ldi	r24, 0x30	; 48
    19c2:	0b c0       	rjmp	.+22     	; 0x19da <loop+0x324>
				break;

			case PC_CMD_TEST_THC_UP_OFF:
				// Read the command byte and throw away.
				Serial1.read();
    19c4:	84 ec       	ldi	r24, 0xC4	; 196
    19c6:	97 e0       	ldi	r25, 0x07	; 7
    19c8:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <_ZN14HardwareSerial4readEv>
				// Turn off torch up for test
				digitalWrite(OUT_D_TORCH_UP, OUT_D_TORCH_UP_NOT_ACTIVE);
    19cc:	80 e3       	ldi	r24, 0x30	; 48
    19ce:	0c c0       	rjmp	.+24     	; 0x19e8 <loop+0x332>
				break;

			case PC_CMD_TEST_THC_DOWN_ON:
				// Read the command byte and throw away.
				Serial1.read();
    19d0:	84 ec       	ldi	r24, 0xC4	; 196
    19d2:	97 e0       	ldi	r25, 0x07	; 7
    19d4:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <_ZN14HardwareSerial4readEv>
				// Turn on torch down for test
				digitalWrite(OUT_D_TORCH_DOWN, OUT_D_TORCH_DOWN_ACTIVE);
    19d8:	8e e2       	ldi	r24, 0x2E	; 46
    19da:	60 e0       	ldi	r22, 0x00	; 0
    19dc:	06 c0       	rjmp	.+12     	; 0x19ea <loop+0x334>
				break;

			case PC_CMD_TEST_THC_DOWN_OFF:
				// Read the command byte and throw away.
				Serial1.read();
    19de:	84 ec       	ldi	r24, 0xC4	; 196
    19e0:	97 e0       	ldi	r25, 0x07	; 7
    19e2:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <_ZN14HardwareSerial4readEv>
				// Turn off torch down for test
				digitalWrite(OUT_D_TORCH_DOWN, OUT_D_TORCH_DOWN_NOT_ACTIVE);
    19e6:	8e e2       	ldi	r24, 0x2E	; 46
    19e8:	61 e0       	ldi	r22, 0x01	; 1
    19ea:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <digitalWrite>
		//
		// Take the appropriate action based on the operational MODE.
		//

		// If in Disabled mode, don't do anything.
		if (currentStateData.currentMode == THC_MODE_DISABLED)
    19ee:	80 91 45 05 	lds	r24, 0x0545
    19f2:	90 91 46 05 	lds	r25, 0x0546
    19f6:	00 97       	sbiw	r24, 0x00	; 0
    19f8:	09 f4       	brne	.+2      	; 0x19fc <loop+0x346>
    19fa:	96 ce       	rjmp	.-724    	; 0x1728 <loop+0x72>
			{
			// Nothing is done when disabled.
			}
		// If in Bypass mode, used the handler that just passes through.
		else if (currentStateData.currentMode == THC_MODE_BYPASS)
    19fc:	81 30       	cpi	r24, 0x01	; 1
    19fe:	91 05       	cpc	r25, r1
    1a00:	29 f4       	brne	.+10     	; 0x1a0c <loop+0x356>
			{
			bypassHandler->controlLoop();
    1a02:	87 2d       	mov	r24, r7
    1a04:	90 2f       	mov	r25, r16
    1a06:	0e 94 66 03 	call	0x6cc	; 0x6cc <_ZN10BypassMode11controlLoopEv>
    1a0a:	8e ce       	rjmp	.-740    	; 0x1728 <loop+0x72>
			}
		// If in Cruise mode, used the handler that just passes through
		// until the user hits the "Select" button to start the THC function.
		else if (currentStateData.currentMode == THC_MODE_CRUISE)
    1a0c:	82 30       	cpi	r24, 0x02	; 2
    1a0e:	91 05       	cpc	r25, r1
    1a10:	b9 f5       	brne	.+110    	; 0x1a80 <loop+0x3ca>
			{
			bypassHandler->controlLoop();
    1a12:	87 2d       	mov	r24, r7
    1a14:	90 2f       	mov	r25, r16
    1a16:	0e 94 66 03 	call	0x6cc	; 0x6cc <_ZN10BypassMode11controlLoopEv>
			// Check for keypress to start controlling cutting.
			if (display.processCruiseButtons() == COMMAND_CRUISE_SET)
    1a1a:	88 e1       	ldi	r24, 0x18	; 24
    1a1c:	95 e0       	ldi	r25, 0x05	; 5
    1a1e:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <_ZN12THCInterface20processCruiseButtonsEv>
    1a22:	05 97       	sbiw	r24, 0x05	; 5
    1a24:	09 f0       	breq	.+2      	; 0x1a28 <loop+0x372>
    1a26:	80 ce       	rjmp	.-768    	; 0x1728 <loop+0x72>
				{
				if ( currentStateData.torchOnState && currentStateData.arcGoodState &&
    1a28:	80 91 49 05 	lds	r24, 0x0549
    1a2c:	88 23       	and	r24, r24
    1a2e:	09 f4       	brne	.+2      	; 0x1a32 <loop+0x37c>
    1a30:	7b ce       	rjmp	.-778    	; 0x1728 <loop+0x72>
    1a32:	80 91 4a 05 	lds	r24, 0x054A
    1a36:	88 23       	and	r24, r24
    1a38:	09 f4       	brne	.+2      	; 0x1a3c <loop+0x386>
    1a3a:	76 ce       	rjmp	.-788    	; 0x1728 <loop+0x72>
    1a3c:	80 91 4e 05 	lds	r24, 0x054E
    1a40:	90 91 4f 05 	lds	r25, 0x054F
    1a44:	89 2b       	or	r24, r25
    1a46:	09 f4       	brne	.+2      	; 0x1a4a <loop+0x394>
    1a48:	6f ce       	rjmp	.-802    	; 0x1728 <loop+0x72>
					 (currentStateData.currentVoltage > MIN_CRUISE_SET_VOLTAGE))
					{
					display.setMenu(MENU_OPERATING);
    1a4a:	88 e1       	ldi	r24, 0x18	; 24
    1a4c:	95 e0       	ldi	r25, 0x05	; 5
    1a4e:	60 e0       	ldi	r22, 0x00	; 0
    1a50:	70 e0       	ldi	r23, 0x00	; 0
    1a52:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <_ZN12THCInterface7setMenuE6Menu_e>
					currentStateData.voltSetPoint = currentStateData.currentVoltage;
    1a56:	80 91 4e 05 	lds	r24, 0x054E
    1a5a:	90 91 4f 05 	lds	r25, 0x054F
    1a5e:	90 93 4d 05 	sts	0x054D, r25
    1a62:	80 93 4c 05 	sts	0x054C, r24
					currentStateData.currentMode = THC_MODE_ENABLED;
    1a66:	83 e0       	ldi	r24, 0x03	; 3
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	90 93 46 05 	sts	0x0546, r25
    1a6e:	80 93 45 05 	sts	0x0545, r24
					currentStateData.currentState = THC_STATE_CUTTING;
    1a72:	30 92 44 05 	sts	0x0544, r3
    1a76:	20 92 43 05 	sts	0x0543, r2
					currentStateData.runVoltageControl = true;
    1a7a:	60 92 64 05 	sts	0x0564, r6
    1a7e:	54 ce       	rjmp	.-856    	; 0x1728 <loop+0x72>
					}
				}
			}
		// In the Enabled mode, do the standard full height control processing.
		else if (currentStateData.currentMode == THC_MODE_ENABLED)
    1a80:	03 97       	sbiw	r24, 0x03	; 3
    1a82:	09 f0       	breq	.+2      	; 0x1a86 <loop+0x3d0>
    1a84:	51 ce       	rjmp	.-862    	; 0x1728 <loop+0x72>
			{
			//
			// HANDLE STATE CHANGE
			//
			// Check to see if the State changed (cutting to enabled, or enabled to cutting).
			if (oldState != currentStateData.currentState)
    1a86:	60 91 43 05 	lds	r22, 0x0543
    1a8a:	70 91 44 05 	lds	r23, 0x0544
    1a8e:	46 16       	cp	r4, r22
    1a90:	57 06       	cpc	r5, r23
    1a92:	c9 f0       	breq	.+50     	; 0x1ac6 <loop+0x410>
				{
				// Update the display with the new state.
				display.setTHCState(currentStateData.currentState);
    1a94:	88 e1       	ldi	r24, 0x18	; 24
    1a96:	95 e0       	ldi	r25, 0x05	; 5
    1a98:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <_ZN12THCInterface11setTHCStateE10THCState_e>
				DebugPrint("State Changed to: ");
				switch (currentStateData.currentState)
    1a9c:	80 91 43 05 	lds	r24, 0x0543
    1aa0:	90 91 44 05 	lds	r25, 0x0544
    1aa4:	00 97       	sbiw	r24, 0x00	; 0
    1aa6:	29 f0       	breq	.+10     	; 0x1ab2 <loop+0x3fc>
    1aa8:	01 97       	sbiw	r24, 0x01	; 1
    1aaa:	49 f4       	brne	.+18     	; 0x1abe <loop+0x408>
					{
					case THC_STATE_CUTTING:
						//DebugPrint("STATE CUTTING\n");
						SendCutStartPacket();
    1aac:	0e 94 53 05 	call	0xaa6	; 0xaa6 <_Z18SendCutStartPacketv>
    1ab0:	06 c0       	rjmp	.+12     	; 0x1abe <loop+0x408>
						break;

					case THC_STATE_ENABLED:
						//DebugPrint("STATE ENABLED\n");
						// Update the torch state (up/down/okay) since we're cutting.
						display.SetTorchState(TORCH_STATE_NONE);
    1ab2:	88 e1       	ldi	r24, 0x18	; 24
    1ab4:	95 e0       	ldi	r25, 0x05	; 5
    1ab6:	63 e0       	ldi	r22, 0x03	; 3
    1ab8:	70 e0       	ldi	r23, 0x00	; 0
    1aba:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <_ZN12THCInterface13SetTorchStateE12TorchState_e>
						break;
					}
				// Update the varIable used to track state changes.
				oldState = currentStateData.currentState;
    1abe:	40 90 43 05 	lds	r4, 0x0543
    1ac2:	50 90 44 05 	lds	r5, 0x0544
			// RUN THE APPRORIATE HANDLER BASED ON THE STATE
			//

			// Run the state handler based on the current state,
			// either Enabled (waiting to cut) or cutting.
			if (currentStateData.currentState == THC_STATE_ENABLED)
    1ac6:	80 91 43 05 	lds	r24, 0x0543
    1aca:	90 91 44 05 	lds	r25, 0x0544
    1ace:	00 97       	sbiw	r24, 0x00	; 0
    1ad0:	29 f4       	brne	.+10     	; 0x1adc <loop+0x426>
				newCmd = StateEnabledHandler(&display);
    1ad2:	88 e1       	ldi	r24, 0x18	; 24
    1ad4:	95 e0       	ldi	r25, 0x05	; 5
    1ad6:	0e 94 ab 09 	call	0x1356	; 0x1356 <_Z19StateEnabledHandlerP12THCInterface>
    1ada:	06 c0       	rjmp	.+12     	; 0x1ae8 <loop+0x432>
			else if (currentStateData.currentState == THC_STATE_CUTTING)
    1adc:	01 97       	sbiw	r24, 0x01	; 1
    1ade:	29 f4       	brne	.+10     	; 0x1aea <loop+0x434>
				newCmd = StateCuttingHandler(&display);
    1ae0:	88 e1       	ldi	r24, 0x18	; 24
    1ae2:	95 e0       	ldi	r25, 0x05	; 5
    1ae4:	0e 94 c3 08 	call	0x1186	; 0x1186 <_Z19StateCuttingHandlerP12THCInterface>
    1ae8:	6c 01       	movw	r12, r24

			// Process any user commands via the buttons.
			processCommand(newCmd);
    1aea:	c6 01       	movw	r24, r12
    1aec:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <_Z14processCommand9Command_e>
    1af0:	1b ce       	rjmp	.-970    	; 0x1728 <loop+0x72>

00001af2 <setup>:




//The setup function is called once at startup of the sketch
void setup()
    1af2:	ff 92       	push	r15
    1af4:	0f 93       	push	r16
    1af6:	1f 93       	push	r17
    1af8:	df 93       	push	r29
    1afa:	cf 93       	push	r28
    1afc:	00 d0       	rcall	.+0      	; 0x1afe <setup+0xc>
    1afe:	0f 92       	push	r0
    1b00:	cd b7       	in	r28, 0x3d	; 61
    1b02:	de b7       	in	r29, 0x3e	; 62
	{
	Timer splashTime;
    1b04:	8e 01       	movw	r16, r28
    1b06:	0f 5f       	subi	r16, 0xFF	; 255
    1b08:	1f 4f       	sbci	r17, 0xFF	; 255
    1b0a:	c8 01       	movw	r24, r16
    1b0c:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN5TimerC1Ev>

	// Start the first serial port for development diag output
	Serial.begin(115200);
    1b10:	82 ea       	ldi	r24, 0xA2	; 162
    1b12:	97 e0       	ldi	r25, 0x07	; 7
    1b14:	40 e0       	ldi	r20, 0x00	; 0
    1b16:	52 ec       	ldi	r21, 0xC2	; 194
    1b18:	61 e0       	ldi	r22, 0x01	; 1
    1b1a:	70 e0       	ldi	r23, 0x00	; 0
    1b1c:	0e 94 b8 1c 	call	0x3970	; 0x3970 <_ZN14HardwareSerial5beginEm>
	Serial.println("\nTHC Setup Complete");
    1b20:	82 ea       	ldi	r24, 0xA2	; 162
    1b22:	97 e0       	ldi	r25, 0x07	; 7
    1b24:	60 e0       	ldi	r22, 0x00	; 0
    1b26:	72 e0       	ldi	r23, 0x02	; 2
    1b28:	0e 94 1e 20 	call	0x403c	; 0x403c <_ZN5Print7printlnEPKc>

	// Start the second serial port for runtime debug output.
	Serial1.begin(115200);
    1b2c:	84 ec       	ldi	r24, 0xC4	; 196
    1b2e:	97 e0       	ldi	r25, 0x07	; 7
    1b30:	40 e0       	ldi	r20, 0x00	; 0
    1b32:	52 ec       	ldi	r21, 0xC2	; 194
    1b34:	61 e0       	ldi	r22, 0x01	; 1
    1b36:	70 e0       	ldi	r23, 0x00	; 0
    1b38:	0e 94 b8 1c 	call	0x3970	; 0x3970 <_ZN14HardwareSerial5beginEm>
	//Serial1.println("\nPort 1: THC Setup Complete");

	// Clear the display
	display.clear();
    1b3c:	88 e1       	ldi	r24, 0x18	; 24
    1b3e:	95 e0       	ldi	r25, 0x05	; 5
    1b40:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <_ZN12THCInterface5clearEv>
	// Put the splash screen up for a fix 2 seconds.
	splashTime.startTimer();
    1b44:	c8 01       	movw	r24, r16
    1b46:	0e 94 3b 18 	call	0x3076	; 0x3076 <_ZN5Timer10startTimerEv>
	// Display the splash screen.
	display.splash((char *) VERSION);
    1b4a:	88 e1       	ldi	r24, 0x18	; 24
    1b4c:	95 e0       	ldi	r25, 0x05	; 5
    1b4e:	64 e1       	ldi	r22, 0x14	; 20
    1b50:	72 e0       	ldi	r23, 0x02	; 2
    1b52:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <_ZN12THCInterface6splashEPc>

	// Initialize the state variables.
	currentStateData.torchOnState = false;
    1b56:	10 92 49 05 	sts	0x0549, r1
	currentStateData.arcGoodState = false;
    1b5a:	10 92 4a 05 	sts	0x054A, r1

	// Configure the I/O as the very first thing so
	// nothing gets turned on unexpectedly.
	setupIO();
    1b5e:	0e 94 32 04 	call	0x864	; 0x864 <_Z7setupIOv>

	// Load all the data from the flash and set the default state.
	flash.DataLoad();
    1b62:	81 e3       	ldi	r24, 0x31	; 49
    1b64:	95 e0       	ldi	r25, 0x05	; 5
    1b66:	0e 94 30 07 	call	0xe60	; 0xe60 <_ZN18NonVolatileStorage8DataLoadEv>
	flash.DataGetAll((THCStatData*) &usageData);
    1b6a:	81 e3       	ldi	r24, 0x31	; 49
    1b6c:	95 e0       	ldi	r25, 0x05	; 5
    1b6e:	6f e6       	ldi	r22, 0x6F	; 111
    1b70:	75 e0       	ldi	r23, 0x05	; 5
    1b72:	0e 94 2c 08 	call	0x1058	; 0x1058 <_ZN18NonVolatileStorage10DataGetAllEP11THCStatData>
	//currentStateData.currentState = usageData.defaultState;
	currentStateData.currentMode = THC_MODE_DISABLED;
    1b76:	10 92 46 05 	sts	0x0546, r1
    1b7a:	10 92 45 05 	sts	0x0545, r1
	currentStateData.currentState = THC_STATE_ENABLED;
    1b7e:	10 92 44 05 	sts	0x0544, r1
    1b82:	10 92 43 05 	sts	0x0543, r1
	currentStateData.voltSetPoint = usageData.voltSetPoint;
    1b86:	80 91 77 05 	lds	r24, 0x0577
    1b8a:	90 91 78 05 	lds	r25, 0x0578
    1b8e:	90 93 4d 05 	sts	0x054D, r25
    1b92:	80 93 4c 05 	sts	0x054C, r24
	currentStateData.kerfEncountered = false;
    1b96:	10 92 68 05 	sts	0x0568, r1
	currentStateData.currentUnit = THC_UNIT_COUNTS;
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	90 93 48 05 	sts	0x0548, r25
    1ba2:	80 93 47 05 	sts	0x0547, r24
			currentStateData.index++)
		currentStateData.readings[currentStateData.index] = 0;
*/

	// Start the circular buffer of reads at 0.
	currentStateData.index = 0;
    1ba6:	10 92 51 05 	sts	0x0551, r1
    1baa:	10 92 50 05 	sts	0x0550, r1
	currentStateData.displayIndex = 0;
    1bae:	10 92 53 05 	sts	0x0553, r1
    1bb2:	10 92 52 05 	sts	0x0552, r1

		// If the splash display hasn't be up for 2 seconds, then wait.
	while (splashTime.elapsedMilliSeconds() < 2000)
    1bb6:	f0 2e       	mov	r15, r16
    1bb8:	01 2f       	mov	r16, r17
    1bba:	8f 2d       	mov	r24, r15
    1bbc:	90 2f       	mov	r25, r16
    1bbe:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <_ZN5Timer19elapsedMilliSecondsEv>
    1bc2:	60 5d       	subi	r22, 0xD0	; 208
    1bc4:	77 40       	sbci	r23, 0x07	; 7
    1bc6:	80 40       	sbci	r24, 0x00	; 0
    1bc8:	90 40       	sbci	r25, 0x00	; 0
    1bca:	b8 f3       	brcs	.-18     	; 0x1bba <setup+0xc8>
		{
		}
	// Initialize the run time display
	display.initDisplay();
    1bcc:	88 e1       	ldi	r24, 0x18	; 24
    1bce:	95 e0       	ldi	r25, 0x05	; 5
    1bd0:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <_ZN12THCInterface11initDisplayEv>

	display.Display_TargetVoltage(currentStateData.voltSetPoint);
    1bd4:	60 91 4c 05 	lds	r22, 0x054C
    1bd8:	70 91 4d 05 	lds	r23, 0x054D
    1bdc:	88 e1       	ldi	r24, 0x18	; 24
    1bde:	95 e0       	ldi	r25, 0x05	; 5
    1be0:	0e 94 2e 10 	call	0x205c	; 0x205c <_ZN12THCInterface21Display_TargetVoltageEj>
	currentStateData.runVoltageControl = false;
    1be4:	10 92 64 05 	sts	0x0564, r1
	display.SetTorchState(TORCH_STATE_NONE);
    1be8:	88 e1       	ldi	r24, 0x18	; 24
    1bea:	95 e0       	ldi	r25, 0x05	; 5
    1bec:	63 e0       	ldi	r22, 0x03	; 3
    1bee:	70 e0       	ldi	r23, 0x00	; 0
    1bf0:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <_ZN12THCInterface13SetTorchStateE12TorchState_e>
	//display.setTHCState(currentStateData.currentState);

	//display.setMenu(MENU_OPERATING);
	display.TorchOn(currentStateData.torchOnState);
    1bf4:	60 91 49 05 	lds	r22, 0x0549
    1bf8:	88 e1       	ldi	r24, 0x18	; 24
    1bfa:	95 e0       	ldi	r25, 0x05	; 5
    1bfc:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_ZN12THCInterface7TorchOnEb>
	display.ArcGood(currentStateData.arcGoodState);
    1c00:	60 91 4a 05 	lds	r22, 0x054A
    1c04:	88 e1       	ldi	r24, 0x18	; 24
    1c06:	95 e0       	ldi	r25, 0x05	; 5
    1c08:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <_ZN12THCInterface7ArcGoodEb>

	//display.setTHCState(currentStateData.currentState);
	}
    1c0c:	0f 90       	pop	r0
    1c0e:	0f 90       	pop	r0
    1c10:	0f 90       	pop	r0
    1c12:	0f 90       	pop	r0
    1c14:	cf 91       	pop	r28
    1c16:	df 91       	pop	r29
    1c18:	1f 91       	pop	r17
    1c1a:	0f 91       	pop	r16
    1c1c:	ff 90       	pop	r15
    1c1e:	08 95       	ret

00001c20 <_ZN12THCInterfaceD1Ev>:
    1c20:	08 95       	ret

00001c22 <_ZN12THCInterface18modeChangedPressedEv>:



bool THCInterface::modeChangedPressed(void)
	{
	return modeButton->WasPressed(BUTTON_NOREPEAT);
    1c22:	fc 01       	movw	r30, r24
    1c24:	84 85       	ldd	r24, Z+12	; 0x0c
    1c26:	95 85       	ldd	r25, Z+13	; 0x0d
    1c28:	61 e0       	ldi	r22, 0x01	; 1
    1c2a:	70 e0       	ldi	r23, 0x00	; 0
    1c2c:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
	}
    1c30:	08 95       	ret

00001c32 <_ZN12THCInterface20processCruiseButtonsEv>:

Command_e THCInterface::processCruiseButtons(void)
	{
	bool selectPress;

	selectPress = selectButton->WasPressed(BUTTON_NOREPEAT);
    1c32:	fc 01       	movw	r30, r24
    1c34:	84 81       	ldd	r24, Z+4	; 0x04
    1c36:	95 81       	ldd	r25, Z+5	; 0x05
    1c38:	61 e0       	ldi	r22, 0x01	; 1
    1c3a:	70 e0       	ldi	r23, 0x00	; 0
    1c3c:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>

	if (selectPress)
    1c40:	88 23       	and	r24, r24
    1c42:	19 f4       	brne	.+6      	; 0x1c4a <_ZN12THCInterface20processCruiseButtonsEv+0x18>
    1c44:	20 e0       	ldi	r18, 0x00	; 0
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	02 c0       	rjmp	.+4      	; 0x1c4e <_ZN12THCInterface20processCruiseButtonsEv+0x1c>
    1c4a:	25 e0       	ldi	r18, 0x05	; 5
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
		{
		return COMMAND_CRUISE_SET;
		}

	return COMMAND_NONE;
	}
    1c4e:	c9 01       	movw	r24, r18
    1c50:	08 95       	ret

00001c52 <_ZN12THCInterface20processUpDownButtonsEv>:
	}




Command_e THCInterface::processUpDownButtons(void)
    1c52:	ff 92       	push	r15
    1c54:	0f 93       	push	r16
    1c56:	1f 93       	push	r17
    1c58:	8c 01       	movw	r16, r24
	{
	bool upPress, downPress;

	downPress = downButton->WasPressed(BUTTON_REPEAT);
    1c5a:	fc 01       	movw	r30, r24
    1c5c:	82 85       	ldd	r24, Z+10	; 0x0a
    1c5e:	93 85       	ldd	r25, Z+11	; 0x0b
    1c60:	60 e0       	ldi	r22, 0x00	; 0
    1c62:	70 e0       	ldi	r23, 0x00	; 0
    1c64:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
    1c68:	f8 2e       	mov	r15, r24

	upPress = upButton->WasPressed(BUTTON_REPEAT);
    1c6a:	f8 01       	movw	r30, r16
    1c6c:	80 85       	ldd	r24, Z+8	; 0x08
    1c6e:	91 85       	ldd	r25, Z+9	; 0x09
    1c70:	60 e0       	ldi	r22, 0x00	; 0
    1c72:	70 e0       	ldi	r23, 0x00	; 0
    1c74:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>

	if (upPress)
    1c78:	88 23       	and	r24, r24
    1c7a:	19 f0       	breq	.+6      	; 0x1c82 <_ZN12THCInterface20processUpDownButtonsEv+0x30>
    1c7c:	21 e0       	ldi	r18, 0x01	; 1
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	07 c0       	rjmp	.+14     	; 0x1c90 <_ZN12THCInterface20processUpDownButtonsEv+0x3e>
		{
		return COMMAND_VOLT_UP;
		}
	else if (downPress)
    1c82:	ff 20       	and	r15, r15
    1c84:	19 f4       	brne	.+6      	; 0x1c8c <_ZN12THCInterface20processUpDownButtonsEv+0x3a>
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	02 c0       	rjmp	.+4      	; 0x1c90 <_ZN12THCInterface20processUpDownButtonsEv+0x3e>
    1c8c:	22 e0       	ldi	r18, 0x02	; 2
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
		DebugPrint("Got a down press\n");
		return COMMAND_VOLT_DOWN;
		}

	return COMMAND_NONE;
	}
    1c90:	c9 01       	movw	r24, r18
    1c92:	1f 91       	pop	r17
    1c94:	0f 91       	pop	r16
    1c96:	ff 90       	pop	r15
    1c98:	08 95       	ret

00001c9a <_ZN12THCInterface25Display_FlashWritePendingEv>:
	}




void THCInterface::Display_FlashWritePending(void)
    1c9a:	cf 93       	push	r28
    1c9c:	df 93       	push	r29
    1c9e:	ec 01       	movw	r28, r24
	{
	if (currentMenu != MENU_OPERATING)
    1ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ca4:	89 2b       	or	r24, r25
    1ca6:	a1 f4       	brne	.+40     	; 0x1cd0 <_ZN12THCInterface25Display_FlashWritePendingEv+0x36>
		return;

	lcd->setCursor(12, 0);
    1ca8:	88 81       	ld	r24, Y
    1caa:	99 81       	ldd	r25, Y+1	; 0x01
    1cac:	6c e0       	ldi	r22, 0x0C	; 12
    1cae:	40 e0       	ldi	r20, 0x00	; 0
    1cb0:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
	if (flashWritePending)
    1cb4:	88 8d       	ldd	r24, Y+24	; 0x18
    1cb6:	28 81       	ld	r18, Y
    1cb8:	39 81       	ldd	r19, Y+1	; 0x01
    1cba:	88 23       	and	r24, r24
    1cbc:	21 f0       	breq	.+8      	; 0x1cc6 <_ZN12THCInterface25Display_FlashWritePendingEv+0x2c>
		lcd->print("*");
    1cbe:	c9 01       	movw	r24, r18
    1cc0:	68 e1       	ldi	r22, 0x18	; 24
    1cc2:	72 e0       	ldi	r23, 0x02	; 2
    1cc4:	03 c0       	rjmp	.+6      	; 0x1ccc <_ZN12THCInterface25Display_FlashWritePendingEv+0x32>
	else
		lcd->print(" ");
    1cc6:	c9 01       	movw	r24, r18
    1cc8:	6a e1       	ldi	r22, 0x1A	; 26
    1cca:	72 e0       	ldi	r23, 0x02	; 2
    1ccc:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
	}
    1cd0:	df 91       	pop	r29
    1cd2:	cf 91       	pop	r28
    1cd4:	08 95       	ret

00001cd6 <_ZN12THCInterface20setFlashWritePendingEb>:
	}
#endif



void THCInterface::setFlashWritePending(bool pending)
    1cd6:	fc 01       	movw	r30, r24
	{

	if (flashWritePending == pending)
    1cd8:	80 8d       	ldd	r24, Z+24	; 0x18
    1cda:	86 17       	cp	r24, r22
    1cdc:	21 f0       	breq	.+8      	; 0x1ce6 <_ZN12THCInterface20setFlashWritePendingEb+0x10>
		return;

	flashWritePending = pending;
    1cde:	60 8f       	std	Z+24, r22	; 0x18
	Display_FlashWritePending();
    1ce0:	cf 01       	movw	r24, r30
    1ce2:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <_ZN12THCInterface25Display_FlashWritePendingEv>
    1ce6:	08 95       	ret

00001ce8 <_ZN12THCInterface7ArcGoodEb>:
	}




void THCInterface::ArcGood(bool state)
    1ce8:	cf 93       	push	r28
    1cea:	df 93       	push	r29
    1cec:	ec 01       	movw	r28, r24
	{
	arcGood = state;
    1cee:	6b 8b       	std	Y+19, r22	; 0x13

	if ((currentMenu == MENU_OPERATING) ||
    1cf0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf2:	9b 81       	ldd	r25, Y+3	; 0x03
    1cf4:	00 97       	sbiw	r24, 0x00	; 0
    1cf6:	29 f0       	breq	.+10     	; 0x1d02 <_ZN12THCInterface7ArcGoodEb+0x1a>
    1cf8:	86 30       	cpi	r24, 0x06	; 6
    1cfa:	91 05       	cpc	r25, r1
    1cfc:	11 f0       	breq	.+4      	; 0x1d02 <_ZN12THCInterface7ArcGoodEb+0x1a>
    1cfe:	07 97       	sbiw	r24, 0x07	; 7
    1d00:	a1 f4       	brne	.+40     	; 0x1d2a <_ZN12THCInterface7ArcGoodEb+0x42>
		(currentMenu == MENU_BYPASS) ||
		(currentMenu == MENU_CRUISE_MODE))
		{
		lcd->setCursor(2, 1);
    1d02:	88 81       	ld	r24, Y
    1d04:	99 81       	ldd	r25, Y+1	; 0x01
    1d06:	62 e0       	ldi	r22, 0x02	; 2
    1d08:	41 e0       	ldi	r20, 0x01	; 1
    1d0a:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
		if (arcGood)
    1d0e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d10:	28 81       	ld	r18, Y
    1d12:	39 81       	ldd	r19, Y+1	; 0x01
    1d14:	88 23       	and	r24, r24
    1d16:	21 f0       	breq	.+8      	; 0x1d20 <_ZN12THCInterface7ArcGoodEb+0x38>
			lcd->print("1");
    1d18:	c9 01       	movw	r24, r18
    1d1a:	6c e1       	ldi	r22, 0x1C	; 28
    1d1c:	72 e0       	ldi	r23, 0x02	; 2
    1d1e:	03 c0       	rjmp	.+6      	; 0x1d26 <_ZN12THCInterface7ArcGoodEb+0x3e>
		else
			lcd->print("0");
    1d20:	c9 01       	movw	r24, r18
    1d22:	6e e1       	ldi	r22, 0x1E	; 30
    1d24:	72 e0       	ldi	r23, 0x02	; 2
    1d26:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
		}
	}
    1d2a:	df 91       	pop	r29
    1d2c:	cf 91       	pop	r28
    1d2e:	08 95       	ret

00001d30 <_ZN12THCInterface16Display_THCStateEv>:
	}




void THCInterface::Display_THCState(void)
    1d30:	cf 93       	push	r28
    1d32:	df 93       	push	r29
    1d34:	ec 01       	movw	r28, r24
	{
	lcd->setCursor(13, 0);
    1d36:	88 81       	ld	r24, Y
    1d38:	99 81       	ldd	r25, Y+1	; 0x01
    1d3a:	6d e0       	ldi	r22, 0x0D	; 13
    1d3c:	40 e0       	ldi	r20, 0x00	; 0
    1d3e:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>

	switch (currentTHCState)
    1d42:	8e 89       	ldd	r24, Y+22	; 0x16
    1d44:	9f 89       	ldd	r25, Y+23	; 0x17
    1d46:	00 97       	sbiw	r24, 0x00	; 0
    1d48:	19 f0       	breq	.+6      	; 0x1d50 <_ZN12THCInterface16Display_THCStateEv+0x20>
    1d4a:	01 97       	sbiw	r24, 0x01	; 1
    1d4c:	61 f4       	brne	.+24     	; 0x1d66 <_ZN12THCInterface16Display_THCStateEv+0x36>
    1d4e:	05 c0       	rjmp	.+10     	; 0x1d5a <_ZN12THCInterface16Display_THCStateEv+0x2a>
		{
		case THC_STATE_ENABLED:
			lcd->print("ENA");
    1d50:	88 81       	ld	r24, Y
    1d52:	99 81       	ldd	r25, Y+1	; 0x01
    1d54:	60 e2       	ldi	r22, 0x20	; 32
    1d56:	72 e0       	ldi	r23, 0x02	; 2
    1d58:	04 c0       	rjmp	.+8      	; 0x1d62 <_ZN12THCInterface16Display_THCStateEv+0x32>
			break;
		case THC_STATE_CUTTING:
			lcd->print("CUT");
    1d5a:	88 81       	ld	r24, Y
    1d5c:	99 81       	ldd	r25, Y+1	; 0x01
    1d5e:	64 e2       	ldi	r22, 0x24	; 36
    1d60:	72 e0       	ldi	r23, 0x02	; 2
    1d62:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
			break;
		}
	}
    1d66:	df 91       	pop	r29
    1d68:	cf 91       	pop	r28
    1d6a:	08 95       	ret

00001d6c <_ZN12THCInterface11setTHCStateE10THCState_e>:
	}




void THCInterface::setTHCState(THCState_e currentState)
    1d6c:	fc 01       	movw	r30, r24
	{
	if (currentState == currentTHCState)
    1d6e:	86 89       	ldd	r24, Z+22	; 0x16
    1d70:	97 89       	ldd	r25, Z+23	; 0x17
    1d72:	68 17       	cp	r22, r24
    1d74:	79 07       	cpc	r23, r25
    1d76:	29 f0       	breq	.+10     	; 0x1d82 <_ZN12THCInterface11setTHCStateE10THCState_e+0x16>
		return;

	currentTHCState = currentState;
    1d78:	77 8b       	std	Z+23, r23	; 0x17
    1d7a:	66 8b       	std	Z+22, r22	; 0x16

	Display_THCState();
    1d7c:	cf 01       	movw	r24, r30
    1d7e:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <_ZN12THCInterface16Display_THCStateEv>
    1d82:	08 95       	ret

00001d84 <_ZN12THCInterface18Display_TorchStateEv>:
	}




void THCInterface::Display_TorchState(void)
    1d84:	cf 93       	push	r28
    1d86:	df 93       	push	r29
    1d88:	ec 01       	movw	r28, r24
	{

	switch (torchState)
    1d8a:	8c 89       	ldd	r24, Y+20	; 0x14
    1d8c:	9d 89       	ldd	r25, Y+21	; 0x15
    1d8e:	82 30       	cpi	r24, 0x02	; 2
    1d90:	91 05       	cpc	r25, r1
    1d92:	81 f1       	breq	.+96     	; 0x1df4 <_ZN12THCInterface18Display_TorchStateEv+0x70>
    1d94:	83 30       	cpi	r24, 0x03	; 3
    1d96:	91 05       	cpc	r25, r1
    1d98:	34 f4       	brge	.+12     	; 0x1da6 <_ZN12THCInterface18Display_TorchStateEv+0x22>
    1d9a:	00 97       	sbiw	r24, 0x00	; 0
    1d9c:	59 f0       	breq	.+22     	; 0x1db4 <_ZN12THCInterface18Display_TorchStateEv+0x30>
    1d9e:	01 97       	sbiw	r24, 0x01	; 1
    1da0:	09 f0       	breq	.+2      	; 0x1da4 <_ZN12THCInterface18Display_TorchStateEv+0x20>
    1da2:	4a c0       	rjmp	.+148    	; 0x1e38 <_ZN12THCInterface18Display_TorchStateEv+0xb4>
    1da4:	16 c0       	rjmp	.+44     	; 0x1dd2 <_ZN12THCInterface18Display_TorchStateEv+0x4e>
    1da6:	83 30       	cpi	r24, 0x03	; 3
    1da8:	91 05       	cpc	r25, r1
    1daa:	d1 f1       	breq	.+116    	; 0x1e20 <_ZN12THCInterface18Display_TorchStateEv+0x9c>
    1dac:	04 97       	sbiw	r24, 0x04	; 4
    1dae:	09 f0       	breq	.+2      	; 0x1db2 <_ZN12THCInterface18Display_TorchStateEv+0x2e>
    1db0:	43 c0       	rjmp	.+134    	; 0x1e38 <_ZN12THCInterface18Display_TorchStateEv+0xb4>
    1db2:	2b c0       	rjmp	.+86     	; 0x1e0a <_ZN12THCInterface18Display_TorchStateEv+0x86>
		{
		case TORCH_STATE_UP:
			// Set the cursor location.
			lcd->setCursor(15, 1);
    1db4:	88 81       	ld	r24, Y
    1db6:	99 81       	ldd	r25, Y+1	; 0x01
    1db8:	6f e0       	ldi	r22, 0x0F	; 15
    1dba:	41 e0       	ldi	r20, 0x01	; 1
    1dbc:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
			lcd->write((uint8_t) UP_TORCH_SYM);
    1dc0:	e8 81       	ld	r30, Y
    1dc2:	f9 81       	ldd	r31, Y+1	; 0x01
    1dc4:	a0 81       	ld	r26, Z
    1dc6:	b1 81       	ldd	r27, Z+1	; 0x01
    1dc8:	2d 91       	ld	r18, X+
    1dca:	3c 91       	ld	r19, X
    1dcc:	cf 01       	movw	r24, r30
    1dce:	64 e0       	ldi	r22, 0x04	; 4
    1dd0:	0e c0       	rjmp	.+28     	; 0x1dee <_ZN12THCInterface18Display_TorchStateEv+0x6a>
			break;

		case TORCH_STATE_DOWN:
			// Set the cursor location.
			lcd->setCursor(15, 1);
    1dd2:	88 81       	ld	r24, Y
    1dd4:	99 81       	ldd	r25, Y+1	; 0x01
    1dd6:	6f e0       	ldi	r22, 0x0F	; 15
    1dd8:	41 e0       	ldi	r20, 0x01	; 1
    1dda:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
			lcd->write((uint8_t) DOWN_TORCH_SYM);
    1dde:	e8 81       	ld	r30, Y
    1de0:	f9 81       	ldd	r31, Y+1	; 0x01
    1de2:	a0 81       	ld	r26, Z
    1de4:	b1 81       	ldd	r27, Z+1	; 0x01
    1de6:	2d 91       	ld	r18, X+
    1de8:	3c 91       	ld	r19, X
    1dea:	cf 01       	movw	r24, r30
    1dec:	65 e0       	ldi	r22, 0x05	; 5
    1dee:	f9 01       	movw	r30, r18
    1df0:	19 95       	eicall
    1df2:	22 c0       	rjmp	.+68     	; 0x1e38 <_ZN12THCInterface18Display_TorchStateEv+0xb4>
			break;

		case TORCH_STATE_GOOD:
			// Set the cursor location.
			lcd->setCursor(14, 1);
    1df4:	88 81       	ld	r24, Y
    1df6:	99 81       	ldd	r25, Y+1	; 0x01
    1df8:	6e e0       	ldi	r22, 0x0E	; 14
    1dfa:	41 e0       	ldi	r20, 0x01	; 1
    1dfc:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
			lcd->print("OK");
    1e00:	88 81       	ld	r24, Y
    1e02:	99 81       	ldd	r25, Y+1	; 0x01
    1e04:	68 e2       	ldi	r22, 0x28	; 40
    1e06:	72 e0       	ldi	r23, 0x02	; 2
    1e08:	15 c0       	rjmp	.+42     	; 0x1e34 <_ZN12THCInterface18Display_TorchStateEv+0xb0>
			break;

		case TORCH_STATE_KERF:
			// Set the cursor location.
			lcd->setCursor(14, 1);
    1e0a:	88 81       	ld	r24, Y
    1e0c:	99 81       	ldd	r25, Y+1	; 0x01
    1e0e:	6e e0       	ldi	r22, 0x0E	; 14
    1e10:	41 e0       	ldi	r20, 0x01	; 1
    1e12:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
			lcd->print("KF");
    1e16:	88 81       	ld	r24, Y
    1e18:	99 81       	ldd	r25, Y+1	; 0x01
    1e1a:	6b e2       	ldi	r22, 0x2B	; 43
    1e1c:	72 e0       	ldi	r23, 0x02	; 2
    1e1e:	0a c0       	rjmp	.+20     	; 0x1e34 <_ZN12THCInterface18Display_TorchStateEv+0xb0>
			break;

		case TORCH_STATE_NONE:
			// Set the cursor location.
			lcd->setCursor(14, 1);
    1e20:	88 81       	ld	r24, Y
    1e22:	99 81       	ldd	r25, Y+1	; 0x01
    1e24:	6e e0       	ldi	r22, 0x0E	; 14
    1e26:	41 e0       	ldi	r20, 0x01	; 1
    1e28:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
			lcd->print("--");
    1e2c:	88 81       	ld	r24, Y
    1e2e:	99 81       	ldd	r25, Y+1	; 0x01
    1e30:	6e e2       	ldi	r22, 0x2E	; 46
    1e32:	72 e0       	ldi	r23, 0x02	; 2
    1e34:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
			break;
		}
	}
    1e38:	df 91       	pop	r29
    1e3a:	cf 91       	pop	r28
    1e3c:	08 95       	ret

00001e3e <_ZN12THCInterface13SetTorchStateE12TorchState_e>:
	}




void THCInterface::SetTorchState(TorchState_e newState)
    1e3e:	fc 01       	movw	r30, r24
	{

	if (newState == torchState)
    1e40:	84 89       	ldd	r24, Z+20	; 0x14
    1e42:	95 89       	ldd	r25, Z+21	; 0x15
    1e44:	68 17       	cp	r22, r24
    1e46:	79 07       	cpc	r23, r25
    1e48:	29 f0       	breq	.+10     	; 0x1e54 <_ZN12THCInterface13SetTorchStateE12TorchState_e+0x16>
		return;

	torchState = newState;
    1e4a:	75 8b       	std	Z+21, r23	; 0x15
    1e4c:	64 8b       	std	Z+20, r22	; 0x14
	Display_TorchState();
    1e4e:	cf 01       	movw	r24, r30
    1e50:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <_ZN12THCInterface18Display_TorchStateEv>
    1e54:	08 95       	ret

00001e56 <_ZN12THCInterface7TorchOnEb>:
	}




void THCInterface::TorchOn(bool state)
    1e56:	cf 93       	push	r28
    1e58:	df 93       	push	r29
    1e5a:	ec 01       	movw	r28, r24
	{
	torchOn = state;
    1e5c:	6a 8b       	std	Y+18, r22	; 0x12

	if ( (currentMenu == MENU_OPERATING) ||
    1e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e60:	9b 81       	ldd	r25, Y+3	; 0x03
    1e62:	00 97       	sbiw	r24, 0x00	; 0
    1e64:	29 f0       	breq	.+10     	; 0x1e70 <_ZN12THCInterface7TorchOnEb+0x1a>
    1e66:	86 30       	cpi	r24, 0x06	; 6
    1e68:	91 05       	cpc	r25, r1
    1e6a:	11 f0       	breq	.+4      	; 0x1e70 <_ZN12THCInterface7TorchOnEb+0x1a>
    1e6c:	07 97       	sbiw	r24, 0x07	; 7
    1e6e:	a1 f4       	brne	.+40     	; 0x1e98 <_ZN12THCInterface7TorchOnEb+0x42>
		 (currentMenu == MENU_BYPASS) ||
		 (currentMenu == MENU_CRUISE_MODE))
		{
		lcd->setCursor(2, 0);
    1e70:	88 81       	ld	r24, Y
    1e72:	99 81       	ldd	r25, Y+1	; 0x01
    1e74:	62 e0       	ldi	r22, 0x02	; 2
    1e76:	40 e0       	ldi	r20, 0x00	; 0
    1e78:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
		if (torchOn)
    1e7c:	8a 89       	ldd	r24, Y+18	; 0x12
    1e7e:	28 81       	ld	r18, Y
    1e80:	39 81       	ldd	r19, Y+1	; 0x01
    1e82:	88 23       	and	r24, r24
    1e84:	21 f0       	breq	.+8      	; 0x1e8e <_ZN12THCInterface7TorchOnEb+0x38>
			lcd->print("1");
    1e86:	c9 01       	movw	r24, r18
    1e88:	6c e1       	ldi	r22, 0x1C	; 28
    1e8a:	72 e0       	ldi	r23, 0x02	; 2
    1e8c:	03 c0       	rjmp	.+6      	; 0x1e94 <_ZN12THCInterface7TorchOnEb+0x3e>
		else
			lcd->print("0");
    1e8e:	c9 01       	movw	r24, r18
    1e90:	6e e1       	ldi	r22, 0x1E	; 30
    1e92:	72 e0       	ldi	r23, 0x02	; 2
    1e94:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
		}
	}
    1e98:	df 91       	pop	r29
    1e9a:	cf 91       	pop	r28
    1e9c:	08 95       	ret

00001e9e <_ZN12THCInterface6splashEPc>:
	}




void THCInterface::splash(char *version)
    1e9e:	ef 92       	push	r14
    1ea0:	ff 92       	push	r15
    1ea2:	0f 93       	push	r16
    1ea4:	1f 93       	push	r17
    1ea6:	8c 01       	movw	r16, r24
    1ea8:	7b 01       	movw	r14, r22
	{
	lcd->setCursor(0, 0);
    1eaa:	fc 01       	movw	r30, r24
    1eac:	80 81       	ld	r24, Z
    1eae:	91 81       	ldd	r25, Z+1	; 0x01
    1eb0:	60 e0       	ldi	r22, 0x00	; 0
    1eb2:	40 e0       	ldi	r20, 0x00	; 0
    1eb4:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
	lcd->print("Rege-o-matic");
    1eb8:	f8 01       	movw	r30, r16
    1eba:	80 81       	ld	r24, Z
    1ebc:	91 81       	ldd	r25, Z+1	; 0x01
    1ebe:	61 e3       	ldi	r22, 0x31	; 49
    1ec0:	72 e0       	ldi	r23, 0x02	; 2
    1ec2:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
	lcd->setCursor(0, 1);
    1ec6:	f8 01       	movw	r30, r16
    1ec8:	80 81       	ld	r24, Z
    1eca:	91 81       	ldd	r25, Z+1	; 0x01
    1ecc:	60 e0       	ldi	r22, 0x00	; 0
    1ece:	41 e0       	ldi	r20, 0x01	; 1
    1ed0:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
	lcd->print("Plasma I/F: V");
    1ed4:	f8 01       	movw	r30, r16
    1ed6:	80 81       	ld	r24, Z
    1ed8:	91 81       	ldd	r25, Z+1	; 0x01
    1eda:	6e e3       	ldi	r22, 0x3E	; 62
    1edc:	72 e0       	ldi	r23, 0x02	; 2
    1ede:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
	lcd->setCursor(13, 1);
    1ee2:	f8 01       	movw	r30, r16
    1ee4:	80 81       	ld	r24, Z
    1ee6:	91 81       	ldd	r25, Z+1	; 0x01
    1ee8:	6d e0       	ldi	r22, 0x0D	; 13
    1eea:	41 e0       	ldi	r20, 0x01	; 1
    1eec:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
	lcd->print(version);
    1ef0:	f8 01       	movw	r30, r16
    1ef2:	80 81       	ld	r24, Z
    1ef4:	91 81       	ldd	r25, Z+1	; 0x01
    1ef6:	b7 01       	movw	r22, r14
    1ef8:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
	}
    1efc:	1f 91       	pop	r17
    1efe:	0f 91       	pop	r16
    1f00:	ff 90       	pop	r15
    1f02:	ef 90       	pop	r14
    1f04:	08 95       	ret

00001f06 <_ZN12THCInterface5clearEv>:
	}




void THCInterface::clear(void)
    1f06:	fc 01       	movw	r30, r24
	{
	lcd->clear();
    1f08:	80 81       	ld	r24, Z
    1f0a:	91 81       	ldd	r25, Z+1	; 0x01
    1f0c:	0e 94 69 19 	call	0x32d2	; 0x32d2 <_ZN13LiquidCrystal5clearEv>
	}
    1f10:	08 95       	ret

00001f12 <_ZN12THCInterface11initDisplayEv>:
	}




void THCInterface::initDisplay()
    1f12:	0f 93       	push	r16
    1f14:	1f 93       	push	r17
    1f16:	8c 01       	movw	r16, r24
	{
	// Initialize the LCD display with the fixed values
	lcd->clear();
    1f18:	fc 01       	movw	r30, r24
    1f1a:	80 81       	ld	r24, Z
    1f1c:	91 81       	ldd	r25, Z+1	; 0x01
    1f1e:	0e 94 69 19 	call	0x32d2	; 0x32d2 <_ZN13LiquidCrystal5clearEv>
	lcd->setCursor(0, 0);
    1f22:	f8 01       	movw	r30, r16
    1f24:	80 81       	ld	r24, Z
    1f26:	91 81       	ldd	r25, Z+1	; 0x01
    1f28:	60 e0       	ldi	r22, 0x00	; 0
    1f2a:	40 e0       	ldi	r20, 0x00	; 0
    1f2c:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
	lcd->print("T:");
    1f30:	f8 01       	movw	r30, r16
    1f32:	80 81       	ld	r24, Z
    1f34:	91 81       	ldd	r25, Z+1	; 0x01
    1f36:	6c e4       	ldi	r22, 0x4C	; 76
    1f38:	72 e0       	ldi	r23, 0x02	; 2
    1f3a:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
	lcd->setCursor(0, 1);
    1f3e:	f8 01       	movw	r30, r16
    1f40:	80 81       	ld	r24, Z
    1f42:	91 81       	ldd	r25, Z+1	; 0x01
    1f44:	60 e0       	ldi	r22, 0x00	; 0
    1f46:	41 e0       	ldi	r20, 0x01	; 1
    1f48:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
	lcd->print("A:");
    1f4c:	f8 01       	movw	r30, r16
    1f4e:	80 81       	ld	r24, Z
    1f50:	91 81       	ldd	r25, Z+1	; 0x01
    1f52:	6f e4       	ldi	r22, 0x4F	; 79
    1f54:	72 e0       	ldi	r23, 0x02	; 2
    1f56:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
	lcd->setCursor(4, 0);
    1f5a:	f8 01       	movw	r30, r16
    1f5c:	80 81       	ld	r24, Z
    1f5e:	91 81       	ldd	r25, Z+1	; 0x01
    1f60:	64 e0       	ldi	r22, 0x04	; 4
    1f62:	40 e0       	ldi	r20, 0x00	; 0
    1f64:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
	lcd->print("TGT:");
    1f68:	f8 01       	movw	r30, r16
    1f6a:	80 81       	ld	r24, Z
    1f6c:	91 81       	ldd	r25, Z+1	; 0x01
    1f6e:	62 e5       	ldi	r22, 0x52	; 82
    1f70:	72 e0       	ldi	r23, 0x02	; 2
    1f72:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
	lcd->setCursor(4, 1);
    1f76:	f8 01       	movw	r30, r16
    1f78:	80 81       	ld	r24, Z
    1f7a:	91 81       	ldd	r25, Z+1	; 0x01
    1f7c:	64 e0       	ldi	r22, 0x04	; 4
    1f7e:	41 e0       	ldi	r20, 0x01	; 1
    1f80:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
	lcd->print("NOW:");
    1f84:	f8 01       	movw	r30, r16
    1f86:	80 81       	ld	r24, Z
    1f88:	91 81       	ldd	r25, Z+1	; 0x01
    1f8a:	67 e5       	ldi	r22, 0x57	; 87
    1f8c:	72 e0       	ldi	r23, 0x02	; 2
    1f8e:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
	//Display_Operating_TargetVoltage(0);
	//Display_Operating_CurrentVoltage(0);

	}
    1f92:	1f 91       	pop	r17
    1f94:	0f 91       	pop	r16
    1f96:	08 95       	ret

00001f98 <_ZN12THCInterface22Display_CurrentVoltageEj>:
	}




void THCInterface::Display_CurrentVoltage(unsigned int voltage)
    1f98:	0f 93       	push	r16
    1f9a:	1f 93       	push	r17
    1f9c:	cf 93       	push	r28
    1f9e:	df 93       	push	r29
    1fa0:	8c 01       	movw	r16, r24
    1fa2:	eb 01       	movw	r28, r22
	{
	uint16_t temp;

	if (voltage == curVolt)
    1fa4:	fc 01       	movw	r30, r24
    1fa6:	80 89       	ldd	r24, Z+16	; 0x10
    1fa8:	91 89       	ldd	r25, Z+17	; 0x11
    1faa:	68 17       	cp	r22, r24
    1fac:	79 07       	cpc	r23, r25
    1fae:	09 f4       	brne	.+2      	; 0x1fb2 <_ZN12THCInterface22Display_CurrentVoltageEj+0x1a>
    1fb0:	47 c0       	rjmp	.+142    	; 0x2040 <_ZN12THCInterface22Display_CurrentVoltageEj+0xa8>
		return;

	curVolt = voltage;
    1fb2:	71 8b       	std	Z+17, r23	; 0x11
    1fb4:	60 8b       	std	Z+16, r22	; 0x10
	if ((currentMenu != MENU_OPERATING) &&
    1fb6:	82 81       	ldd	r24, Z+2	; 0x02
    1fb8:	93 81       	ldd	r25, Z+3	; 0x03
    1fba:	00 97       	sbiw	r24, 0x00	; 0
    1fbc:	29 f0       	breq	.+10     	; 0x1fc8 <_ZN12THCInterface22Display_CurrentVoltageEj+0x30>
    1fbe:	86 30       	cpi	r24, 0x06	; 6
    1fc0:	91 05       	cpc	r25, r1
    1fc2:	11 f0       	breq	.+4      	; 0x1fc8 <_ZN12THCInterface22Display_CurrentVoltageEj+0x30>
    1fc4:	07 97       	sbiw	r24, 0x07	; 7
    1fc6:	e1 f5       	brne	.+120    	; 0x2040 <_ZN12THCInterface22Display_CurrentVoltageEj+0xa8>
		(currentMenu != MENU_BYPASS) &&
		(currentMenu != MENU_CRUISE_MODE))
		return;

	lcd->setCursor(8, 1);
    1fc8:	f8 01       	movw	r30, r16
    1fca:	80 81       	ld	r24, Z
    1fcc:	91 81       	ldd	r25, Z+1	; 0x01
    1fce:	68 e0       	ldi	r22, 0x08	; 8
    1fd0:	41 e0       	ldi	r20, 0x01	; 1
    1fd2:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
	if (curVolt > 999)
    1fd6:	f8 01       	movw	r30, r16
    1fd8:	80 89       	ldd	r24, Z+16	; 0x10
    1fda:	91 89       	ldd	r25, Z+17	; 0x11
    1fdc:	88 5e       	subi	r24, 0xE8	; 232
    1fde:	93 40       	sbci	r25, 0x03	; 3
    1fe0:	40 f0       	brcs	.+16     	; 0x1ff2 <_ZN12THCInterface22Display_CurrentVoltageEj+0x5a>
		{
		lcd->print("FFF");
    1fe2:	f8 01       	movw	r30, r16
    1fe4:	80 81       	ld	r24, Z
    1fe6:	91 81       	ldd	r25, Z+1	; 0x01
    1fe8:	6c e5       	ldi	r22, 0x5C	; 92
    1fea:	72 e0       	ldi	r23, 0x02	; 2
    1fec:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
    1ff0:	27 c0       	rjmp	.+78     	; 0x2040 <_ZN12THCInterface22Display_CurrentVoltageEj+0xa8>
		return;
		}

	if (currentStateData.currentUnit == THC_UNIT_VOLTS)
    1ff2:	80 91 47 05 	lds	r24, 0x0547
    1ff6:	90 91 48 05 	lds	r25, 0x0548
    1ffa:	02 97       	sbiw	r24, 0x02	; 2
    1ffc:	31 f4       	brne	.+12     	; 0x200a <_ZN12THCInterface22Display_CurrentVoltageEj+0x72>
		voltage /= 7;
    1ffe:	ce 01       	movw	r24, r28
    2000:	67 e0       	ldi	r22, 0x07	; 7
    2002:	70 e0       	ldi	r23, 0x00	; 0
    2004:	0e 94 72 24 	call	0x48e4	; 0x48e4 <__udivmodhi4>
    2008:	eb 01       	movw	r28, r22

	// Determine how many leading zeros to print.
	if (voltage < 10)
    200a:	ca 30       	cpi	r28, 0x0A	; 10
    200c:	d1 05       	cpc	r29, r1
    200e:	30 f4       	brcc	.+12     	; 0x201c <_ZN12THCInterface22Display_CurrentVoltageEj+0x84>
		lcd->print("  ");
    2010:	f8 01       	movw	r30, r16
    2012:	80 81       	ld	r24, Z
    2014:	91 81       	ldd	r25, Z+1	; 0x01
    2016:	60 e6       	ldi	r22, 0x60	; 96
    2018:	72 e0       	ldi	r23, 0x02	; 2
    201a:	08 c0       	rjmp	.+16     	; 0x202c <_ZN12THCInterface22Display_CurrentVoltageEj+0x94>
	else if (voltage < 100)
    201c:	c4 36       	cpi	r28, 0x64	; 100
    201e:	d1 05       	cpc	r29, r1
    2020:	38 f4       	brcc	.+14     	; 0x2030 <_ZN12THCInterface22Display_CurrentVoltageEj+0x98>
		lcd->print(" ");
    2022:	f8 01       	movw	r30, r16
    2024:	80 81       	ld	r24, Z
    2026:	91 81       	ldd	r25, Z+1	; 0x01
    2028:	6a e1       	ldi	r22, 0x1A	; 26
    202a:	72 e0       	ldi	r23, 0x02	; 2
    202c:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
	lcd->print(voltage);
    2030:	f8 01       	movw	r30, r16
    2032:	80 81       	ld	r24, Z
    2034:	91 81       	ldd	r25, Z+1	; 0x01
    2036:	be 01       	movw	r22, r28
    2038:	4a e0       	ldi	r20, 0x0A	; 10
    203a:	50 e0       	ldi	r21, 0x00	; 0
    203c:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <_ZN5Print5printEji>
	}
    2040:	df 91       	pop	r29
    2042:	cf 91       	pop	r28
    2044:	1f 91       	pop	r17
    2046:	0f 91       	pop	r16
    2048:	08 95       	ret

0000204a <_ZN12THCInterface27ForceDisplay_CurrentVoltageEj>:
	}




void THCInterface::ForceDisplay_CurrentVoltage(unsigned int voltage)
    204a:	fc 01       	movw	r30, r24
	{
	curVolt = 0xffff;
    204c:	8f ef       	ldi	r24, 0xFF	; 255
    204e:	9f ef       	ldi	r25, 0xFF	; 255
    2050:	91 8b       	std	Z+17, r25	; 0x11
    2052:	80 8b       	std	Z+16, r24	; 0x10

	Display_CurrentVoltage(voltage);
    2054:	cf 01       	movw	r24, r30
    2056:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <_ZN12THCInterface22Display_CurrentVoltageEj>
	}
    205a:	08 95       	ret

0000205c <_ZN12THCInterface21Display_TargetVoltageEj>:
	}




void THCInterface::Display_TargetVoltage(unsigned int voltage)
    205c:	0f 93       	push	r16
    205e:	1f 93       	push	r17
    2060:	cf 93       	push	r28
    2062:	df 93       	push	r29
    2064:	8c 01       	movw	r16, r24
    2066:	eb 01       	movw	r28, r22
	{
	uint16_t temp;

	lcd->setCursor(8, 0);
    2068:	fc 01       	movw	r30, r24
    206a:	80 81       	ld	r24, Z
    206c:	91 81       	ldd	r25, Z+1	; 0x01
    206e:	68 e0       	ldi	r22, 0x08	; 8
    2070:	40 e0       	ldi	r20, 0x00	; 0
    2072:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
	lcd->print("   ");
    2076:	f8 01       	movw	r30, r16
    2078:	80 81       	ld	r24, Z
    207a:	91 81       	ldd	r25, Z+1	; 0x01
    207c:	63 e6       	ldi	r22, 0x63	; 99
    207e:	72 e0       	ldi	r23, 0x02	; 2
    2080:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
	lcd->setCursor(8, 0);
    2084:	f8 01       	movw	r30, r16
    2086:	80 81       	ld	r24, Z
    2088:	91 81       	ldd	r25, Z+1	; 0x01
    208a:	68 e0       	ldi	r22, 0x08	; 8
    208c:	40 e0       	ldi	r20, 0x00	; 0
    208e:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>

	if (voltage > 1023)
    2092:	f4 e0       	ldi	r31, 0x04	; 4
    2094:	c0 30       	cpi	r28, 0x00	; 0
    2096:	df 07       	cpc	r29, r31
    2098:	40 f0       	brcs	.+16     	; 0x20aa <_ZN12THCInterface21Display_TargetVoltageEj+0x4e>
		lcd->print("FFF");
    209a:	f8 01       	movw	r30, r16
    209c:	80 81       	ld	r24, Z
    209e:	91 81       	ldd	r25, Z+1	; 0x01
    20a0:	6c e5       	ldi	r22, 0x5C	; 92
    20a2:	72 e0       	ldi	r23, 0x02	; 2
    20a4:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
    20a8:	21 c0       	rjmp	.+66     	; 0x20ec <_ZN12THCInterface21Display_TargetVoltageEj+0x90>
	else
		{
		if (currentStateData.currentUnit == THC_UNIT_VOLTS)
    20aa:	80 91 47 05 	lds	r24, 0x0547
    20ae:	90 91 48 05 	lds	r25, 0x0548
    20b2:	02 97       	sbiw	r24, 0x02	; 2
    20b4:	31 f4       	brne	.+12     	; 0x20c2 <_ZN12THCInterface21Display_TargetVoltageEj+0x66>
			temp = voltage / 7;
    20b6:	ce 01       	movw	r24, r28
    20b8:	67 e0       	ldi	r22, 0x07	; 7
    20ba:	70 e0       	ldi	r23, 0x00	; 0
    20bc:	0e 94 72 24 	call	0x48e4	; 0x48e4 <__udivmodhi4>
    20c0:	eb 01       	movw	r28, r22
		else
			temp = voltage;
		if (temp < 100)
    20c2:	c4 36       	cpi	r28, 0x64	; 100
    20c4:	d1 05       	cpc	r29, r1
    20c6:	38 f4       	brcc	.+14     	; 0x20d6 <_ZN12THCInterface21Display_TargetVoltageEj+0x7a>
			lcd->setCursor(9, 0);
    20c8:	f8 01       	movw	r30, r16
    20ca:	80 81       	ld	r24, Z
    20cc:	91 81       	ldd	r25, Z+1	; 0x01
    20ce:	69 e0       	ldi	r22, 0x09	; 9
    20d0:	40 e0       	ldi	r20, 0x00	; 0
    20d2:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
		lcd->print(temp);
    20d6:	f8 01       	movw	r30, r16
    20d8:	80 81       	ld	r24, Z
    20da:	91 81       	ldd	r25, Z+1	; 0x01
    20dc:	be 01       	movw	r22, r28
    20de:	4a e0       	ldi	r20, 0x0A	; 10
    20e0:	50 e0       	ldi	r21, 0x00	; 0
    20e2:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <_ZN5Print5printEji>
		tgtVolt = temp;
    20e6:	f8 01       	movw	r30, r16
    20e8:	d7 87       	std	Z+15, r29	; 0x0f
    20ea:	c6 87       	std	Z+14, r28	; 0x0e
		}
	}
    20ec:	df 91       	pop	r29
    20ee:	cf 91       	pop	r28
    20f0:	1f 91       	pop	r17
    20f2:	0f 91       	pop	r16
    20f4:	08 95       	ret

000020f6 <_ZN12THCInterface7setMenuE6Menu_e>:
	}




void THCInterface::setMenu(Menu_e newMenu)
    20f6:	cf 93       	push	r28
    20f8:	df 93       	push	r29
    20fa:	ec 01       	movw	r28, r24
	DebugPrint("setMenu(<old> ");DebugPrint(currentMenu);DebugPrint(", <new> ");DebugPrint(newMenu);DebugPrintLn(")");

	// If it's already set, don't do anything.
//	if (currentMenu == newMenu)
//		return;
	currentMenu = newMenu;
    20fc:	7b 83       	std	Y+3, r23	; 0x03
    20fe:	6a 83       	std	Y+2, r22	; 0x02

//	if (currentMenu == MENU_OPERATING)
//		return;
	lcd->clear();
    2100:	88 81       	ld	r24, Y
    2102:	99 81       	ldd	r25, Y+1	; 0x01
    2104:	0e 94 69 19 	call	0x32d2	; 0x32d2 <_ZN13LiquidCrystal5clearEv>
	lcd->setCursor(0, 0);
    2108:	88 81       	ld	r24, Y
    210a:	99 81       	ldd	r25, Y+1	; 0x01
    210c:	60 e0       	ldi	r22, 0x00	; 0
    210e:	40 e0       	ldi	r20, 0x00	; 0
    2110:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>

	switch (currentMenu)
    2114:	ea 81       	ldd	r30, Y+2	; 0x02
    2116:	fb 81       	ldd	r31, Y+3	; 0x03
    2118:	e9 31       	cpi	r30, 0x19	; 25
    211a:	f1 05       	cpc	r31, r1
    211c:	08 f0       	brcs	.+2      	; 0x2120 <_ZN12THCInterface7setMenuE6Menu_e+0x2a>
    211e:	c0 c2       	rjmp	.+1408   	; 0x26a0 <__stack+0x4a1>
    2120:	e7 57       	subi	r30, 0x77	; 119
    2122:	ff 4f       	sbci	r31, 0xFF	; 255
    2124:	88 81       	ld	r24, Y
    2126:	99 81       	ldd	r25, Y+1	; 0x01
    2128:	ee 0f       	add	r30, r30
    212a:	ff 1f       	adc	r31, r31
    212c:	05 90       	lpm	r0, Z+
    212e:	f4 91       	lpm	r31, Z+
    2130:	e0 2d       	mov	r30, r0
    2132:	19 94       	eijmp
		{
		case MENU_OPERATING:
			lcd->print("T:");
    2134:	6c e4       	ldi	r22, 0x4C	; 76
    2136:	72 e0       	ldi	r23, 0x02	; 2
    2138:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
			lcd->setCursor(0, 1);
    213c:	88 81       	ld	r24, Y
    213e:	99 81       	ldd	r25, Y+1	; 0x01
    2140:	60 e0       	ldi	r22, 0x00	; 0
    2142:	41 e0       	ldi	r20, 0x01	; 1
    2144:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
			lcd->print("A:");
    2148:	88 81       	ld	r24, Y
    214a:	99 81       	ldd	r25, Y+1	; 0x01
    214c:	6f e4       	ldi	r22, 0x4F	; 79
    214e:	72 e0       	ldi	r23, 0x02	; 2
    2150:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
			lcd->setCursor(4, 0);
    2154:	88 81       	ld	r24, Y
    2156:	99 81       	ldd	r25, Y+1	; 0x01
    2158:	64 e0       	ldi	r22, 0x04	; 4
    215a:	40 e0       	ldi	r20, 0x00	; 0
    215c:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
			lcd->print("TGT:");
    2160:	88 81       	ld	r24, Y
    2162:	99 81       	ldd	r25, Y+1	; 0x01
    2164:	62 e5       	ldi	r22, 0x52	; 82
    2166:	72 e0       	ldi	r23, 0x02	; 2
    2168:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
			lcd->setCursor(4, 1);
    216c:	88 81       	ld	r24, Y
    216e:	99 81       	ldd	r25, Y+1	; 0x01
    2170:	64 e0       	ldi	r22, 0x04	; 4
    2172:	41 e0       	ldi	r20, 0x01	; 1
    2174:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
			lcd->print("NOW:");
    2178:	88 81       	ld	r24, Y
    217a:	99 81       	ldd	r25, Y+1	; 0x01
    217c:	67 e5       	ldi	r22, 0x57	; 87
    217e:	72 e0       	ldi	r23, 0x02	; 2
    2180:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
			Display_TargetVoltage(tgtVolt);
    2184:	6e 85       	ldd	r22, Y+14	; 0x0e
    2186:	7f 85       	ldd	r23, Y+15	; 0x0f
    2188:	ce 01       	movw	r24, r28
    218a:	0e 94 2e 10 	call	0x205c	; 0x205c <_ZN12THCInterface21Display_TargetVoltageEj>
			Display_CurrentVoltage(curVolt);
    218e:	68 89       	ldd	r22, Y+16	; 0x10
    2190:	79 89       	ldd	r23, Y+17	; 0x11
    2192:	ce 01       	movw	r24, r28
    2194:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <_ZN12THCInterface22Display_CurrentVoltageEj>
			TorchOn(currentStateData.torchOnState);
    2198:	60 91 49 05 	lds	r22, 0x0549
    219c:	ce 01       	movw	r24, r28
    219e:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_ZN12THCInterface7TorchOnEb>
			ArcGood(currentStateData.arcGoodState);
    21a2:	60 91 4a 05 	lds	r22, 0x054A
    21a6:	ce 01       	movw	r24, r28
    21a8:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <_ZN12THCInterface7ArcGoodEb>
			Display_TorchState();
    21ac:	ce 01       	movw	r24, r28
    21ae:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <_ZN12THCInterface18Display_TorchStateEv>
			Display_THCState();
    21b2:	ce 01       	movw	r24, r28
    21b4:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <_ZN12THCInterface16Display_THCStateEv>
			Display_FlashWritePending();
    21b8:	ce 01       	movw	r24, r28
    21ba:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <_ZN12THCInterface25Display_FlashWritePendingEv>
    21be:	70 c2       	rjmp	.+1248   	; 0x26a0 <__stack+0x4a1>
			//lcd.print(MenuNames[(int) ])
			break;

		case MENU_USE:
			lcd->print(MenuNames[MENU_USE]);
    21c0:	67 e6       	ldi	r22, 0x67	; 103
    21c2:	72 e0       	ldi	r23, 0x02	; 2
    21c4:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
			lcd->setCursor(0, 1);
    21c8:	88 81       	ld	r24, Y
    21ca:	99 81       	ldd	r25, Y+1	; 0x01
    21cc:	60 e0       	ldi	r22, 0x00	; 0
    21ce:	41 e0       	ldi	r20, 0x01	; 1
    21d0:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
			lcd->write((uint8_t) OKAY_SYM);
    21d4:	a8 81       	ld	r26, Y
    21d6:	b9 81       	ldd	r27, Y+1	; 0x01
    21d8:	ed 91       	ld	r30, X+
    21da:	fc 91       	ld	r31, X
    21dc:	11 97       	sbiw	r26, 0x01	; 1
    21de:	01 90       	ld	r0, Z+
    21e0:	f0 81       	ld	r31, Z
    21e2:	e0 2d       	mov	r30, r0
    21e4:	cd 01       	movw	r24, r26
    21e6:	60 e0       	ldi	r22, 0x00	; 0
    21e8:	19 95       	eicall
			lcd->print(MenuPrompt[MENU_USE]);
    21ea:	60 91 93 04 	lds	r22, 0x0493
    21ee:	70 91 94 04 	lds	r23, 0x0494
    21f2:	01 c2       	rjmp	.+1026   	; 0x25f6 <__stack+0x3f7>
			break;

		case SUBMENU_USE_TIME:
			lcd->print(MenuNames[SUBMENU_USE_TIME]);
    21f4:	67 e7       	ldi	r22, 0x77	; 119
    21f6:	72 e0       	ldi	r23, 0x02	; 2
    21f8:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
			lcd->setCursor(0,1);
    21fc:	88 81       	ld	r24, Y
    21fe:	99 81       	ldd	r25, Y+1	; 0x01
    2200:	60 e0       	ldi	r22, 0x00	; 0
    2202:	41 e0       	ldi	r20, 0x01	; 1
    2204:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
			lcd->print("H:MM:SS ");
    2208:	88 81       	ld	r24, Y
    220a:	99 81       	ldd	r25, Y+1	; 0x01
    220c:	64 e8       	ldi	r22, 0x84	; 132
    220e:	72 e0       	ldi	r23, 0x02	; 2
    2210:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
			lcd->print(usageData.tipHours);
    2214:	60 91 74 05 	lds	r22, 0x0574
    2218:	88 81       	ld	r24, Y
    221a:	99 81       	ldd	r25, Y+1	; 0x01
    221c:	4a e0       	ldi	r20, 0x0A	; 10
    221e:	50 e0       	ldi	r21, 0x00	; 0
    2220:	0e 94 09 20 	call	0x4012	; 0x4012 <_ZN5Print5printEhi>
			lcd->print(":");
    2224:	88 81       	ld	r24, Y
    2226:	99 81       	ldd	r25, Y+1	; 0x01
    2228:	6d e8       	ldi	r22, 0x8D	; 141
    222a:	72 e0       	ldi	r23, 0x02	; 2
    222c:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>

			if (usageData.tipMinutes < 10)
    2230:	80 91 75 05 	lds	r24, 0x0575
    2234:	8a 30       	cpi	r24, 0x0A	; 10
    2236:	30 f4       	brcc	.+12     	; 0x2244 <__stack+0x45>
				lcd->print("0");
    2238:	88 81       	ld	r24, Y
    223a:	99 81       	ldd	r25, Y+1	; 0x01
    223c:	6e e1       	ldi	r22, 0x1E	; 30
    223e:	72 e0       	ldi	r23, 0x02	; 2
    2240:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
			lcd->print(usageData.tipMinutes);
    2244:	60 91 75 05 	lds	r22, 0x0575
    2248:	88 81       	ld	r24, Y
    224a:	99 81       	ldd	r25, Y+1	; 0x01
    224c:	4a e0       	ldi	r20, 0x0A	; 10
    224e:	50 e0       	ldi	r21, 0x00	; 0
    2250:	0e 94 09 20 	call	0x4012	; 0x4012 <_ZN5Print5printEhi>
			lcd->print(":");
    2254:	88 81       	ld	r24, Y
    2256:	99 81       	ldd	r25, Y+1	; 0x01
    2258:	6d e8       	ldi	r22, 0x8D	; 141
    225a:	72 e0       	ldi	r23, 0x02	; 2
    225c:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
			if (usageData.tipSeconds < 10)
    2260:	80 91 76 05 	lds	r24, 0x0576
    2264:	8a 30       	cpi	r24, 0x0A	; 10
    2266:	30 f4       	brcc	.+12     	; 0x2274 <__stack+0x75>
				lcd->print("0");
    2268:	88 81       	ld	r24, Y
    226a:	99 81       	ldd	r25, Y+1	; 0x01
    226c:	6e e1       	ldi	r22, 0x1E	; 30
    226e:	72 e0       	ldi	r23, 0x02	; 2
    2270:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
			lcd->print(usageData.tipSeconds);
    2274:	60 91 76 05 	lds	r22, 0x0576
    2278:	69 c0       	rjmp	.+210    	; 0x234c <__stack+0x14d>
			break;

		case SUBMENU_USE_ARC_CNT:
			lcd->print(MenuNames[SUBMENU_USE_ARC_CNT]);
    227a:	6f e8       	ldi	r22, 0x8F	; 143
    227c:	72 e0       	ldi	r23, 0x02	; 2
    227e:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
			lcd->setCursor(0,1);
    2282:	88 81       	ld	r24, Y
    2284:	99 81       	ldd	r25, Y+1	; 0x01
    2286:	60 e0       	ldi	r22, 0x00	; 0
    2288:	41 e0       	ldi	r20, 0x01	; 1
    228a:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
			lcd->print(MenuPrompt[SUBMENU_USE_ARC_CNT]);
    228e:	60 91 a3 04 	lds	r22, 0x04A3
    2292:	70 91 a4 04 	lds	r23, 0x04A4
    2296:	88 81       	ld	r24, Y
    2298:	99 81       	ldd	r25, Y+1	; 0x01
    229a:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
			lcd->print(usageData.pilotArcCount);
    229e:	60 91 70 05 	lds	r22, 0x0570
    22a2:	70 91 71 05 	lds	r23, 0x0571
    22a6:	16 c0       	rjmp	.+44     	; 0x22d4 <__stack+0xd5>
			break;

		case SUBMENU_USE_PLUNGE_CNT:
			lcd->print(MenuNames[SUBMENU_USE_PLUNGE_CNT]);
    22a8:	6d e9       	ldi	r22, 0x9D	; 157
    22aa:	72 e0       	ldi	r23, 0x02	; 2
    22ac:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
			lcd->setCursor(0,1);
    22b0:	88 81       	ld	r24, Y
    22b2:	99 81       	ldd	r25, Y+1	; 0x01
    22b4:	60 e0       	ldi	r22, 0x00	; 0
    22b6:	41 e0       	ldi	r20, 0x01	; 1
    22b8:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
			lcd->print(MenuPrompt[SUBMENU_USE_PLUNGE_CNT]);
    22bc:	60 91 a5 04 	lds	r22, 0x04A5
    22c0:	70 91 a6 04 	lds	r23, 0x04A6
    22c4:	88 81       	ld	r24, Y
    22c6:	99 81       	ldd	r25, Y+1	; 0x01
    22c8:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
			lcd->print(usageData.pierceCount);
    22cc:	60 91 72 05 	lds	r22, 0x0572
    22d0:	70 91 73 05 	lds	r23, 0x0573
    22d4:	88 81       	ld	r24, Y
    22d6:	99 81       	ldd	r25, Y+1	; 0x01
    22d8:	4a e0       	ldi	r20, 0x0A	; 10
    22da:	50 e0       	ldi	r21, 0x00	; 0
    22dc:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <_ZN5Print5printEji>
    22e0:	df c1       	rjmp	.+958    	; 0x26a0 <__stack+0x4a1>
			break;

		case SUBMENU_USE_FLASH_CNT:
			lcd->print(MenuNames[SUBMENU_USE_FLASH_CNT]);
    22e2:	6e ea       	ldi	r22, 0xAE	; 174
    22e4:	72 e0       	ldi	r23, 0x02	; 2
    22e6:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
			lcd->setCursor(0,1);
    22ea:	88 81       	ld	r24, Y
    22ec:	99 81       	ldd	r25, Y+1	; 0x01
    22ee:	60 e0       	ldi	r22, 0x00	; 0
    22f0:	41 e0       	ldi	r20, 0x01	; 1
    22f2:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
			lcd->print(MenuPrompt[SUBMENU_USE_FLASH_CNT]);
    22f6:	60 91 a7 04 	lds	r22, 0x04A7
    22fa:	70 91 a8 04 	lds	r23, 0x04A8
    22fe:	88 81       	ld	r24, Y
    2300:	99 81       	ldd	r25, Y+1	; 0x01
    2302:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
			lcd->print(usageData.initialWriteCount);
    2306:	40 91 7b 05 	lds	r20, 0x057B
    230a:	50 91 7c 05 	lds	r21, 0x057C
    230e:	60 91 7d 05 	lds	r22, 0x057D
    2312:	70 91 7e 05 	lds	r23, 0x057E
    2316:	88 81       	ld	r24, Y
    2318:	99 81       	ldd	r25, Y+1	; 0x01
    231a:	2a e0       	ldi	r18, 0x0A	; 10
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <_ZN5Print5printEmi>
    2322:	be c1       	rjmp	.+892    	; 0x26a0 <__stack+0x4a1>
			break;

		case SUBMENU_USE_FLASH_BLOCK:
			lcd->print(MenuNames[SUBMENU_USE_FLASH_BLOCK]);
    2324:	6f eb       	ldi	r22, 0xBF	; 191
    2326:	72 e0       	ldi	r23, 0x02	; 2
    2328:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
			lcd->setCursor(0,1);
    232c:	88 81       	ld	r24, Y
    232e:	99 81       	ldd	r25, Y+1	; 0x01
    2330:	60 e0       	ldi	r22, 0x00	; 0
    2332:	41 e0       	ldi	r20, 0x01	; 1
    2334:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
			lcd->print(MenuPrompt[SUBMENU_USE_FLASH_BLOCK]);
    2338:	60 91 a9 04 	lds	r22, 0x04A9
    233c:	70 91 aa 04 	lds	r23, 0x04AA
    2340:	88 81       	ld	r24, Y
    2342:	99 81       	ldd	r25, Y+1	; 0x01
    2344:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
			lcd->print(usageData.flashBlock);
    2348:	60 91 7f 05 	lds	r22, 0x057F
    234c:	88 81       	ld	r24, Y
    234e:	99 81       	ldd	r25, Y+1	; 0x01
    2350:	4a e0       	ldi	r20, 0x0A	; 10
    2352:	50 e0       	ldi	r21, 0x00	; 0
    2354:	0e 94 09 20 	call	0x4012	; 0x4012 <_ZN5Print5printEhi>
    2358:	a3 c1       	rjmp	.+838    	; 0x26a0 <__stack+0x4a1>
			break;

		case SUBMENU_USE_RESET:
			lcd->clear();
    235a:	0e 94 69 19 	call	0x32d2	; 0x32d2 <_ZN13LiquidCrystal5clearEv>
			lcd->print(MenuNames[SUBMENU_USE_RESET]);
    235e:	88 81       	ld	r24, Y
    2360:	99 81       	ldd	r25, Y+1	; 0x01
    2362:	6d ec       	ldi	r22, 0xCD	; 205
    2364:	72 e0       	ldi	r23, 0x02	; 2
    2366:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
			lcd->setCursor(0, 1);
    236a:	88 81       	ld	r24, Y
    236c:	99 81       	ldd	r25, Y+1	; 0x01
    236e:	60 e0       	ldi	r22, 0x00	; 0
    2370:	41 e0       	ldi	r20, 0x01	; 1
    2372:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
			lcd->write((uint8_t) OKAY_SYM);
    2376:	a8 81       	ld	r26, Y
    2378:	b9 81       	ldd	r27, Y+1	; 0x01
    237a:	ed 91       	ld	r30, X+
    237c:	fc 91       	ld	r31, X
    237e:	11 97       	sbiw	r26, 0x01	; 1
    2380:	01 90       	ld	r0, Z+
    2382:	f0 81       	ld	r31, Z
    2384:	e0 2d       	mov	r30, r0
    2386:	cd 01       	movw	r24, r26
    2388:	60 e0       	ldi	r22, 0x00	; 0
    238a:	19 95       	eicall
			lcd->print(MenuPrompt[SUBMENU_USE_RESET]);
    238c:	60 91 ab 04 	lds	r22, 0x04AB
    2390:	70 91 ac 04 	lds	r23, 0x04AC
    2394:	30 c1       	rjmp	.+608    	; 0x25f6 <__stack+0x3f7>
			break;

		case SUBMENU_USE_FLASH_RESET:
			lcd->clear();
    2396:	0e 94 69 19 	call	0x32d2	; 0x32d2 <_ZN13LiquidCrystal5clearEv>
			lcd->print(MenuNames[SUBMENU_USE_FLASH_RESET]);
    239a:	88 81       	ld	r24, Y
    239c:	99 81       	ldd	r25, Y+1	; 0x01
    239e:	6b ed       	ldi	r22, 0xDB	; 219
    23a0:	72 e0       	ldi	r23, 0x02	; 2
    23a2:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
			lcd->setCursor(0, 1);
    23a6:	88 81       	ld	r24, Y
    23a8:	99 81       	ldd	r25, Y+1	; 0x01
    23aa:	60 e0       	ldi	r22, 0x00	; 0
    23ac:	41 e0       	ldi	r20, 0x01	; 1
    23ae:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
			lcd->write((uint8_t) OKAY_SYM);
    23b2:	a8 81       	ld	r26, Y
    23b4:	b9 81       	ldd	r27, Y+1	; 0x01
    23b6:	ed 91       	ld	r30, X+
    23b8:	fc 91       	ld	r31, X
    23ba:	11 97       	sbiw	r26, 0x01	; 1
    23bc:	01 90       	ld	r0, Z+
    23be:	f0 81       	ld	r31, Z
    23c0:	e0 2d       	mov	r30, r0
    23c2:	cd 01       	movw	r24, r26
    23c4:	60 e0       	ldi	r22, 0x00	; 0
    23c6:	19 95       	eicall
			lcd->print(MenuPrompt[SUBMENU_USE_FLASH_RESET]);
    23c8:	60 91 ad 04 	lds	r22, 0x04AD
    23cc:	70 91 ae 04 	lds	r23, 0x04AE
    23d0:	12 c1       	rjmp	.+548    	; 0x25f6 <__stack+0x3f7>
			break;

 		case MENU_DEFAULT_MODE:
			DebugPrintLn("setMenu(DEFAULT_MODE)");
			lcd->print(MenuNames[MENU_DEFAULT_MODE]);
    23d2:	6b ee       	ldi	r22, 0xEB	; 235
    23d4:	72 e0       	ldi	r23, 0x02	; 2
    23d6:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
			lcd->setCursor(0, 1);
    23da:	88 81       	ld	r24, Y
    23dc:	99 81       	ldd	r25, Y+1	; 0x01
    23de:	60 e0       	ldi	r22, 0x00	; 0
    23e0:	41 e0       	ldi	r20, 0x01	; 1
    23e2:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
			lcd->write((uint8_t) OKAY_SYM);
    23e6:	a8 81       	ld	r26, Y
    23e8:	b9 81       	ldd	r27, Y+1	; 0x01
    23ea:	ed 91       	ld	r30, X+
    23ec:	fc 91       	ld	r31, X
    23ee:	11 97       	sbiw	r26, 0x01	; 1
    23f0:	01 90       	ld	r0, Z+
    23f2:	f0 81       	ld	r31, Z
    23f4:	e0 2d       	mov	r30, r0
    23f6:	cd 01       	movw	r24, r26
    23f8:	60 e0       	ldi	r22, 0x00	; 0
    23fa:	19 95       	eicall
			lcd->print(MenuPrompt[MENU_DEFAULT_MODE]);
    23fc:	60 91 95 04 	lds	r22, 0x0495
    2400:	70 91 96 04 	lds	r23, 0x0496
    2404:	f8 c0       	rjmp	.+496    	; 0x25f6 <__stack+0x3f7>
			break;


		case SUBMENU_DEFAULT_MODE_SET:
			DebugPrintLn("setMenu(SUBMENU_DEFAULT_MODE_SET)");
			lcd->print(MenuNames[SUBMENU_DEFAULT_MODE_SET]);
    2406:	6c ef       	ldi	r22, 0xFC	; 252
    2408:	72 e0       	ldi	r23, 0x02	; 2
    240a:	8d c0       	rjmp	.+282    	; 0x2526 <__stack+0x327>
//			lcd->setCursor(0, 1);
			break;

		case MENU_TEST:
			DebugPrintLn("setMenu(MENU_TEST)");
			lcd->print(MenuNames[MENU_TEST]);
    240c:	6c e0       	ldi	r22, 0x0C	; 12
    240e:	73 e0       	ldi	r23, 0x03	; 3
    2410:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
			lcd->setCursor(0, 1);
    2414:	88 81       	ld	r24, Y
    2416:	99 81       	ldd	r25, Y+1	; 0x01
    2418:	60 e0       	ldi	r22, 0x00	; 0
    241a:	41 e0       	ldi	r20, 0x01	; 1
    241c:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
			lcd->write((uint8_t) OKAY_SYM);
    2420:	a8 81       	ld	r26, Y
    2422:	b9 81       	ldd	r27, Y+1	; 0x01
    2424:	ed 91       	ld	r30, X+
    2426:	fc 91       	ld	r31, X
    2428:	11 97       	sbiw	r26, 0x01	; 1
    242a:	01 90       	ld	r0, Z+
    242c:	f0 81       	ld	r31, Z
    242e:	e0 2d       	mov	r30, r0
    2430:	cd 01       	movw	r24, r26
    2432:	60 e0       	ldi	r22, 0x00	; 0
    2434:	19 95       	eicall
			lcd->print(MenuPrompt[MENU_TEST]);
    2436:	60 91 97 04 	lds	r22, 0x0497
    243a:	70 91 98 04 	lds	r23, 0x0498
    243e:	db c0       	rjmp	.+438    	; 0x25f6 <__stack+0x3f7>
			break;

		case SUBMENU_TEST_TORCH:
			DebugPrintLn("setMenu(SUBMENU_TEST_TORCH)");
			lcd->print(MenuNames[SUBMENU_TEST_TORCH]);
    2440:	67 e1       	ldi	r22, 0x17	; 23
    2442:	73 e0       	ldi	r23, 0x03	; 3
    2444:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
			lcd->setCursor(0, 1);
    2448:	88 81       	ld	r24, Y
    244a:	99 81       	ldd	r25, Y+1	; 0x01
    244c:	60 e0       	ldi	r22, 0x00	; 0
    244e:	41 e0       	ldi	r20, 0x01	; 1
    2450:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
			lcd->write((uint8_t) OKAY_SYM);
    2454:	a8 81       	ld	r26, Y
    2456:	b9 81       	ldd	r27, Y+1	; 0x01
    2458:	ed 91       	ld	r30, X+
    245a:	fc 91       	ld	r31, X
    245c:	11 97       	sbiw	r26, 0x01	; 1
    245e:	01 90       	ld	r0, Z+
    2460:	f0 81       	ld	r31, Z
    2462:	e0 2d       	mov	r30, r0
    2464:	cd 01       	movw	r24, r26
    2466:	60 e0       	ldi	r22, 0x00	; 0
    2468:	19 95       	eicall
			lcd->print(MenuPrompt[SUBMENU_TEST_TORCH]);
    246a:	60 91 b1 04 	lds	r22, 0x04B1
    246e:	70 91 b2 04 	lds	r23, 0x04B2
    2472:	c1 c0       	rjmp	.+386    	; 0x25f6 <__stack+0x3f7>
			break;

		case SUBMENU_TEST_TORCH_TOGGLE:
			DebugPrintLn("setMenu(SUBMENU_TEST_TORCH_TOGGLE)");
			lcd->print(MenuNames[SUBMENU_TEST_TORCH_TOGGLE]);
    2474:	64 e2       	ldi	r22, 0x24	; 36
    2476:	73 e0       	ldi	r23, 0x03	; 3
    2478:	56 c0       	rjmp	.+172    	; 0x2526 <__stack+0x327>
			lcd->write((uint8_t) DOWN_BUTTON_SYM);
			break;

		case SUBMENU_TEST_ARC:
			DebugPrintLn("setMenu(SUBMENU_TEST_ARC)");
			lcd->print(MenuNames[SUBMENU_TEST_ARC]);
    247a:	62 e3       	ldi	r22, 0x32	; 50
    247c:	73 e0       	ldi	r23, 0x03	; 3
    247e:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
			lcd->setCursor(0, 1);
    2482:	88 81       	ld	r24, Y
    2484:	99 81       	ldd	r25, Y+1	; 0x01
    2486:	60 e0       	ldi	r22, 0x00	; 0
    2488:	41 e0       	ldi	r20, 0x01	; 1
    248a:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
			lcd->write((uint8_t) OKAY_SYM);
    248e:	a8 81       	ld	r26, Y
    2490:	b9 81       	ldd	r27, Y+1	; 0x01
    2492:	ed 91       	ld	r30, X+
    2494:	fc 91       	ld	r31, X
    2496:	11 97       	sbiw	r26, 0x01	; 1
    2498:	01 90       	ld	r0, Z+
    249a:	f0 81       	ld	r31, Z
    249c:	e0 2d       	mov	r30, r0
    249e:	cd 01       	movw	r24, r26
    24a0:	60 e0       	ldi	r22, 0x00	; 0
    24a2:	19 95       	eicall
			lcd->print(MenuPrompt[SUBMENU_TEST_ARC]);
    24a4:	60 91 b5 04 	lds	r22, 0x04B5
    24a8:	70 91 b6 04 	lds	r23, 0x04B6
    24ac:	a4 c0       	rjmp	.+328    	; 0x25f6 <__stack+0x3f7>
			break;

		case SUBMENU_TEST_ARC_TOGGLE:
			DebugPrintLn("setMenu(SUBMENU_TEST_ARC_TOGGLE)");
			lcd->print(MenuNames[SUBMENU_TEST_ARC_TOGGLE]);
    24ae:	6f e3       	ldi	r22, 0x3F	; 63
    24b0:	73 e0       	ldi	r23, 0x03	; 3
    24b2:	39 c0       	rjmp	.+114    	; 0x2526 <__stack+0x327>
			break;

		case SUBMENU_TEST_THC_UP:
			DebugPrintLn("setMenu(SUBMENU_TEST_THC_UP)");
			DebugPrintLn(MenuNames[SUBMENU_TEST_THC_UP]);
			lcd->print(MenuNames[SUBMENU_TEST_THC_UP]);
    24b4:	6d e4       	ldi	r22, 0x4D	; 77
    24b6:	73 e0       	ldi	r23, 0x03	; 3
    24b8:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
			lcd->setCursor(0, 1);
    24bc:	88 81       	ld	r24, Y
    24be:	99 81       	ldd	r25, Y+1	; 0x01
    24c0:	60 e0       	ldi	r22, 0x00	; 0
    24c2:	41 e0       	ldi	r20, 0x01	; 1
    24c4:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
			lcd->write((uint8_t) OKAY_SYM);
    24c8:	a8 81       	ld	r26, Y
    24ca:	b9 81       	ldd	r27, Y+1	; 0x01
    24cc:	ed 91       	ld	r30, X+
    24ce:	fc 91       	ld	r31, X
    24d0:	11 97       	sbiw	r26, 0x01	; 1
    24d2:	01 90       	ld	r0, Z+
    24d4:	f0 81       	ld	r31, Z
    24d6:	e0 2d       	mov	r30, r0
    24d8:	cd 01       	movw	r24, r26
    24da:	60 e0       	ldi	r22, 0x00	; 0
    24dc:	19 95       	eicall
			lcd->print(MenuPrompt[SUBMENU_TEST_THC_UP]);
    24de:	60 91 b9 04 	lds	r22, 0x04B9
    24e2:	70 91 ba 04 	lds	r23, 0x04BA
    24e6:	87 c0       	rjmp	.+270    	; 0x25f6 <__stack+0x3f7>
			break;

		case SUBMENU_TEST_THC_UP_TOGGLE:
			DebugPrintLn("setMenu(SUBMENU_TEST_THC_UP_TOGGLE)");
			lcd->print(MenuNames[SUBMENU_TEST_THC_UP_TOGGLE]);
    24e8:	6a e5       	ldi	r22, 0x5A	; 90
    24ea:	73 e0       	ldi	r23, 0x03	; 3
    24ec:	1c c0       	rjmp	.+56     	; 0x2526 <__stack+0x327>
			break;

		case SUBMENU_TEST_THC_DOWN:
			DebugPrintLn("setMenu(SUBMENU_TEST_THC_DOWN)");
			DebugPrintLn(MenuNames[SUBMENU_TEST_THC_DOWN]);
			lcd->print(MenuNames[SUBMENU_TEST_THC_DOWN]);
    24ee:	68 e6       	ldi	r22, 0x68	; 104
    24f0:	73 e0       	ldi	r23, 0x03	; 3
    24f2:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
			lcd->setCursor(0, 1);
    24f6:	88 81       	ld	r24, Y
    24f8:	99 81       	ldd	r25, Y+1	; 0x01
    24fa:	60 e0       	ldi	r22, 0x00	; 0
    24fc:	41 e0       	ldi	r20, 0x01	; 1
    24fe:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
			lcd->write((uint8_t) OKAY_SYM);
    2502:	a8 81       	ld	r26, Y
    2504:	b9 81       	ldd	r27, Y+1	; 0x01
    2506:	ed 91       	ld	r30, X+
    2508:	fc 91       	ld	r31, X
    250a:	11 97       	sbiw	r26, 0x01	; 1
    250c:	01 90       	ld	r0, Z+
    250e:	f0 81       	ld	r31, Z
    2510:	e0 2d       	mov	r30, r0
    2512:	cd 01       	movw	r24, r26
    2514:	60 e0       	ldi	r22, 0x00	; 0
    2516:	19 95       	eicall
			lcd->print(MenuPrompt[SUBMENU_TEST_THC_DOWN]);
    2518:	60 91 bd 04 	lds	r22, 0x04BD
    251c:	70 91 be 04 	lds	r23, 0x04BE
    2520:	6a c0       	rjmp	.+212    	; 0x25f6 <__stack+0x3f7>
			break;

		case SUBMENU_TEST_THC_DOWN_TOGGLE:
			DebugPrintLn("setMenu(SUBMENU_TEST_THC_DOWN_TOGGLE)");
			lcd->print(MenuNames[SUBMENU_TEST_THC_DOWN_TOGGLE]);
    2522:	67 e7       	ldi	r22, 0x77	; 119
    2524:	73 e0       	ldi	r23, 0x03	; 3
    2526:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
			lcd->write((uint8_t) UP_BUTTON_SYM);
    252a:	a8 81       	ld	r26, Y
    252c:	b9 81       	ldd	r27, Y+1	; 0x01
    252e:	ed 91       	ld	r30, X+
    2530:	fc 91       	ld	r31, X
    2532:	11 97       	sbiw	r26, 0x01	; 1
    2534:	01 90       	ld	r0, Z+
    2536:	f0 81       	ld	r31, Z
    2538:	e0 2d       	mov	r30, r0
    253a:	cd 01       	movw	r24, r26
    253c:	62 e0       	ldi	r22, 0x02	; 2
    253e:	19 95       	eicall
			lcd->print("/");
    2540:	88 81       	ld	r24, Y
    2542:	99 81       	ldd	r25, Y+1	; 0x01
    2544:	6a e0       	ldi	r22, 0x0A	; 10
    2546:	73 e0       	ldi	r23, 0x03	; 3
    2548:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
			lcd->write((uint8_t) DOWN_BUTTON_SYM);
    254c:	a8 81       	ld	r26, Y
    254e:	b9 81       	ldd	r27, Y+1	; 0x01
    2550:	ed 91       	ld	r30, X+
    2552:	fc 91       	ld	r31, X
    2554:	11 97       	sbiw	r26, 0x01	; 1
    2556:	01 90       	ld	r0, Z+
    2558:	f0 81       	ld	r31, Z
    255a:	e0 2d       	mov	r30, r0
    255c:	cd 01       	movw	r24, r26
    255e:	63 e0       	ldi	r22, 0x03	; 3
    2560:	19 95       	eicall
    2562:	9e c0       	rjmp	.+316    	; 0x26a0 <__stack+0x4a1>
			break;

		case MENU_INFO:
			DebugPrintLn("setMenu(MENU_INFO)");
			lcd->print(MenuNames[MENU_INFO]);
    2564:	65 e8       	ldi	r22, 0x85	; 133
    2566:	73 e0       	ldi	r23, 0x03	; 3
    2568:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
			lcd->setCursor(0, 1);
    256c:	88 81       	ld	r24, Y
    256e:	99 81       	ldd	r25, Y+1	; 0x01
    2570:	60 e0       	ldi	r22, 0x00	; 0
    2572:	41 e0       	ldi	r20, 0x01	; 1
    2574:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
			lcd->write((uint8_t) OKAY_SYM);
    2578:	a8 81       	ld	r26, Y
    257a:	b9 81       	ldd	r27, Y+1	; 0x01
    257c:	ed 91       	ld	r30, X+
    257e:	fc 91       	ld	r31, X
    2580:	11 97       	sbiw	r26, 0x01	; 1
    2582:	01 90       	ld	r0, Z+
    2584:	f0 81       	ld	r31, Z
    2586:	e0 2d       	mov	r30, r0
    2588:	cd 01       	movw	r24, r26
    258a:	60 e0       	ldi	r22, 0x00	; 0
    258c:	19 95       	eicall
			lcd->print(MenuPrompt[MENU_INFO]);
    258e:	60 91 99 04 	lds	r22, 0x0499
    2592:	70 91 9a 04 	lds	r23, 0x049A
    2596:	2f c0       	rjmp	.+94     	; 0x25f6 <__stack+0x3f7>
			break;

		case SUBMENU_INFO:
			lcd->print("Rege-o-matic");
    2598:	61 e3       	ldi	r22, 0x31	; 49
    259a:	72 e0       	ldi	r23, 0x02	; 2
    259c:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
			lcd->setCursor(0, 1);
    25a0:	88 81       	ld	r24, Y
    25a2:	99 81       	ldd	r25, Y+1	; 0x01
    25a4:	60 e0       	ldi	r22, 0x00	; 0
    25a6:	41 e0       	ldi	r20, 0x01	; 1
    25a8:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
			lcd->print("Plasma I/F: V");
    25ac:	88 81       	ld	r24, Y
    25ae:	99 81       	ldd	r25, Y+1	; 0x01
    25b0:	6e e3       	ldi	r22, 0x3E	; 62
    25b2:	72 e0       	ldi	r23, 0x02	; 2
    25b4:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
			lcd->setCursor(13, 1);
    25b8:	88 81       	ld	r24, Y
    25ba:	99 81       	ldd	r25, Y+1	; 0x01
    25bc:	6d e0       	ldi	r22, 0x0D	; 13
    25be:	41 e0       	ldi	r20, 0x01	; 1
    25c0:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
			lcd->print(VERSION);
    25c4:	88 81       	ld	r24, Y
    25c6:	99 81       	ldd	r25, Y+1	; 0x01
    25c8:	60 e9       	ldi	r22, 0x90	; 144
    25ca:	73 e0       	ldi	r23, 0x03	; 3
    25cc:	16 c0       	rjmp	.+44     	; 0x25fa <__stack+0x3fb>
			break;

		case MENU_DISABLED:
			DebugPrintLn("setMenu(MENU_DISABLED)");
			lcd->setCursor(0, 0);
    25ce:	60 e0       	ldi	r22, 0x00	; 0
    25d0:	40 e0       	ldi	r20, 0x00	; 0
    25d2:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
			lcd->print(MenuNames[MENU_DISABLED]);
    25d6:	88 81       	ld	r24, Y
    25d8:	99 81       	ldd	r25, Y+1	; 0x01
    25da:	64 e9       	ldi	r22, 0x94	; 148
    25dc:	73 e0       	ldi	r23, 0x03	; 3
    25de:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
			lcd->setCursor(0, 1);
    25e2:	88 81       	ld	r24, Y
    25e4:	99 81       	ldd	r25, Y+1	; 0x01
    25e6:	60 e0       	ldi	r22, 0x00	; 0
    25e8:	41 e0       	ldi	r20, 0x01	; 1
    25ea:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
			lcd->print(MenuPrompt[MENU_DISABLED]);
    25ee:	60 91 9b 04 	lds	r22, 0x049B
    25f2:	70 91 9c 04 	lds	r23, 0x049C
    25f6:	88 81       	ld	r24, Y
    25f8:	99 81       	ldd	r25, Y+1	; 0x01
    25fa:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
    25fe:	50 c0       	rjmp	.+160    	; 0x26a0 <__stack+0x4a1>
			break;

		case MENU_BYPASS:
			DebugPrintLn("setMenu(MENU_BYPASS)");
			lcd->setCursor(0, 0);
    2600:	60 e0       	ldi	r22, 0x00	; 0
    2602:	40 e0       	ldi	r20, 0x00	; 0
    2604:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
			lcd->print("T:");
    2608:	88 81       	ld	r24, Y
    260a:	99 81       	ldd	r25, Y+1	; 0x01
    260c:	6c e4       	ldi	r22, 0x4C	; 76
    260e:	72 e0       	ldi	r23, 0x02	; 2
    2610:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
			lcd->setCursor(4, 0);
    2614:	88 81       	ld	r24, Y
    2616:	99 81       	ldd	r25, Y+1	; 0x01
    2618:	64 e0       	ldi	r22, 0x04	; 4
    261a:	40 e0       	ldi	r20, 0x00	; 0
    261c:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
			lcd->print(MenuNames[MENU_BYPASS]);
    2620:	88 81       	ld	r24, Y
    2622:	99 81       	ldd	r25, Y+1	; 0x01
    2624:	65 ea       	ldi	r22, 0xA5	; 165
    2626:	73 e0       	ldi	r23, 0x03	; 3
    2628:	14 c0       	rjmp	.+40     	; 0x2652 <__stack+0x453>
			ForceDisplay_CurrentVoltage(curVolt);
			break;

		case MENU_CRUISE_MODE:
			DebugPrintLn("setMenu(MENU_CRUISE_MODE)");
			lcd->setCursor(0, 0);
    262a:	60 e0       	ldi	r22, 0x00	; 0
    262c:	40 e0       	ldi	r20, 0x00	; 0
    262e:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
			lcd->print("T:");
    2632:	88 81       	ld	r24, Y
    2634:	99 81       	ldd	r25, Y+1	; 0x01
    2636:	6c e4       	ldi	r22, 0x4C	; 76
    2638:	72 e0       	ldi	r23, 0x02	; 2
    263a:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
			lcd->setCursor(4, 0);
    263e:	88 81       	ld	r24, Y
    2640:	99 81       	ldd	r25, Y+1	; 0x01
    2642:	64 e0       	ldi	r22, 0x04	; 4
    2644:	40 e0       	ldi	r20, 0x00	; 0
    2646:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
			lcd->print(MenuNames[MENU_CRUISE_MODE]);
    264a:	88 81       	ld	r24, Y
    264c:	99 81       	ldd	r25, Y+1	; 0x01
    264e:	66 eb       	ldi	r22, 0xB6	; 182
    2650:	73 e0       	ldi	r23, 0x03	; 3
    2652:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
			lcd->setCursor(0, 1);
    2656:	88 81       	ld	r24, Y
    2658:	99 81       	ldd	r25, Y+1	; 0x01
    265a:	60 e0       	ldi	r22, 0x00	; 0
    265c:	41 e0       	ldi	r20, 0x01	; 1
    265e:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
			lcd->print("A:");
    2662:	88 81       	ld	r24, Y
    2664:	99 81       	ldd	r25, Y+1	; 0x01
    2666:	6f e4       	ldi	r22, 0x4F	; 79
    2668:	72 e0       	ldi	r23, 0x02	; 2
    266a:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
			lcd->setCursor(4, 1);
    266e:	88 81       	ld	r24, Y
    2670:	99 81       	ldd	r25, Y+1	; 0x01
    2672:	64 e0       	ldi	r22, 0x04	; 4
    2674:	41 e0       	ldi	r20, 0x01	; 1
    2676:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
			lcd->print("NOW:");
    267a:	88 81       	ld	r24, Y
    267c:	99 81       	ldd	r25, Y+1	; 0x01
    267e:	67 e5       	ldi	r22, 0x57	; 87
    2680:	72 e0       	ldi	r23, 0x02	; 2
    2682:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
			TorchOn(torchOn);
    2686:	ce 01       	movw	r24, r28
    2688:	6a 89       	ldd	r22, Y+18	; 0x12
    268a:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_ZN12THCInterface7TorchOnEb>
			ArcGood(arcGood);
    268e:	ce 01       	movw	r24, r28
    2690:	6b 89       	ldd	r22, Y+19	; 0x13
    2692:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <_ZN12THCInterface7ArcGoodEb>
			ForceDisplay_CurrentVoltage(curVolt);
    2696:	68 89       	ldd	r22, Y+16	; 0x10
    2698:	79 89       	ldd	r23, Y+17	; 0x11
    269a:	ce 01       	movw	r24, r28
    269c:	0e 94 25 10 	call	0x204a	; 0x204a <_ZN12THCInterface27ForceDisplay_CurrentVoltageEj>
			break;

		default:
			break;
		}
	}
    26a0:	df 91       	pop	r29
    26a2:	cf 91       	pop	r28
    26a4:	08 95       	ret

000026a6 <_ZN12THCInterface14processButtonsEv>:
	}




Command_e THCInterface::processButtons(void)
    26a6:	ff 92       	push	r15
    26a8:	0f 93       	push	r16
    26aa:	1f 93       	push	r17
    26ac:	cf 93       	push	r28
    26ae:	df 93       	push	r29
    26b0:	ec 01       	movw	r28, r24
	{
	bool selectPress, cancelPress, upPress, downPress;
	bool testActive;

	selectPress = selectButton->WasPressed(BUTTON_NOREPEAT);
    26b2:	8c 81       	ldd	r24, Y+4	; 0x04
    26b4:	9d 81       	ldd	r25, Y+5	; 0x05
    26b6:	61 e0       	ldi	r22, 0x01	; 1
    26b8:	70 e0       	ldi	r23, 0x00	; 0
    26ba:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
    26be:	18 2f       	mov	r17, r24
	cancelPress = cancelButton->WasPressed(BUTTON_NOREPEAT);
    26c0:	8e 81       	ldd	r24, Y+6	; 0x06
    26c2:	9f 81       	ldd	r25, Y+7	; 0x07
    26c4:	61 e0       	ldi	r22, 0x01	; 1
    26c6:	70 e0       	ldi	r23, 0x00	; 0
    26c8:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>

	// If multiple buttons active, don't do anything.
	if (selectPress && cancelPress)
    26cc:	11 23       	and	r17, r17
    26ce:	19 f0       	breq	.+6      	; 0x26d6 <_ZN12THCInterface14processButtonsEv+0x30>
    26d0:	88 23       	and	r24, r24
    26d2:	09 f0       	breq	.+2      	; 0x26d6 <_ZN12THCInterface14processButtonsEv+0x30>
    26d4:	96 c3       	rjmp	.+1836   	; 0x2e02 <_ZN12THCInterface14processButtonsEv+0x75c>
		return COMMAND_NONE;

	// Process key strokes based on current interface menu/mode
	switch (currentMenu)
    26d6:	ea 81       	ldd	r30, Y+2	; 0x02
    26d8:	fb 81       	ldd	r31, Y+3	; 0x03
    26da:	e9 31       	cpi	r30, 0x19	; 25
    26dc:	f1 05       	cpc	r31, r1
    26de:	08 f0       	brcs	.+2      	; 0x26e2 <_ZN12THCInterface14processButtonsEv+0x3c>
    26e0:	90 c3       	rjmp	.+1824   	; 0x2e02 <_ZN12THCInterface14processButtonsEv+0x75c>
    26e2:	ee 55       	subi	r30, 0x5E	; 94
    26e4:	ff 4f       	sbci	r31, 0xFF	; 255
    26e6:	ee 0f       	add	r30, r30
    26e8:	ff 1f       	adc	r31, r31
    26ea:	05 90       	lpm	r0, Z+
    26ec:	f4 91       	lpm	r31, Z+
    26ee:	e0 2d       	mov	r30, r0
    26f0:	19 94       	eijmp
		{
		case MENU_OPERATING:
			if (downButton->WasPressed(BUTTON_REPEAT))
    26f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    26f4:	9b 85       	ldd	r25, Y+11	; 0x0b
    26f6:	60 e0       	ldi	r22, 0x00	; 0
    26f8:	70 e0       	ldi	r23, 0x00	; 0
    26fa:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
    26fe:	88 23       	and	r24, r24
    2700:	19 f0       	breq	.+6      	; 0x2708 <_ZN12THCInterface14processButtonsEv+0x62>
    2702:	22 e0       	ldi	r18, 0x02	; 2
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	7f c3       	rjmp	.+1790   	; 0x2e06 <_ZN12THCInterface14processButtonsEv+0x760>
				{
				DebugPrint("COMMAND_VOLT_DOWN\n");
				return COMMAND_VOLT_DOWN;
				}
			else if (upButton->WasPressed(BUTTON_REPEAT))
    2708:	88 85       	ldd	r24, Y+8	; 0x08
    270a:	99 85       	ldd	r25, Y+9	; 0x09
    270c:	60 e0       	ldi	r22, 0x00	; 0
    270e:	70 e0       	ldi	r23, 0x00	; 0
    2710:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
    2714:	88 23       	and	r24, r24
    2716:	19 f0       	breq	.+6      	; 0x271e <_ZN12THCInterface14processButtonsEv+0x78>
    2718:	21 e0       	ldi	r18, 0x01	; 1
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	74 c3       	rjmp	.+1768   	; 0x2e06 <_ZN12THCInterface14processButtonsEv+0x760>
				{
				DebugPrint("COMMAND_VOLT_UP\n");
				return COMMAND_VOLT_UP;
				}
			else if (selectPress)
    271e:	11 23       	and	r17, r17
    2720:	09 f4       	brne	.+2      	; 0x2724 <_ZN12THCInterface14processButtonsEv+0x7e>
    2722:	6f c3       	rjmp	.+1758   	; 0x2e02 <_ZN12THCInterface14processButtonsEv+0x75c>
    2724:	55 c3       	rjmp	.+1706   	; 0x2dd0 <_ZN12THCInterface14processButtonsEv+0x72a>
				setMenu(MENU_USE);
				}
			break;

		case MENU_USE:
			if (cancelPress)
    2726:	88 23       	and	r24, r24
    2728:	09 f0       	breq	.+2      	; 0x272c <_ZN12THCInterface14processButtonsEv+0x86>
    272a:	a7 c2       	rjmp	.+1358   	; 0x2c7a <_ZN12THCInterface14processButtonsEv+0x5d4>
				setMenu(MENU_OPERATING);
			else if (selectPress)
    272c:	11 23       	and	r17, r17
    272e:	09 f0       	breq	.+2      	; 0x2732 <_ZN12THCInterface14processButtonsEv+0x8c>
    2730:	cd c2       	rjmp	.+1434   	; 0x2ccc <_ZN12THCInterface14processButtonsEv+0x626>
				setMenu(SUBMENU_USE_TIME);
			else if (downButton->WasPressed(BUTTON_NOREPEAT))
    2732:	8a 85       	ldd	r24, Y+10	; 0x0a
    2734:	9b 85       	ldd	r25, Y+11	; 0x0b
    2736:	61 e0       	ldi	r22, 0x01	; 1
    2738:	70 e0       	ldi	r23, 0x00	; 0
    273a:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
    273e:	88 23       	and	r24, r24
    2740:	09 f4       	brne	.+2      	; 0x2744 <_ZN12THCInterface14processButtonsEv+0x9e>
    2742:	5f c3       	rjmp	.+1726   	; 0x2e02 <_ZN12THCInterface14processButtonsEv+0x75c>
    2744:	90 c0       	rjmp	.+288    	; 0x2866 <_ZN12THCInterface14processButtonsEv+0x1c0>
				setMenu(MENU_DEFAULT_MODE);
			break;

		case MENU_DEFAULT_MODE:
			if (selectPress)
    2746:	11 23       	and	r17, r17
    2748:	21 f0       	breq	.+8      	; 0x2752 <_ZN12THCInterface14processButtonsEv+0xac>
				setMenu(SUBMENU_DEFAULT_MODE_SET);
    274a:	ce 01       	movw	r24, r28
    274c:	6f e0       	ldi	r22, 0x0F	; 15
    274e:	70 e0       	ldi	r23, 0x00	; 0
    2750:	56 c3       	rjmp	.+1708   	; 0x2dfe <_ZN12THCInterface14processButtonsEv+0x758>
			else if (cancelPress)
    2752:	88 23       	and	r24, r24
    2754:	09 f0       	breq	.+2      	; 0x2758 <_ZN12THCInterface14processButtonsEv+0xb2>
    2756:	91 c2       	rjmp	.+1314   	; 0x2c7a <_ZN12THCInterface14processButtonsEv+0x5d4>
				setMenu(MENU_OPERATING);
			else if (upButton->WasPressed(BUTTON_NOREPEAT))
    2758:	88 85       	ldd	r24, Y+8	; 0x08
    275a:	99 85       	ldd	r25, Y+9	; 0x09
    275c:	61 e0       	ldi	r22, 0x01	; 1
    275e:	70 e0       	ldi	r23, 0x00	; 0
    2760:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
    2764:	88 23       	and	r24, r24
    2766:	09 f0       	breq	.+2      	; 0x276a <_ZN12THCInterface14processButtonsEv+0xc4>
    2768:	33 c3       	rjmp	.+1638   	; 0x2dd0 <_ZN12THCInterface14processButtonsEv+0x72a>
				setMenu(MENU_USE);
			else if (downButton->WasPressed(BUTTON_NOREPEAT))
    276a:	8a 85       	ldd	r24, Y+10	; 0x0a
    276c:	9b 85       	ldd	r25, Y+11	; 0x0b
    276e:	8b c2       	rjmp	.+1302   	; 0x2c86 <_ZN12THCInterface14processButtonsEv+0x5e0>
				setMenu(MENU_TEST);
			break;

		case SUBMENU_DEFAULT_MODE_SET:
			// Read each button to clear them.
			selectPress = selectButton->WasPressed(BUTTON_NOREPEAT);
    2770:	8c 81       	ldd	r24, Y+4	; 0x04
    2772:	9d 81       	ldd	r25, Y+5	; 0x05
    2774:	61 e0       	ldi	r22, 0x01	; 1
    2776:	70 e0       	ldi	r23, 0x00	; 0
    2778:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
    277c:	08 2f       	mov	r16, r24
			cancelPress = cancelButton->WasPressed(BUTTON_NOREPEAT);
    277e:	8e 81       	ldd	r24, Y+6	; 0x06
    2780:	9f 81       	ldd	r25, Y+7	; 0x07
    2782:	61 e0       	ldi	r22, 0x01	; 1
    2784:	70 e0       	ldi	r23, 0x00	; 0
    2786:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
    278a:	18 2f       	mov	r17, r24
			upPress = upButton->WasPressed(BUTTON_NOREPEAT);
    278c:	88 85       	ldd	r24, Y+8	; 0x08
    278e:	99 85       	ldd	r25, Y+9	; 0x09
    2790:	61 e0       	ldi	r22, 0x01	; 1
    2792:	70 e0       	ldi	r23, 0x00	; 0
    2794:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
			downPress = downButton->WasPressed(BUTTON_NOREPEAT);
    2798:	8a 85       	ldd	r24, Y+10	; 0x0a
    279a:	9b 85       	ldd	r25, Y+11	; 0x0b
    279c:	61 e0       	ldi	r22, 0x01	; 1
    279e:	70 e0       	ldi	r23, 0x00	; 0
    27a0:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
			lcd->setCursor(3, 1);
    27a4:	88 81       	ld	r24, Y
    27a6:	99 81       	ldd	r25, Y+1	; 0x01
    27a8:	63 e0       	ldi	r22, 0x03	; 3
    27aa:	41 e0       	ldi	r20, 0x01	; 1
    27ac:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
			lcd->print("current");
    27b0:	88 81       	ld	r24, Y
    27b2:	99 81       	ldd	r25, Y+1	; 0x01
    27b4:	61 ec       	ldi	r22, 0xC1	; 193
    27b6:	73 e0       	ldi	r23, 0x03	; 3
    27b8:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>

			while (!cancelPress & !selectPress)
    27bc:	ff 24       	eor	r15, r15
    27be:	f3 94       	inc	r15
    27c0:	36 c0       	rjmp	.+108    	; 0x282e <_ZN12THCInterface14processButtonsEv+0x188>
				{
				upPress = upButton->WasPressed(BUTTON_NOREPEAT);
    27c2:	88 85       	ldd	r24, Y+8	; 0x08
    27c4:	99 85       	ldd	r25, Y+9	; 0x09
    27c6:	61 e0       	ldi	r22, 0x01	; 1
    27c8:	70 e0       	ldi	r23, 0x00	; 0
    27ca:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
    27ce:	18 2f       	mov	r17, r24
				downPress = downButton->WasPressed(BUTTON_NOREPEAT);
    27d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    27d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    27d4:	61 e0       	ldi	r22, 0x01	; 1
    27d6:	70 e0       	ldi	r23, 0x00	; 0
    27d8:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
				// Are we in the test state with a change request?
				if (upPress)
    27dc:	11 23       	and	r17, r17
    27de:	59 f0       	breq	.+22     	; 0x27f6 <_ZN12THCInterface14processButtonsEv+0x150>
					{
					lcd->setCursor(3, 1);
    27e0:	88 81       	ld	r24, Y
    27e2:	99 81       	ldd	r25, Y+1	; 0x01
    27e4:	63 e0       	ldi	r22, 0x03	; 3
    27e6:	41 e0       	ldi	r20, 0x01	; 1
    27e8:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
					lcd->print("Torch off");
    27ec:	88 81       	ld	r24, Y
    27ee:	99 81       	ldd	r25, Y+1	; 0x01
    27f0:	69 ec       	ldi	r22, 0xC9	; 201
    27f2:	73 e0       	ldi	r23, 0x03	; 3
    27f4:	0c c0       	rjmp	.+24     	; 0x280e <_ZN12THCInterface14processButtonsEv+0x168>
					}
				else if (downPress)
    27f6:	88 23       	and	r24, r24
    27f8:	61 f0       	breq	.+24     	; 0x2812 <_ZN12THCInterface14processButtonsEv+0x16c>
					{
					lcd->setCursor(3, 1);
    27fa:	88 81       	ld	r24, Y
    27fc:	99 81       	ldd	r25, Y+1	; 0x01
    27fe:	63 e0       	ldi	r22, 0x03	; 3
    2800:	41 e0       	ldi	r20, 0x01	; 1
    2802:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
					lcd->print("Torch on ");
    2806:	88 81       	ld	r24, Y
    2808:	99 81       	ldd	r25, Y+1	; 0x01
    280a:	63 ed       	ldi	r22, 0xD3	; 211
    280c:	73 e0       	ldi	r23, 0x03	; 3
    280e:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
					}
				// Check the select and cancel button to see if pressed.
				selectPress = selectButton->WasPressed(BUTTON_NOREPEAT);
    2812:	8c 81       	ldd	r24, Y+4	; 0x04
    2814:	9d 81       	ldd	r25, Y+5	; 0x05
    2816:	61 e0       	ldi	r22, 0x01	; 1
    2818:	70 e0       	ldi	r23, 0x00	; 0
    281a:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
    281e:	08 2f       	mov	r16, r24
				cancelPress = cancelButton->WasPressed(BUTTON_NOREPEAT);
    2820:	8e 81       	ldd	r24, Y+6	; 0x06
    2822:	9f 81       	ldd	r25, Y+7	; 0x07
    2824:	61 e0       	ldi	r22, 0x01	; 1
    2826:	70 e0       	ldi	r23, 0x00	; 0
    2828:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
    282c:	18 2f       	mov	r17, r24
			upPress = upButton->WasPressed(BUTTON_NOREPEAT);
			downPress = downButton->WasPressed(BUTTON_NOREPEAT);
			lcd->setCursor(3, 1);
			lcd->print("current");

			while (!cancelPress & !selectPress)
    282e:	80 2f       	mov	r24, r16
    2830:	8f 25       	eor	r24, r15
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	1f 25       	eor	r17, r15
    2836:	21 2f       	mov	r18, r17
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	82 23       	and	r24, r18
    283c:	93 23       	and	r25, r19
    283e:	89 2b       	or	r24, r25
    2840:	09 f0       	breq	.+2      	; 0x2844 <_ZN12THCInterface14processButtonsEv+0x19e>
    2842:	bf cf       	rjmp	.-130    	; 0x27c2 <_ZN12THCInterface14processButtonsEv+0x11c>
				// Check the select and cancel button to see if pressed.
				selectPress = selectButton->WasPressed(BUTTON_NOREPEAT);
				cancelPress = cancelButton->WasPressed(BUTTON_NOREPEAT);
				}

			if (selectPress)
    2844:	00 23       	and	r16, r16
    2846:	79 f0       	breq	.+30     	; 0x2866 <_ZN12THCInterface14processButtonsEv+0x1c0>
    2848:	18 c2       	rjmp	.+1072   	; 0x2c7a <_ZN12THCInterface14processButtonsEv+0x5d4>
				// Just return to the parent menu.
				setMenu(MENU_DEFAULT_MODE);
			break;

		case MENU_TEST:
			if (selectPress)
    284a:	11 23       	and	r17, r17
    284c:	09 f0       	breq	.+2      	; 0x2850 <_ZN12THCInterface14processButtonsEv+0x1aa>
    284e:	d1 c0       	rjmp	.+418    	; 0x29f2 <_ZN12THCInterface14processButtonsEv+0x34c>
				setMenu(SUBMENU_TEST_TORCH);
			else if (cancelPress)
    2850:	88 23       	and	r24, r24
    2852:	09 f0       	breq	.+2      	; 0x2856 <_ZN12THCInterface14processButtonsEv+0x1b0>
    2854:	12 c2       	rjmp	.+1060   	; 0x2c7a <_ZN12THCInterface14processButtonsEv+0x5d4>
				setMenu(MENU_OPERATING);
			else if (upButton->WasPressed(BUTTON_NOREPEAT))
    2856:	88 85       	ldd	r24, Y+8	; 0x08
    2858:	99 85       	ldd	r25, Y+9	; 0x09
    285a:	61 e0       	ldi	r22, 0x01	; 1
    285c:	70 e0       	ldi	r23, 0x00	; 0
    285e:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
    2862:	88 23       	and	r24, r24
    2864:	21 f0       	breq	.+8      	; 0x286e <_ZN12THCInterface14processButtonsEv+0x1c8>
				setMenu(MENU_DEFAULT_MODE);
    2866:	ce 01       	movw	r24, r28
    2868:	62 e0       	ldi	r22, 0x02	; 2
    286a:	70 e0       	ldi	r23, 0x00	; 0
    286c:	c8 c2       	rjmp	.+1424   	; 0x2dfe <_ZN12THCInterface14processButtonsEv+0x758>
			else if (downButton->WasPressed(BUTTON_NOREPEAT))
    286e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2870:	9b 85       	ldd	r25, Y+11	; 0x0b
    2872:	61 e0       	ldi	r22, 0x01	; 1
    2874:	70 e0       	ldi	r23, 0x00	; 0
    2876:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
    287a:	bc c2       	rjmp	.+1400   	; 0x2df4 <_ZN12THCInterface14processButtonsEv+0x74e>
				setMenu(MENU_INFO);
			break;

		case SUBMENU_TEST_TORCH:
			if (selectPress)
    287c:	11 23       	and	r17, r17
    287e:	21 f0       	breq	.+8      	; 0x2888 <_ZN12THCInterface14processButtonsEv+0x1e2>
				setMenu(SUBMENU_TEST_TORCH_TOGGLE);
    2880:	ce 01       	movw	r24, r28
    2882:	61 e1       	ldi	r22, 0x11	; 17
    2884:	70 e0       	ldi	r23, 0x00	; 0
    2886:	bb c2       	rjmp	.+1398   	; 0x2dfe <_ZN12THCInterface14processButtonsEv+0x758>
			else if (cancelPress)
    2888:	88 23       	and	r24, r24
    288a:	09 f0       	breq	.+2      	; 0x288e <_ZN12THCInterface14processButtonsEv+0x1e8>
    288c:	03 c2       	rjmp	.+1030   	; 0x2c94 <_ZN12THCInterface14processButtonsEv+0x5ee>
				setMenu(MENU_TEST);
			else if (downButton->WasPressed(BUTTON_NOREPEAT))
    288e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2890:	9b 85       	ldd	r25, Y+11	; 0x0b
    2892:	61 e0       	ldi	r22, 0x01	; 1
    2894:	70 e0       	ldi	r23, 0x00	; 0
    2896:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
    289a:	88 23       	and	r24, r24
    289c:	09 f4       	brne	.+2      	; 0x28a0 <_ZN12THCInterface14processButtonsEv+0x1fa>
    289e:	b1 c2       	rjmp	.+1378   	; 0x2e02 <_ZN12THCInterface14processButtonsEv+0x75c>
    28a0:	10 c1       	rjmp	.+544    	; 0x2ac2 <_ZN12THCInterface14processButtonsEv+0x41c>
				setMenu(SUBMENU_TEST_ARC);
			break;

		case SUBMENU_TEST_ARC:
			if (selectPress)
    28a2:	11 23       	and	r17, r17
    28a4:	21 f0       	breq	.+8      	; 0x28ae <_ZN12THCInterface14processButtonsEv+0x208>
				setMenu(SUBMENU_TEST_ARC_TOGGLE);
    28a6:	ce 01       	movw	r24, r28
    28a8:	63 e1       	ldi	r22, 0x13	; 19
    28aa:	70 e0       	ldi	r23, 0x00	; 0
    28ac:	a8 c2       	rjmp	.+1360   	; 0x2dfe <_ZN12THCInterface14processButtonsEv+0x758>
			else if (cancelPress)
    28ae:	88 23       	and	r24, r24
    28b0:	09 f0       	breq	.+2      	; 0x28b4 <_ZN12THCInterface14processButtonsEv+0x20e>
    28b2:	f0 c1       	rjmp	.+992    	; 0x2c94 <_ZN12THCInterface14processButtonsEv+0x5ee>
				setMenu(MENU_TEST);
			else if (upButton->WasPressed(BUTTON_NOREPEAT))
    28b4:	88 85       	ldd	r24, Y+8	; 0x08
    28b6:	99 85       	ldd	r25, Y+9	; 0x09
    28b8:	61 e0       	ldi	r22, 0x01	; 1
    28ba:	70 e0       	ldi	r23, 0x00	; 0
    28bc:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
    28c0:	88 23       	and	r24, r24
    28c2:	09 f0       	breq	.+2      	; 0x28c6 <_ZN12THCInterface14processButtonsEv+0x220>
    28c4:	96 c0       	rjmp	.+300    	; 0x29f2 <_ZN12THCInterface14processButtonsEv+0x34c>
				setMenu(SUBMENU_TEST_TORCH);
			else if (downButton->WasPressed(BUTTON_NOREPEAT))
    28c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    28c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    28ca:	27 c0       	rjmp	.+78     	; 0x291a <_ZN12THCInterface14processButtonsEv+0x274>
				setMenu(SUBMENU_TEST_THC_UP);
			break;

		case SUBMENU_TEST_THC_UP:
			if (selectPress)
    28cc:	11 23       	and	r17, r17
    28ce:	21 f0       	breq	.+8      	; 0x28d8 <_ZN12THCInterface14processButtonsEv+0x232>
				setMenu(SUBMENU_TEST_THC_UP_TOGGLE);
    28d0:	ce 01       	movw	r24, r28
    28d2:	65 e1       	ldi	r22, 0x15	; 21
    28d4:	70 e0       	ldi	r23, 0x00	; 0
    28d6:	93 c2       	rjmp	.+1318   	; 0x2dfe <_ZN12THCInterface14processButtonsEv+0x758>
			else if (cancelPress)
    28d8:	88 23       	and	r24, r24
    28da:	09 f0       	breq	.+2      	; 0x28de <_ZN12THCInterface14processButtonsEv+0x238>
    28dc:	db c1       	rjmp	.+950    	; 0x2c94 <_ZN12THCInterface14processButtonsEv+0x5ee>
				setMenu(MENU_TEST);
			else if (upButton->WasPressed(BUTTON_NOREPEAT))
    28de:	88 85       	ldd	r24, Y+8	; 0x08
    28e0:	99 85       	ldd	r25, Y+9	; 0x09
    28e2:	61 e0       	ldi	r22, 0x01	; 1
    28e4:	70 e0       	ldi	r23, 0x00	; 0
    28e6:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
    28ea:	88 23       	and	r24, r24
    28ec:	09 f0       	breq	.+2      	; 0x28f0 <_ZN12THCInterface14processButtonsEv+0x24a>
    28ee:	e9 c0       	rjmp	.+466    	; 0x2ac2 <_ZN12THCInterface14processButtonsEv+0x41c>
				setMenu(SUBMENU_TEST_ARC);
			else if (downButton->WasPressed(BUTTON_NOREPEAT))
    28f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    28f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    28f4:	61 e0       	ldi	r22, 0x01	; 1
    28f6:	70 e0       	ldi	r23, 0x00	; 0
    28f8:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
    28fc:	88 23       	and	r24, r24
    28fe:	09 f4       	brne	.+2      	; 0x2902 <_ZN12THCInterface14processButtonsEv+0x25c>
    2900:	80 c2       	rjmp	.+1280   	; 0x2e02 <_ZN12THCInterface14processButtonsEv+0x75c>
    2902:	af c1       	rjmp	.+862    	; 0x2c62 <_ZN12THCInterface14processButtonsEv+0x5bc>
				setMenu(SUBMENU_TEST_THC_DOWN);
			break;

		case SUBMENU_TEST_THC_DOWN:
			if (selectPress)
    2904:	11 23       	and	r17, r17
    2906:	21 f0       	breq	.+8      	; 0x2910 <_ZN12THCInterface14processButtonsEv+0x26a>
				setMenu(SUBMENU_TEST_THC_DOWN_TOGGLE);
    2908:	ce 01       	movw	r24, r28
    290a:	67 e1       	ldi	r22, 0x17	; 23
    290c:	70 e0       	ldi	r23, 0x00	; 0
    290e:	77 c2       	rjmp	.+1262   	; 0x2dfe <_ZN12THCInterface14processButtonsEv+0x758>
			else if (cancelPress)
    2910:	88 23       	and	r24, r24
    2912:	09 f0       	breq	.+2      	; 0x2916 <_ZN12THCInterface14processButtonsEv+0x270>
    2914:	bf c1       	rjmp	.+894    	; 0x2c94 <_ZN12THCInterface14processButtonsEv+0x5ee>
				setMenu(MENU_TEST);
			else if (upButton->WasPressed(BUTTON_NOREPEAT))
    2916:	88 85       	ldd	r24, Y+8	; 0x08
    2918:	99 85       	ldd	r25, Y+9	; 0x09
    291a:	61 e0       	ldi	r22, 0x01	; 1
    291c:	70 e0       	ldi	r23, 0x00	; 0
    291e:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
    2922:	88 23       	and	r24, r24
    2924:	09 f4       	brne	.+2      	; 0x2928 <_ZN12THCInterface14processButtonsEv+0x282>
    2926:	6d c2       	rjmp	.+1242   	; 0x2e02 <_ZN12THCInterface14processButtonsEv+0x75c>
    2928:	34 c1       	rjmp	.+616    	; 0x2b92 <_ZN12THCInterface14processButtonsEv+0x4ec>
				setMenu(SUBMENU_TEST_THC_UP);
			break;

		case SUBMENU_TEST_TORCH_TOGGLE:
			// Read each button to clear them.
			cancelPress = cancelButton->WasPressed(BUTTON_NOREPEAT);
    292a:	8e 81       	ldd	r24, Y+6	; 0x06
    292c:	9f 81       	ldd	r25, Y+7	; 0x07
    292e:	61 e0       	ldi	r22, 0x01	; 1
    2930:	70 e0       	ldi	r23, 0x00	; 0
    2932:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
    2936:	08 2f       	mov	r16, r24
			upPress = upButton->WasPressed(BUTTON_NOREPEAT);
    2938:	88 85       	ldd	r24, Y+8	; 0x08
    293a:	99 85       	ldd	r25, Y+9	; 0x09
    293c:	61 e0       	ldi	r22, 0x01	; 1
    293e:	70 e0       	ldi	r23, 0x00	; 0
    2940:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
			downPress = downButton->WasPressed(BUTTON_NOREPEAT);
    2944:	8a 85       	ldd	r24, Y+10	; 0x0a
    2946:	9b 85       	ldd	r25, Y+11	; 0x0b
    2948:	61 e0       	ldi	r22, 0x01	; 1
    294a:	70 e0       	ldi	r23, 0x00	; 0
    294c:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
			// Set flag for torch not being active
			testActive = false;
			lcd->setCursor(3, 1);
    2950:	88 81       	ld	r24, Y
    2952:	99 81       	ldd	r25, Y+1	; 0x01
    2954:	63 e0       	ldi	r22, 0x03	; 3
    2956:	41 e0       	ldi	r20, 0x01	; 1
    2958:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
			lcd->print("Torch off");
    295c:	88 81       	ld	r24, Y
    295e:	99 81       	ldd	r25, Y+1	; 0x01
    2960:	69 ec       	ldi	r22, 0xC9	; 201
    2962:	73 e0       	ldi	r23, 0x03	; 3
    2964:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
    2968:	10 e0       	ldi	r17, 0x00	; 0
    296a:	3d c0       	rjmp	.+122    	; 0x29e6 <_ZN12THCInterface14processButtonsEv+0x340>

			while (!cancelPress)
				{
				upPress = upButton->WasPressed(BUTTON_NOREPEAT);
    296c:	88 85       	ldd	r24, Y+8	; 0x08
    296e:	99 85       	ldd	r25, Y+9	; 0x09
    2970:	61 e0       	ldi	r22, 0x01	; 1
    2972:	70 e0       	ldi	r23, 0x00	; 0
    2974:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
    2978:	08 2f       	mov	r16, r24
				downPress = downButton->WasPressed(BUTTON_NOREPEAT);
    297a:	8a 85       	ldd	r24, Y+10	; 0x0a
    297c:	9b 85       	ldd	r25, Y+11	; 0x0b
    297e:	61 e0       	ldi	r22, 0x01	; 1
    2980:	70 e0       	ldi	r23, 0x00	; 0
    2982:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
				// Are we in the test state with a change request?
				if (testActive && upPress)
    2986:	11 23       	and	r17, r17
    2988:	a1 f0       	breq	.+40     	; 0x29b2 <_ZN12THCInterface14processButtonsEv+0x30c>
    298a:	00 23       	and	r16, r16
    298c:	29 f1       	breq	.+74     	; 0x29d8 <_ZN12THCInterface14processButtonsEv+0x332>
					{
					// Turn off torch for test
					digitalWrite(OUT_D_TORCH_RELAY, OUT_D_TORCH_RELAY_NOT_ACTIVE);
    298e:	81 e1       	ldi	r24, 0x11	; 17
    2990:	60 e0       	ldi	r22, 0x00	; 0
    2992:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <digitalWrite>
					lcd->setCursor(3, 1);
    2996:	88 81       	ld	r24, Y
    2998:	99 81       	ldd	r25, Y+1	; 0x01
    299a:	63 e0       	ldi	r22, 0x03	; 3
    299c:	41 e0       	ldi	r20, 0x01	; 1
    299e:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
					lcd->print("Torch off");
    29a2:	88 81       	ld	r24, Y
    29a4:	99 81       	ldd	r25, Y+1	; 0x01
    29a6:	69 ec       	ldi	r22, 0xC9	; 201
    29a8:	73 e0       	ldi	r23, 0x03	; 3
    29aa:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
    29ae:	10 e0       	ldi	r17, 0x00	; 0
    29b0:	13 c0       	rjmp	.+38     	; 0x29d8 <_ZN12THCInterface14processButtonsEv+0x332>
					testActive = false;
					}
				else if (!testActive && downPress)
    29b2:	88 23       	and	r24, r24
    29b4:	89 f0       	breq	.+34     	; 0x29d8 <_ZN12THCInterface14processButtonsEv+0x332>
					{
					// Turn on torch for test
					digitalWrite(OUT_D_TORCH_RELAY, OUT_D_TORCH_RELAY_ACTIVE);
    29b6:	81 e1       	ldi	r24, 0x11	; 17
    29b8:	61 e0       	ldi	r22, 0x01	; 1
    29ba:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <digitalWrite>
					testActive = true;
					lcd->setCursor(3, 1);
    29be:	88 81       	ld	r24, Y
    29c0:	99 81       	ldd	r25, Y+1	; 0x01
    29c2:	63 e0       	ldi	r22, 0x03	; 3
    29c4:	41 e0       	ldi	r20, 0x01	; 1
    29c6:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
					lcd->print("Torch on ");
    29ca:	88 81       	ld	r24, Y
    29cc:	99 81       	ldd	r25, Y+1	; 0x01
    29ce:	63 ed       	ldi	r22, 0xD3	; 211
    29d0:	73 e0       	ldi	r23, 0x03	; 3
    29d2:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
    29d6:	11 e0       	ldi	r17, 0x01	; 1
					}
				// Check the cancel button to see if pressed.
				cancelPress = cancelButton->WasPressed(BUTTON_NOREPEAT);
    29d8:	8e 81       	ldd	r24, Y+6	; 0x06
    29da:	9f 81       	ldd	r25, Y+7	; 0x07
    29dc:	61 e0       	ldi	r22, 0x01	; 1
    29de:	70 e0       	ldi	r23, 0x00	; 0
    29e0:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
    29e4:	08 2f       	mov	r16, r24
			// Set flag for torch not being active
			testActive = false;
			lcd->setCursor(3, 1);
			lcd->print("Torch off");

			while (!cancelPress)
    29e6:	00 23       	and	r16, r16
    29e8:	09 f2       	breq	.-126    	; 0x296c <_ZN12THCInterface14processButtonsEv+0x2c6>
				cancelPress = cancelButton->WasPressed(BUTTON_NOREPEAT);
				}

			// Make sure the torch is off before leaving.
			// Turn off torch for test
			digitalWrite(OUT_D_TORCH_RELAY, OUT_D_TORCH_RELAY_NOT_ACTIVE);
    29ea:	81 e1       	ldi	r24, 0x11	; 17
    29ec:	60 e0       	ldi	r22, 0x00	; 0
    29ee:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <digitalWrite>
			setMenu(SUBMENU_TEST_TORCH);
    29f2:	ce 01       	movw	r24, r28
    29f4:	60 e1       	ldi	r22, 0x10	; 16
    29f6:	70 e0       	ldi	r23, 0x00	; 0
    29f8:	02 c2       	rjmp	.+1028   	; 0x2dfe <_ZN12THCInterface14processButtonsEv+0x758>
			break;

		case SUBMENU_TEST_ARC_TOGGLE:
			// Read each button to clear them.
			cancelPress = cancelButton->WasPressed(BUTTON_NOREPEAT);
    29fa:	8e 81       	ldd	r24, Y+6	; 0x06
    29fc:	9f 81       	ldd	r25, Y+7	; 0x07
    29fe:	61 e0       	ldi	r22, 0x01	; 1
    2a00:	70 e0       	ldi	r23, 0x00	; 0
    2a02:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
    2a06:	08 2f       	mov	r16, r24
			upPress = upButton->WasPressed(BUTTON_NOREPEAT);
    2a08:	88 85       	ldd	r24, Y+8	; 0x08
    2a0a:	99 85       	ldd	r25, Y+9	; 0x09
    2a0c:	61 e0       	ldi	r22, 0x01	; 1
    2a0e:	70 e0       	ldi	r23, 0x00	; 0
    2a10:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
			downPress = downButton->WasPressed(BUTTON_NOREPEAT);
    2a14:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a16:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a18:	61 e0       	ldi	r22, 0x01	; 1
    2a1a:	70 e0       	ldi	r23, 0x00	; 0
    2a1c:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
			// Set flag for torch not being active
			testActive = false;
			lcd->setCursor(4, 1);
    2a20:	88 81       	ld	r24, Y
    2a22:	99 81       	ldd	r25, Y+1	; 0x01
    2a24:	64 e0       	ldi	r22, 0x04	; 4
    2a26:	41 e0       	ldi	r20, 0x01	; 1
    2a28:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
			lcd->print("Arc off");
    2a2c:	88 81       	ld	r24, Y
    2a2e:	99 81       	ldd	r25, Y+1	; 0x01
    2a30:	6d ed       	ldi	r22, 0xDD	; 221
    2a32:	73 e0       	ldi	r23, 0x03	; 3
    2a34:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
    2a38:	10 e0       	ldi	r17, 0x00	; 0
    2a3a:	3d c0       	rjmp	.+122    	; 0x2ab6 <_ZN12THCInterface14processButtonsEv+0x410>

			while (!cancelPress)
				{
				upPress = upButton->WasPressed(BUTTON_NOREPEAT);
    2a3c:	88 85       	ldd	r24, Y+8	; 0x08
    2a3e:	99 85       	ldd	r25, Y+9	; 0x09
    2a40:	61 e0       	ldi	r22, 0x01	; 1
    2a42:	70 e0       	ldi	r23, 0x00	; 0
    2a44:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
    2a48:	08 2f       	mov	r16, r24
				downPress = downButton->WasPressed(BUTTON_NOREPEAT);
    2a4a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a4c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a4e:	61 e0       	ldi	r22, 0x01	; 1
    2a50:	70 e0       	ldi	r23, 0x00	; 0
    2a52:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
				// Are we in the test state with a change request?
				if (testActive && upPress)
    2a56:	11 23       	and	r17, r17
    2a58:	a1 f0       	breq	.+40     	; 0x2a82 <_ZN12THCInterface14processButtonsEv+0x3dc>
    2a5a:	00 23       	and	r16, r16
    2a5c:	29 f1       	breq	.+74     	; 0x2aa8 <_ZN12THCInterface14processButtonsEv+0x402>
					{
					// Turn off torch for test
					digitalWrite(OUT_D_ARC_GOOD, OUT_D_ARC_GOOD_NOT_ACTIVE);
    2a5e:	82 e3       	ldi	r24, 0x32	; 50
    2a60:	61 e0       	ldi	r22, 0x01	; 1
    2a62:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <digitalWrite>
					lcd->setCursor(4, 1);
    2a66:	88 81       	ld	r24, Y
    2a68:	99 81       	ldd	r25, Y+1	; 0x01
    2a6a:	64 e0       	ldi	r22, 0x04	; 4
    2a6c:	41 e0       	ldi	r20, 0x01	; 1
    2a6e:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
					lcd->print("Arc off");
    2a72:	88 81       	ld	r24, Y
    2a74:	99 81       	ldd	r25, Y+1	; 0x01
    2a76:	6d ed       	ldi	r22, 0xDD	; 221
    2a78:	73 e0       	ldi	r23, 0x03	; 3
    2a7a:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
    2a7e:	10 e0       	ldi	r17, 0x00	; 0
    2a80:	13 c0       	rjmp	.+38     	; 0x2aa8 <_ZN12THCInterface14processButtonsEv+0x402>
					testActive = false;
					}
				else if (!testActive && downPress)
    2a82:	88 23       	and	r24, r24
    2a84:	89 f0       	breq	.+34     	; 0x2aa8 <_ZN12THCInterface14processButtonsEv+0x402>
					{
					// Turn on torch for test
					digitalWrite(OUT_D_ARC_GOOD, OUT_D_ARC_GOOD_ACTIVE);
    2a86:	82 e3       	ldi	r24, 0x32	; 50
    2a88:	60 e0       	ldi	r22, 0x00	; 0
    2a8a:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <digitalWrite>
					testActive = true;
					lcd->setCursor(4, 1);
    2a8e:	88 81       	ld	r24, Y
    2a90:	99 81       	ldd	r25, Y+1	; 0x01
    2a92:	64 e0       	ldi	r22, 0x04	; 4
    2a94:	41 e0       	ldi	r20, 0x01	; 1
    2a96:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
					lcd->print("Arc on ");
    2a9a:	88 81       	ld	r24, Y
    2a9c:	99 81       	ldd	r25, Y+1	; 0x01
    2a9e:	65 ee       	ldi	r22, 0xE5	; 229
    2aa0:	73 e0       	ldi	r23, 0x03	; 3
    2aa2:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
    2aa6:	11 e0       	ldi	r17, 0x01	; 1
					}
				// Check the cancel button to see if pressed.
				cancelPress = cancelButton->WasPressed(BUTTON_NOREPEAT);
    2aa8:	8e 81       	ldd	r24, Y+6	; 0x06
    2aaa:	9f 81       	ldd	r25, Y+7	; 0x07
    2aac:	61 e0       	ldi	r22, 0x01	; 1
    2aae:	70 e0       	ldi	r23, 0x00	; 0
    2ab0:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
    2ab4:	08 2f       	mov	r16, r24
			// Set flag for torch not being active
			testActive = false;
			lcd->setCursor(4, 1);
			lcd->print("Arc off");

			while (!cancelPress)
    2ab6:	00 23       	and	r16, r16
    2ab8:	09 f2       	breq	.-126    	; 0x2a3c <_ZN12THCInterface14processButtonsEv+0x396>
				cancelPress = cancelButton->WasPressed(BUTTON_NOREPEAT);
				}

			// Make sure the torch is off before leaving.
			// Turn off torch for test
			digitalWrite(OUT_D_ARC_GOOD, OUT_D_ARC_GOOD_NOT_ACTIVE);
    2aba:	82 e3       	ldi	r24, 0x32	; 50
    2abc:	61 e0       	ldi	r22, 0x01	; 1
    2abe:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <digitalWrite>
			setMenu(SUBMENU_TEST_ARC);
    2ac2:	ce 01       	movw	r24, r28
    2ac4:	62 e1       	ldi	r22, 0x12	; 18
    2ac6:	70 e0       	ldi	r23, 0x00	; 0
    2ac8:	9a c1       	rjmp	.+820    	; 0x2dfe <_ZN12THCInterface14processButtonsEv+0x758>
			break;

		case SUBMENU_TEST_THC_UP_TOGGLE:
			// Read each button to clear them.
			cancelPress = cancelButton->WasPressed(BUTTON_NOREPEAT);
    2aca:	8e 81       	ldd	r24, Y+6	; 0x06
    2acc:	9f 81       	ldd	r25, Y+7	; 0x07
    2ace:	61 e0       	ldi	r22, 0x01	; 1
    2ad0:	70 e0       	ldi	r23, 0x00	; 0
    2ad2:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
    2ad6:	08 2f       	mov	r16, r24
			upPress = upButton->WasPressed(BUTTON_NOREPEAT);
    2ad8:	88 85       	ldd	r24, Y+8	; 0x08
    2ada:	99 85       	ldd	r25, Y+9	; 0x09
    2adc:	61 e0       	ldi	r22, 0x01	; 1
    2ade:	70 e0       	ldi	r23, 0x00	; 0
    2ae0:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
			downPress = downButton->WasPressed(BUTTON_NOREPEAT);
    2ae4:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ae6:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ae8:	61 e0       	ldi	r22, 0x01	; 1
    2aea:	70 e0       	ldi	r23, 0x00	; 0
    2aec:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
			// Set flag for torch not being active
			testActive = false;
			lcd->setCursor(3, 1);
    2af0:	88 81       	ld	r24, Y
    2af2:	99 81       	ldd	r25, Y+1	; 0x01
    2af4:	63 e0       	ldi	r22, 0x03	; 3
    2af6:	41 e0       	ldi	r20, 0x01	; 1
    2af8:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
			lcd->print("THC UP off");
    2afc:	88 81       	ld	r24, Y
    2afe:	99 81       	ldd	r25, Y+1	; 0x01
    2b00:	6d ee       	ldi	r22, 0xED	; 237
    2b02:	73 e0       	ldi	r23, 0x03	; 3
    2b04:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
    2b08:	10 e0       	ldi	r17, 0x00	; 0
    2b0a:	3d c0       	rjmp	.+122    	; 0x2b86 <_ZN12THCInterface14processButtonsEv+0x4e0>

			while (!cancelPress)
				{
				upPress = upButton->WasPressed(BUTTON_NOREPEAT);
    2b0c:	88 85       	ldd	r24, Y+8	; 0x08
    2b0e:	99 85       	ldd	r25, Y+9	; 0x09
    2b10:	61 e0       	ldi	r22, 0x01	; 1
    2b12:	70 e0       	ldi	r23, 0x00	; 0
    2b14:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
    2b18:	08 2f       	mov	r16, r24
				downPress = downButton->WasPressed(BUTTON_NOREPEAT);
    2b1a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b1c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b1e:	61 e0       	ldi	r22, 0x01	; 1
    2b20:	70 e0       	ldi	r23, 0x00	; 0
    2b22:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
				// Are we in the test state with a change request?
				if (testActive && upPress)
    2b26:	11 23       	and	r17, r17
    2b28:	a1 f0       	breq	.+40     	; 0x2b52 <_ZN12THCInterface14processButtonsEv+0x4ac>
    2b2a:	00 23       	and	r16, r16
    2b2c:	29 f1       	breq	.+74     	; 0x2b78 <_ZN12THCInterface14processButtonsEv+0x4d2>
					{
					// Turn off torch for test
					digitalWrite(OUT_D_TORCH_UP, OUT_D_TORCH_UP_NOT_ACTIVE);
    2b2e:	80 e3       	ldi	r24, 0x30	; 48
    2b30:	61 e0       	ldi	r22, 0x01	; 1
    2b32:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <digitalWrite>
					lcd->setCursor(3, 1);
    2b36:	88 81       	ld	r24, Y
    2b38:	99 81       	ldd	r25, Y+1	; 0x01
    2b3a:	63 e0       	ldi	r22, 0x03	; 3
    2b3c:	41 e0       	ldi	r20, 0x01	; 1
    2b3e:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
					lcd->print("THC UP off");
    2b42:	88 81       	ld	r24, Y
    2b44:	99 81       	ldd	r25, Y+1	; 0x01
    2b46:	6d ee       	ldi	r22, 0xED	; 237
    2b48:	73 e0       	ldi	r23, 0x03	; 3
    2b4a:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
    2b4e:	10 e0       	ldi	r17, 0x00	; 0
    2b50:	13 c0       	rjmp	.+38     	; 0x2b78 <_ZN12THCInterface14processButtonsEv+0x4d2>
					testActive = false;
					}
				else if (!testActive && downPress)
    2b52:	88 23       	and	r24, r24
    2b54:	89 f0       	breq	.+34     	; 0x2b78 <_ZN12THCInterface14processButtonsEv+0x4d2>
					{
					// Turn on torch for test
					digitalWrite(OUT_D_TORCH_UP, OUT_D_TORCH_UP_ACTIVE);
    2b56:	80 e3       	ldi	r24, 0x30	; 48
    2b58:	60 e0       	ldi	r22, 0x00	; 0
    2b5a:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <digitalWrite>
					testActive = true;
					lcd->setCursor(3, 1);
    2b5e:	88 81       	ld	r24, Y
    2b60:	99 81       	ldd	r25, Y+1	; 0x01
    2b62:	63 e0       	ldi	r22, 0x03	; 3
    2b64:	41 e0       	ldi	r20, 0x01	; 1
    2b66:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
					lcd->print("THC UP on ");
    2b6a:	88 81       	ld	r24, Y
    2b6c:	99 81       	ldd	r25, Y+1	; 0x01
    2b6e:	68 ef       	ldi	r22, 0xF8	; 248
    2b70:	73 e0       	ldi	r23, 0x03	; 3
    2b72:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
    2b76:	11 e0       	ldi	r17, 0x01	; 1
					}
				// Check the cancel button to see if pressed.
				cancelPress = cancelButton->WasPressed(BUTTON_NOREPEAT);
    2b78:	8e 81       	ldd	r24, Y+6	; 0x06
    2b7a:	9f 81       	ldd	r25, Y+7	; 0x07
    2b7c:	61 e0       	ldi	r22, 0x01	; 1
    2b7e:	70 e0       	ldi	r23, 0x00	; 0
    2b80:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
    2b84:	08 2f       	mov	r16, r24
			// Set flag for torch not being active
			testActive = false;
			lcd->setCursor(3, 1);
			lcd->print("THC UP off");

			while (!cancelPress)
    2b86:	00 23       	and	r16, r16
    2b88:	09 f2       	breq	.-126    	; 0x2b0c <_ZN12THCInterface14processButtonsEv+0x466>
				cancelPress = cancelButton->WasPressed(BUTTON_NOREPEAT);
				}

			// Make sure the torch is off before leaving.
			// Turn off torch for test
			digitalWrite(OUT_D_TORCH_UP, OUT_D_TORCH_UP_NOT_ACTIVE);
    2b8a:	80 e3       	ldi	r24, 0x30	; 48
    2b8c:	61 e0       	ldi	r22, 0x01	; 1
    2b8e:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <digitalWrite>
			setMenu(SUBMENU_TEST_THC_UP);
    2b92:	ce 01       	movw	r24, r28
    2b94:	64 e1       	ldi	r22, 0x14	; 20
    2b96:	70 e0       	ldi	r23, 0x00	; 0
    2b98:	32 c1       	rjmp	.+612    	; 0x2dfe <_ZN12THCInterface14processButtonsEv+0x758>
			break;

		case SUBMENU_TEST_THC_DOWN_TOGGLE:
			// Read each button to clear them.
			cancelPress = cancelButton->WasPressed(BUTTON_NOREPEAT);
    2b9a:	8e 81       	ldd	r24, Y+6	; 0x06
    2b9c:	9f 81       	ldd	r25, Y+7	; 0x07
    2b9e:	61 e0       	ldi	r22, 0x01	; 1
    2ba0:	70 e0       	ldi	r23, 0x00	; 0
    2ba2:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
    2ba6:	08 2f       	mov	r16, r24
			upPress = upButton->WasPressed(BUTTON_NOREPEAT);
    2ba8:	88 85       	ldd	r24, Y+8	; 0x08
    2baa:	99 85       	ldd	r25, Y+9	; 0x09
    2bac:	61 e0       	ldi	r22, 0x01	; 1
    2bae:	70 e0       	ldi	r23, 0x00	; 0
    2bb0:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
			downPress = downButton->WasPressed(BUTTON_NOREPEAT);
    2bb4:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bb6:	9b 85       	ldd	r25, Y+11	; 0x0b
    2bb8:	61 e0       	ldi	r22, 0x01	; 1
    2bba:	70 e0       	ldi	r23, 0x00	; 0
    2bbc:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
			// Set flag for torch not being active
			testActive = false;
			lcd->setCursor(2, 1);
    2bc0:	88 81       	ld	r24, Y
    2bc2:	99 81       	ldd	r25, Y+1	; 0x01
    2bc4:	62 e0       	ldi	r22, 0x02	; 2
    2bc6:	41 e0       	ldi	r20, 0x01	; 1
    2bc8:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
			lcd->print("THC DOWN off");
    2bcc:	88 81       	ld	r24, Y
    2bce:	99 81       	ldd	r25, Y+1	; 0x01
    2bd0:	63 e0       	ldi	r22, 0x03	; 3
    2bd2:	74 e0       	ldi	r23, 0x04	; 4
    2bd4:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
    2bd8:	10 e0       	ldi	r17, 0x00	; 0
    2bda:	3d c0       	rjmp	.+122    	; 0x2c56 <_ZN12THCInterface14processButtonsEv+0x5b0>

			while (!cancelPress)
				{
				upPress = upButton->WasPressed(BUTTON_NOREPEAT);
    2bdc:	88 85       	ldd	r24, Y+8	; 0x08
    2bde:	99 85       	ldd	r25, Y+9	; 0x09
    2be0:	61 e0       	ldi	r22, 0x01	; 1
    2be2:	70 e0       	ldi	r23, 0x00	; 0
    2be4:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
    2be8:	08 2f       	mov	r16, r24
				downPress = downButton->WasPressed(BUTTON_NOREPEAT);
    2bea:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bec:	9b 85       	ldd	r25, Y+11	; 0x0b
    2bee:	61 e0       	ldi	r22, 0x01	; 1
    2bf0:	70 e0       	ldi	r23, 0x00	; 0
    2bf2:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
				// Are we in the test state with a change request?
				if (testActive && upPress)
    2bf6:	11 23       	and	r17, r17
    2bf8:	a1 f0       	breq	.+40     	; 0x2c22 <_ZN12THCInterface14processButtonsEv+0x57c>
    2bfa:	00 23       	and	r16, r16
    2bfc:	29 f1       	breq	.+74     	; 0x2c48 <_ZN12THCInterface14processButtonsEv+0x5a2>
					{
					// Turn off torch for test
					digitalWrite(OUT_D_TORCH_DOWN, OUT_D_TORCH_DOWN_NOT_ACTIVE);
    2bfe:	8e e2       	ldi	r24, 0x2E	; 46
    2c00:	61 e0       	ldi	r22, 0x01	; 1
    2c02:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <digitalWrite>
					lcd->setCursor(2, 1);
    2c06:	88 81       	ld	r24, Y
    2c08:	99 81       	ldd	r25, Y+1	; 0x01
    2c0a:	62 e0       	ldi	r22, 0x02	; 2
    2c0c:	41 e0       	ldi	r20, 0x01	; 1
    2c0e:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
					lcd->print("THC DOWN off");
    2c12:	88 81       	ld	r24, Y
    2c14:	99 81       	ldd	r25, Y+1	; 0x01
    2c16:	63 e0       	ldi	r22, 0x03	; 3
    2c18:	74 e0       	ldi	r23, 0x04	; 4
    2c1a:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
    2c1e:	10 e0       	ldi	r17, 0x00	; 0
    2c20:	13 c0       	rjmp	.+38     	; 0x2c48 <_ZN12THCInterface14processButtonsEv+0x5a2>
					testActive = false;
					}
				else if (!testActive && downPress)
    2c22:	88 23       	and	r24, r24
    2c24:	89 f0       	breq	.+34     	; 0x2c48 <_ZN12THCInterface14processButtonsEv+0x5a2>
					{
					// Turn on torch for test
					digitalWrite(OUT_D_TORCH_DOWN, OUT_D_TORCH_DOWN_ACTIVE);
    2c26:	8e e2       	ldi	r24, 0x2E	; 46
    2c28:	60 e0       	ldi	r22, 0x00	; 0
    2c2a:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <digitalWrite>
					testActive = true;
					lcd->setCursor(2, 1);
    2c2e:	88 81       	ld	r24, Y
    2c30:	99 81       	ldd	r25, Y+1	; 0x01
    2c32:	62 e0       	ldi	r22, 0x02	; 2
    2c34:	41 e0       	ldi	r20, 0x01	; 1
    2c36:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN13LiquidCrystal9setCursorEhh>
					lcd->print("THC DOWN on ");
    2c3a:	88 81       	ld	r24, Y
    2c3c:	99 81       	ldd	r25, Y+1	; 0x01
    2c3e:	60 e1       	ldi	r22, 0x10	; 16
    2c40:	74 e0       	ldi	r23, 0x04	; 4
    2c42:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN5Print5printEPKc>
    2c46:	11 e0       	ldi	r17, 0x01	; 1
					}
				// Check the cancel button to see if pressed.
				cancelPress = cancelButton->WasPressed(BUTTON_NOREPEAT);
    2c48:	8e 81       	ldd	r24, Y+6	; 0x06
    2c4a:	9f 81       	ldd	r25, Y+7	; 0x07
    2c4c:	61 e0       	ldi	r22, 0x01	; 1
    2c4e:	70 e0       	ldi	r23, 0x00	; 0
    2c50:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
    2c54:	08 2f       	mov	r16, r24
			// Set flag for torch not being active
			testActive = false;
			lcd->setCursor(2, 1);
			lcd->print("THC DOWN off");

			while (!cancelPress)
    2c56:	00 23       	and	r16, r16
    2c58:	09 f2       	breq	.-126    	; 0x2bdc <_ZN12THCInterface14processButtonsEv+0x536>
				cancelPress = cancelButton->WasPressed(BUTTON_NOREPEAT);
				}

			// Make sure the torch is off before leaving.
			// Turn off torch for test
			digitalWrite(OUT_D_TORCH_DOWN, OUT_D_TORCH_DOWN_NOT_ACTIVE);
    2c5a:	8e e2       	ldi	r24, 0x2E	; 46
    2c5c:	61 e0       	ldi	r22, 0x01	; 1
    2c5e:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <digitalWrite>
			setMenu(SUBMENU_TEST_THC_DOWN);
    2c62:	ce 01       	movw	r24, r28
    2c64:	66 e1       	ldi	r22, 0x16	; 22
    2c66:	70 e0       	ldi	r23, 0x00	; 0
    2c68:	ca c0       	rjmp	.+404    	; 0x2dfe <_ZN12THCInterface14processButtonsEv+0x758>
			break;

		case MENU_INFO:
			if (selectPress)
    2c6a:	11 23       	and	r17, r17
    2c6c:	21 f0       	breq	.+8      	; 0x2c76 <_ZN12THCInterface14processButtonsEv+0x5d0>
				setMenu(SUBMENU_INFO);
    2c6e:	ce 01       	movw	r24, r28
    2c70:	68 e1       	ldi	r22, 0x18	; 24
    2c72:	70 e0       	ldi	r23, 0x00	; 0
    2c74:	c4 c0       	rjmp	.+392    	; 0x2dfe <_ZN12THCInterface14processButtonsEv+0x758>
			else if (cancelPress)
    2c76:	88 23       	and	r24, r24
    2c78:	21 f0       	breq	.+8      	; 0x2c82 <_ZN12THCInterface14processButtonsEv+0x5dc>
				setMenu(MENU_OPERATING);
    2c7a:	ce 01       	movw	r24, r28
    2c7c:	60 e0       	ldi	r22, 0x00	; 0
    2c7e:	70 e0       	ldi	r23, 0x00	; 0
    2c80:	be c0       	rjmp	.+380    	; 0x2dfe <_ZN12THCInterface14processButtonsEv+0x758>
			else if (upButton->WasPressed(BUTTON_NOREPEAT))
    2c82:	88 85       	ldd	r24, Y+8	; 0x08
    2c84:	99 85       	ldd	r25, Y+9	; 0x09
    2c86:	61 e0       	ldi	r22, 0x01	; 1
    2c88:	70 e0       	ldi	r23, 0x00	; 0
    2c8a:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
    2c8e:	88 23       	and	r24, r24
    2c90:	09 f4       	brne	.+2      	; 0x2c94 <_ZN12THCInterface14processButtonsEv+0x5ee>
    2c92:	b7 c0       	rjmp	.+366    	; 0x2e02 <_ZN12THCInterface14processButtonsEv+0x75c>
				setMenu(MENU_TEST);
    2c94:	ce 01       	movw	r24, r28
    2c96:	63 e0       	ldi	r22, 0x03	; 3
    2c98:	70 e0       	ldi	r23, 0x00	; 0
    2c9a:	b1 c0       	rjmp	.+354    	; 0x2dfe <_ZN12THCInterface14processButtonsEv+0x758>
			break;

		case SUBMENU_USE_TIME:
			if (cancelPress)
    2c9c:	88 23       	and	r24, r24
    2c9e:	09 f0       	breq	.+2      	; 0x2ca2 <_ZN12THCInterface14processButtonsEv+0x5fc>
    2ca0:	97 c0       	rjmp	.+302    	; 0x2dd0 <_ZN12THCInterface14processButtonsEv+0x72a>
				setMenu(MENU_USE);
			else if (downButton->WasPressed(BUTTON_NOREPEAT))
    2ca2:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ca4:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ca6:	61 e0       	ldi	r22, 0x01	; 1
    2ca8:	70 e0       	ldi	r23, 0x00	; 0
    2caa:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
    2cae:	88 23       	and	r24, r24
    2cb0:	09 f4       	brne	.+2      	; 0x2cb4 <_ZN12THCInterface14processButtonsEv+0x60e>
    2cb2:	a7 c0       	rjmp	.+334    	; 0x2e02 <_ZN12THCInterface14processButtonsEv+0x75c>
    2cb4:	24 c0       	rjmp	.+72     	; 0x2cfe <_ZN12THCInterface14processButtonsEv+0x658>
				setMenu(SUBMENU_USE_ARC_CNT);
			break;

		case SUBMENU_USE_ARC_CNT:
			if (cancelPress)
    2cb6:	88 23       	and	r24, r24
    2cb8:	09 f0       	breq	.+2      	; 0x2cbc <_ZN12THCInterface14processButtonsEv+0x616>
    2cba:	8a c0       	rjmp	.+276    	; 0x2dd0 <_ZN12THCInterface14processButtonsEv+0x72a>
				setMenu(MENU_USE);
			else if (upButton->WasPressed(BUTTON_NOREPEAT))
    2cbc:	88 85       	ldd	r24, Y+8	; 0x08
    2cbe:	99 85       	ldd	r25, Y+9	; 0x09
    2cc0:	61 e0       	ldi	r22, 0x01	; 1
    2cc2:	70 e0       	ldi	r23, 0x00	; 0
    2cc4:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
    2cc8:	88 23       	and	r24, r24
    2cca:	21 f0       	breq	.+8      	; 0x2cd4 <_ZN12THCInterface14processButtonsEv+0x62e>
				setMenu(SUBMENU_USE_TIME);
    2ccc:	ce 01       	movw	r24, r28
    2cce:	68 e0       	ldi	r22, 0x08	; 8
    2cd0:	70 e0       	ldi	r23, 0x00	; 0
    2cd2:	95 c0       	rjmp	.+298    	; 0x2dfe <_ZN12THCInterface14processButtonsEv+0x758>
			else if (downButton->WasPressed(BUTTON_NOREPEAT))
    2cd4:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cd6:	9b 85       	ldd	r25, Y+11	; 0x0b
    2cd8:	61 e0       	ldi	r22, 0x01	; 1
    2cda:	70 e0       	ldi	r23, 0x00	; 0
    2cdc:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
    2ce0:	88 23       	and	r24, r24
    2ce2:	09 f4       	brne	.+2      	; 0x2ce6 <_ZN12THCInterface14processButtonsEv+0x640>
    2ce4:	8e c0       	rjmp	.+284    	; 0x2e02 <_ZN12THCInterface14processButtonsEv+0x75c>
    2ce6:	24 c0       	rjmp	.+72     	; 0x2d30 <_ZN12THCInterface14processButtonsEv+0x68a>
				setMenu(SUBMENU_USE_PLUNGE_CNT);
			break;

		case SUBMENU_USE_PLUNGE_CNT:
			if (cancelPress)
    2ce8:	88 23       	and	r24, r24
    2cea:	09 f0       	breq	.+2      	; 0x2cee <_ZN12THCInterface14processButtonsEv+0x648>
    2cec:	71 c0       	rjmp	.+226    	; 0x2dd0 <_ZN12THCInterface14processButtonsEv+0x72a>
				setMenu(MENU_USE);
			else if (upButton->WasPressed(BUTTON_NOREPEAT))
    2cee:	88 85       	ldd	r24, Y+8	; 0x08
    2cf0:	99 85       	ldd	r25, Y+9	; 0x09
    2cf2:	61 e0       	ldi	r22, 0x01	; 1
    2cf4:	70 e0       	ldi	r23, 0x00	; 0
    2cf6:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
    2cfa:	88 23       	and	r24, r24
    2cfc:	21 f0       	breq	.+8      	; 0x2d06 <_ZN12THCInterface14processButtonsEv+0x660>
				setMenu(SUBMENU_USE_ARC_CNT);
    2cfe:	ce 01       	movw	r24, r28
    2d00:	69 e0       	ldi	r22, 0x09	; 9
    2d02:	70 e0       	ldi	r23, 0x00	; 0
    2d04:	7c c0       	rjmp	.+248    	; 0x2dfe <_ZN12THCInterface14processButtonsEv+0x758>
			else if (downButton->WasPressed(BUTTON_NOREPEAT))
    2d06:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d08:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d0a:	61 e0       	ldi	r22, 0x01	; 1
    2d0c:	70 e0       	ldi	r23, 0x00	; 0
    2d0e:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
    2d12:	88 23       	and	r24, r24
    2d14:	09 f4       	brne	.+2      	; 0x2d18 <_ZN12THCInterface14processButtonsEv+0x672>
    2d16:	75 c0       	rjmp	.+234    	; 0x2e02 <_ZN12THCInterface14processButtonsEv+0x75c>
    2d18:	24 c0       	rjmp	.+72     	; 0x2d62 <_ZN12THCInterface14processButtonsEv+0x6bc>
				setMenu(SUBMENU_USE_FLASH_CNT);
			break;

		case SUBMENU_USE_FLASH_CNT:
			if (cancelPress)
    2d1a:	88 23       	and	r24, r24
    2d1c:	09 f0       	breq	.+2      	; 0x2d20 <_ZN12THCInterface14processButtonsEv+0x67a>
    2d1e:	58 c0       	rjmp	.+176    	; 0x2dd0 <_ZN12THCInterface14processButtonsEv+0x72a>
				setMenu(MENU_USE);
			else if (upButton->WasPressed(BUTTON_NOREPEAT))
    2d20:	88 85       	ldd	r24, Y+8	; 0x08
    2d22:	99 85       	ldd	r25, Y+9	; 0x09
    2d24:	61 e0       	ldi	r22, 0x01	; 1
    2d26:	70 e0       	ldi	r23, 0x00	; 0
    2d28:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
    2d2c:	88 23       	and	r24, r24
    2d2e:	21 f0       	breq	.+8      	; 0x2d38 <_ZN12THCInterface14processButtonsEv+0x692>
				setMenu(SUBMENU_USE_PLUNGE_CNT);
    2d30:	ce 01       	movw	r24, r28
    2d32:	6a e0       	ldi	r22, 0x0A	; 10
    2d34:	70 e0       	ldi	r23, 0x00	; 0
    2d36:	63 c0       	rjmp	.+198    	; 0x2dfe <_ZN12THCInterface14processButtonsEv+0x758>
			else if (downButton->WasPressed(BUTTON_NOREPEAT))
    2d38:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d3a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d3c:	61 e0       	ldi	r22, 0x01	; 1
    2d3e:	70 e0       	ldi	r23, 0x00	; 0
    2d40:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
    2d44:	88 23       	and	r24, r24
    2d46:	09 f4       	brne	.+2      	; 0x2d4a <_ZN12THCInterface14processButtonsEv+0x6a4>
    2d48:	5c c0       	rjmp	.+184    	; 0x2e02 <_ZN12THCInterface14processButtonsEv+0x75c>
    2d4a:	26 c0       	rjmp	.+76     	; 0x2d98 <_ZN12THCInterface14processButtonsEv+0x6f2>
				setMenu(SUBMENU_USE_FLASH_BLOCK);
			break;

		case SUBMENU_USE_FLASH_BLOCK:
			if (cancelPress)
    2d4c:	88 23       	and	r24, r24
    2d4e:	09 f0       	breq	.+2      	; 0x2d52 <_ZN12THCInterface14processButtonsEv+0x6ac>
    2d50:	3f c0       	rjmp	.+126    	; 0x2dd0 <_ZN12THCInterface14processButtonsEv+0x72a>
				setMenu(MENU_USE);
			else if (upButton->WasPressed(BUTTON_NOREPEAT))
    2d52:	88 85       	ldd	r24, Y+8	; 0x08
    2d54:	99 85       	ldd	r25, Y+9	; 0x09
    2d56:	61 e0       	ldi	r22, 0x01	; 1
    2d58:	70 e0       	ldi	r23, 0x00	; 0
    2d5a:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
    2d5e:	88 23       	and	r24, r24
    2d60:	21 f0       	breq	.+8      	; 0x2d6a <_ZN12THCInterface14processButtonsEv+0x6c4>
				setMenu(SUBMENU_USE_FLASH_CNT);
    2d62:	ce 01       	movw	r24, r28
    2d64:	6b e0       	ldi	r22, 0x0B	; 11
    2d66:	70 e0       	ldi	r23, 0x00	; 0
    2d68:	4a c0       	rjmp	.+148    	; 0x2dfe <_ZN12THCInterface14processButtonsEv+0x758>
			else if (downButton->WasPressed(BUTTON_NOREPEAT))
    2d6a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d6c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d6e:	36 c0       	rjmp	.+108    	; 0x2ddc <_ZN12THCInterface14processButtonsEv+0x736>
				setMenu(SUBMENU_USE_RESET);
			break;

		case SUBMENU_USE_RESET:
			if (selectPress)
    2d70:	11 23       	and	r17, r17
    2d72:	41 f0       	breq	.+16     	; 0x2d84 <_ZN12THCInterface14processButtonsEv+0x6de>
				{
				// Return to parent menu so user knows something happened.
				setMenu(MENU_USE);
    2d74:	ce 01       	movw	r24, r28
    2d76:	61 e0       	ldi	r22, 0x01	; 1
    2d78:	70 e0       	ldi	r23, 0x00	; 0
    2d7a:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <_ZN12THCInterface7setMenuE6Menu_e>
    2d7e:	26 e0       	ldi	r18, 0x06	; 6
    2d80:	30 e0       	ldi	r19, 0x00	; 0
    2d82:	41 c0       	rjmp	.+130    	; 0x2e06 <_ZN12THCInterface14processButtonsEv+0x760>
				// Reset the metrics.
				return COMMAND_RESET_USE_DATA;
				}
			else if (cancelPress)
    2d84:	88 23       	and	r24, r24
    2d86:	21 f5       	brne	.+72     	; 0x2dd0 <_ZN12THCInterface14processButtonsEv+0x72a>
				setMenu(MENU_USE);
			else if (upButton->WasPressed(BUTTON_NOREPEAT))
    2d88:	88 85       	ldd	r24, Y+8	; 0x08
    2d8a:	99 85       	ldd	r25, Y+9	; 0x09
    2d8c:	61 e0       	ldi	r22, 0x01	; 1
    2d8e:	70 e0       	ldi	r23, 0x00	; 0
    2d90:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
    2d94:	88 23       	and	r24, r24
    2d96:	21 f0       	breq	.+8      	; 0x2da0 <_ZN12THCInterface14processButtonsEv+0x6fa>
				setMenu(SUBMENU_USE_FLASH_BLOCK);
    2d98:	ce 01       	movw	r24, r28
    2d9a:	6c e0       	ldi	r22, 0x0C	; 12
    2d9c:	70 e0       	ldi	r23, 0x00	; 0
    2d9e:	2f c0       	rjmp	.+94     	; 0x2dfe <_ZN12THCInterface14processButtonsEv+0x758>
			else if (downButton->WasPressed(BUTTON_NOREPEAT))
    2da0:	8a 85       	ldd	r24, Y+10	; 0x0a
    2da2:	9b 85       	ldd	r25, Y+11	; 0x0b
    2da4:	61 e0       	ldi	r22, 0x01	; 1
    2da6:	70 e0       	ldi	r23, 0x00	; 0
    2da8:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
    2dac:	88 23       	and	r24, r24
    2dae:	49 f1       	breq	.+82     	; 0x2e02 <_ZN12THCInterface14processButtonsEv+0x75c>
				setMenu(SUBMENU_USE_FLASH_RESET);
    2db0:	ce 01       	movw	r24, r28
    2db2:	6e e0       	ldi	r22, 0x0E	; 14
    2db4:	70 e0       	ldi	r23, 0x00	; 0
    2db6:	23 c0       	rjmp	.+70     	; 0x2dfe <_ZN12THCInterface14processButtonsEv+0x758>
			break;

		case SUBMENU_USE_FLASH_RESET:
			if (selectPress)
    2db8:	11 23       	and	r17, r17
    2dba:	41 f0       	breq	.+16     	; 0x2dcc <_ZN12THCInterface14processButtonsEv+0x726>
				{
				// Return to parent menu so user knows something happened.
				setMenu(MENU_USE);
    2dbc:	ce 01       	movw	r24, r28
    2dbe:	61 e0       	ldi	r22, 0x01	; 1
    2dc0:	70 e0       	ldi	r23, 0x00	; 0
    2dc2:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <_ZN12THCInterface7setMenuE6Menu_e>
    2dc6:	27 e0       	ldi	r18, 0x07	; 7
    2dc8:	30 e0       	ldi	r19, 0x00	; 0
    2dca:	1d c0       	rjmp	.+58     	; 0x2e06 <_ZN12THCInterface14processButtonsEv+0x760>
				// Reset the flash block.
				return COMMAND_RESET_FLASH_BLOCK;
				}
			else if (cancelPress)
    2dcc:	88 23       	and	r24, r24
    2dce:	21 f0       	breq	.+8      	; 0x2dd8 <_ZN12THCInterface14processButtonsEv+0x732>
				setMenu(MENU_USE);
    2dd0:	ce 01       	movw	r24, r28
    2dd2:	61 e0       	ldi	r22, 0x01	; 1
    2dd4:	70 e0       	ldi	r23, 0x00	; 0
    2dd6:	13 c0       	rjmp	.+38     	; 0x2dfe <_ZN12THCInterface14processButtonsEv+0x758>
			else if (upButton->WasPressed(BUTTON_NOREPEAT))
    2dd8:	88 85       	ldd	r24, Y+8	; 0x08
    2dda:	99 85       	ldd	r25, Y+9	; 0x09
    2ddc:	61 e0       	ldi	r22, 0x01	; 1
    2dde:	70 e0       	ldi	r23, 0x00	; 0
    2de0:	0e 94 c2 02 	call	0x584	; 0x584 <_ZN6Button10WasPressedE14ButtonRepeat_e>
    2de4:	88 23       	and	r24, r24
    2de6:	69 f0       	breq	.+26     	; 0x2e02 <_ZN12THCInterface14processButtonsEv+0x75c>
				setMenu(SUBMENU_USE_RESET);
    2de8:	ce 01       	movw	r24, r28
    2dea:	6d e0       	ldi	r22, 0x0D	; 13
    2dec:	70 e0       	ldi	r23, 0x00	; 0
    2dee:	07 c0       	rjmp	.+14     	; 0x2dfe <_ZN12THCInterface14processButtonsEv+0x758>
			break;

		case SUBMENU_INFO:
			if (selectPress || cancelPress)
    2df0:	11 23       	and	r17, r17
    2df2:	11 f4       	brne	.+4      	; 0x2df8 <_ZN12THCInterface14processButtonsEv+0x752>
    2df4:	88 23       	and	r24, r24
    2df6:	29 f0       	breq	.+10     	; 0x2e02 <_ZN12THCInterface14processButtonsEv+0x75c>
				setMenu(MENU_INFO);
    2df8:	ce 01       	movw	r24, r28
    2dfa:	64 e0       	ldi	r22, 0x04	; 4
    2dfc:	70 e0       	ldi	r23, 0x00	; 0
    2dfe:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <_ZN12THCInterface7setMenuE6Menu_e>
    2e02:	20 e0       	ldi	r18, 0x00	; 0
    2e04:	30 e0       	ldi	r19, 0x00	; 0
			break;
		}

	// No action command.
	return COMMAND_NONE;
	}
    2e06:	c9 01       	movw	r24, r18
    2e08:	df 91       	pop	r29
    2e0a:	cf 91       	pop	r28
    2e0c:	1f 91       	pop	r17
    2e0e:	0f 91       	pop	r16
    2e10:	ff 90       	pop	r15
    2e12:	08 95       	ret

00002e14 <_ZN12THCInterfaceC1Ev>:
 */




THCInterface::THCInterface()
    2e14:	8f 92       	push	r8
    2e16:	9f 92       	push	r9
    2e18:	af 92       	push	r10
    2e1a:	bf 92       	push	r11
    2e1c:	cf 92       	push	r12
    2e1e:	df 92       	push	r13
    2e20:	ef 92       	push	r14
    2e22:	ff 92       	push	r15
    2e24:	0f 93       	push	r16
    2e26:	1f 93       	push	r17
    2e28:	5c 01       	movw	r10, r24
	{
	lcd = new LiquidCrystal(8, 9, 4, 5, 6, 7);
    2e2a:	85 e1       	ldi	r24, 0x15	; 21
    2e2c:	90 e0       	ldi	r25, 0x00	; 0
    2e2e:	0e 94 44 22 	call	0x4488	; 0x4488 <_Znwj>
    2e32:	18 2f       	mov	r17, r24
    2e34:	f9 2e       	mov	r15, r25
    2e36:	68 e0       	ldi	r22, 0x08	; 8
    2e38:	49 e0       	ldi	r20, 0x09	; 9
    2e3a:	24 e0       	ldi	r18, 0x04	; 4
    2e3c:	05 e0       	ldi	r16, 0x05	; 5
    2e3e:	a6 e0       	ldi	r26, 0x06	; 6
    2e40:	ea 2e       	mov	r14, r26
    2e42:	f7 e0       	ldi	r31, 0x07	; 7
    2e44:	cf 2e       	mov	r12, r31
    2e46:	0e 94 27 1a 	call	0x344e	; 0x344e <_ZN13LiquidCrystalC1Ehhhhhh>
    2e4a:	f5 01       	movw	r30, r10
    2e4c:	10 83       	st	Z, r17
    2e4e:	f1 82       	std	Z+1, r15	; 0x01

	// Define up the LCD's number of columns and rows:
	lcd->begin(16, 2);
    2e50:	81 2f       	mov	r24, r17
    2e52:	9f 2d       	mov	r25, r15
    2e54:	60 e1       	ldi	r22, 0x10	; 16
    2e56:	42 e0       	ldi	r20, 0x02	; 2
    2e58:	20 e0       	ldi	r18, 0x00	; 0
    2e5a:	0e 94 71 19 	call	0x32e2	; 0x32e2 <_ZN13LiquidCrystal5beginEhhh>
	// clear the screen.
	lcd->clear();
    2e5e:	f5 01       	movw	r30, r10
    2e60:	80 81       	ld	r24, Z
    2e62:	91 81       	ldd	r25, Z+1	; 0x01
    2e64:	0e 94 69 19 	call	0x32d2	; 0x32d2 <_ZN13LiquidCrystal5clearEv>

	//
	// Create the custom characters for the menu system.
	lcd->createChar(OKAY_SYM, (uint8_t *) okaySym);
    2e68:	f5 01       	movw	r30, r10
    2e6a:	80 81       	ld	r24, Z
    2e6c:	91 81       	ldd	r25, Z+1	; 0x01
    2e6e:	60 e0       	ldi	r22, 0x00	; 0
    2e70:	44 ec       	ldi	r20, 0xC4	; 196
    2e72:	54 e0       	ldi	r21, 0x04	; 4
    2e74:	0e 94 08 19 	call	0x3210	; 0x3210 <_ZN13LiquidCrystal10createCharEhPh>
	lcd->createChar(CANCEL_SYM, (uint8_t *) cancelSym);
    2e78:	f5 01       	movw	r30, r10
    2e7a:	80 81       	ld	r24, Z
    2e7c:	91 81       	ldd	r25, Z+1	; 0x01
    2e7e:	61 e0       	ldi	r22, 0x01	; 1
    2e80:	4c ec       	ldi	r20, 0xCC	; 204
    2e82:	54 e0       	ldi	r21, 0x04	; 4
    2e84:	0e 94 08 19 	call	0x3210	; 0x3210 <_ZN13LiquidCrystal10createCharEhPh>
	lcd->createChar(UP_BUTTON_SYM, (uint8_t *) upButtonSym);
    2e88:	f5 01       	movw	r30, r10
    2e8a:	80 81       	ld	r24, Z
    2e8c:	91 81       	ldd	r25, Z+1	; 0x01
    2e8e:	62 e0       	ldi	r22, 0x02	; 2
    2e90:	44 ed       	ldi	r20, 0xD4	; 212
    2e92:	54 e0       	ldi	r21, 0x04	; 4
    2e94:	0e 94 08 19 	call	0x3210	; 0x3210 <_ZN13LiquidCrystal10createCharEhPh>
	lcd->createChar(DOWN_BUTTON_SYM, (uint8_t *) downButtonSym);
    2e98:	f5 01       	movw	r30, r10
    2e9a:	80 81       	ld	r24, Z
    2e9c:	91 81       	ldd	r25, Z+1	; 0x01
    2e9e:	63 e0       	ldi	r22, 0x03	; 3
    2ea0:	4c ed       	ldi	r20, 0xDC	; 220
    2ea2:	54 e0       	ldi	r21, 0x04	; 4
    2ea4:	0e 94 08 19 	call	0x3210	; 0x3210 <_ZN13LiquidCrystal10createCharEhPh>
	lcd->createChar(UP_TORCH_SYM, (uint8_t *) upArrowSym);
    2ea8:	f5 01       	movw	r30, r10
    2eaa:	80 81       	ld	r24, Z
    2eac:	91 81       	ldd	r25, Z+1	; 0x01
    2eae:	64 e0       	ldi	r22, 0x04	; 4
    2eb0:	44 ee       	ldi	r20, 0xE4	; 228
    2eb2:	54 e0       	ldi	r21, 0x04	; 4
    2eb4:	0e 94 08 19 	call	0x3210	; 0x3210 <_ZN13LiquidCrystal10createCharEhPh>
	lcd->createChar(DOWN_TORCH_SYM, (uint8_t *) downArrowSym);
    2eb8:	f5 01       	movw	r30, r10
    2eba:	80 81       	ld	r24, Z
    2ebc:	91 81       	ldd	r25, Z+1	; 0x01
    2ebe:	65 e0       	ldi	r22, 0x05	; 5
    2ec0:	4c ee       	ldi	r20, 0xEC	; 236
    2ec2:	54 e0       	ldi	r21, 0x04	; 4
    2ec4:	0e 94 08 19 	call	0x3210	; 0x3210 <_ZN13LiquidCrystal10createCharEhPh>

	selectButton = new Button((char *) "Select", IN_D_BUTTON_SELECT,
			IN_D_BUTTON_SELECT_ACTIVE,
			350, // Debounce time Ms.
			500, // Repeat start delay Ms.
			50); // Repeat every Ms.
    2ec8:	8f e1       	ldi	r24, 0x1F	; 31
    2eca:	90 e0       	ldi	r25, 0x00	; 0
    2ecc:	0e 94 44 22 	call	0x4488	; 0x4488 <_Znwj>
    2ed0:	98 2e       	mov	r9, r24
    2ed2:	89 2e       	mov	r8, r25
    2ed4:	6d e1       	ldi	r22, 0x1D	; 29
    2ed6:	74 e0       	ldi	r23, 0x04	; 4
    2ed8:	43 e2       	ldi	r20, 0x23	; 35
    2eda:	50 e0       	ldi	r21, 0x00	; 0
    2edc:	20 e0       	ldi	r18, 0x00	; 0
    2ede:	0e e5       	ldi	r16, 0x5E	; 94
    2ee0:	11 e0       	ldi	r17, 0x01	; 1
    2ee2:	e4 ef       	ldi	r30, 0xF4	; 244
    2ee4:	ee 2e       	mov	r14, r30
    2ee6:	e1 e0       	ldi	r30, 0x01	; 1
    2ee8:	fe 2e       	mov	r15, r30
    2eea:	32 e3       	ldi	r19, 0x32	; 50
    2eec:	c3 2e       	mov	r12, r19
    2eee:	d1 2c       	mov	r13, r1
    2ef0:	0e 94 15 03 	call	0x62a	; 0x62a <_ZN6ButtonC1EPcibjjj>
    2ef4:	f5 01       	movw	r30, r10
    2ef6:	94 82       	std	Z+4, r9	; 0x04
    2ef8:	85 82       	std	Z+5, r8	; 0x05

	cancelButton = new Button((char *) "Cancel", IN_D_BUTTON_CANCEL,
			IN_D_BUTTON_CANCEL_ACTIVE,
			350, // Debounce time Ms.
			500, // Repeat start delay Ms.
			50); // Repeat every Ms.
    2efa:	8f e1       	ldi	r24, 0x1F	; 31
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	0e 94 44 22 	call	0x4488	; 0x4488 <_Znwj>
    2f02:	98 2e       	mov	r9, r24
    2f04:	89 2e       	mov	r8, r25
    2f06:	64 e2       	ldi	r22, 0x24	; 36
    2f08:	74 e0       	ldi	r23, 0x04	; 4
    2f0a:	45 e2       	ldi	r20, 0x25	; 37
    2f0c:	50 e0       	ldi	r21, 0x00	; 0
    2f0e:	20 e0       	ldi	r18, 0x00	; 0
    2f10:	0e 94 15 03 	call	0x62a	; 0x62a <_ZN6ButtonC1EPcibjjj>
    2f14:	f5 01       	movw	r30, r10
    2f16:	96 82       	std	Z+6, r9	; 0x06
    2f18:	87 82       	std	Z+7, r8	; 0x07

	downButton = new Button((char *) "Down", IN_D_BUTTON_DOWN,
			IN_D_BUTTON_DOWN_ACTIVE,
			250, // Debounce time Ms.
			500, // Repeat start delay Ms.
			50); // Repeat every Ms.
    2f1a:	8f e1       	ldi	r24, 0x1F	; 31
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	0e 94 44 22 	call	0x4488	; 0x4488 <_Znwj>
    2f22:	98 2e       	mov	r9, r24
    2f24:	89 2e       	mov	r8, r25
    2f26:	6b e2       	ldi	r22, 0x2B	; 43
    2f28:	74 e0       	ldi	r23, 0x04	; 4
    2f2a:	49 e2       	ldi	r20, 0x29	; 41
    2f2c:	50 e0       	ldi	r21, 0x00	; 0
    2f2e:	20 e0       	ldi	r18, 0x00	; 0
    2f30:	0a ef       	ldi	r16, 0xFA	; 250
    2f32:	10 e0       	ldi	r17, 0x00	; 0
    2f34:	0e 94 15 03 	call	0x62a	; 0x62a <_ZN6ButtonC1EPcibjjj>
    2f38:	f5 01       	movw	r30, r10
    2f3a:	92 86       	std	Z+10, r9	; 0x0a
    2f3c:	83 86       	std	Z+11, r8	; 0x0b

	upButton = new Button((char *) "Up", IN_D_BUTTON_UP,
			IN_D_BUTTON_UP_ACTIVE,
			250, // Debounce time Ms.
			500, // Repeat start delay Ms.
			50); // Repeat every Ms.
    2f3e:	8f e1       	ldi	r24, 0x1F	; 31
    2f40:	90 e0       	ldi	r25, 0x00	; 0
    2f42:	0e 94 44 22 	call	0x4488	; 0x4488 <_Znwj>
    2f46:	98 2e       	mov	r9, r24
    2f48:	89 2e       	mov	r8, r25
    2f4a:	60 e3       	ldi	r22, 0x30	; 48
    2f4c:	74 e0       	ldi	r23, 0x04	; 4
    2f4e:	47 e2       	ldi	r20, 0x27	; 39
    2f50:	50 e0       	ldi	r21, 0x00	; 0
    2f52:	20 e0       	ldi	r18, 0x00	; 0
    2f54:	0e 94 15 03 	call	0x62a	; 0x62a <_ZN6ButtonC1EPcibjjj>
    2f58:	f5 01       	movw	r30, r10
    2f5a:	90 86       	std	Z+8, r9	; 0x08
    2f5c:	81 86       	std	Z+9, r8	; 0x09

	modeButton = new Button((char *) "Mode", IN_D_BUTTON_MODE,
			IN_D_BUTTON_UP_ACTIVE,
			500,	// Debounce time Ms.
			0, 		// Repeat start delay Ms.
			0); 	// Repeat every Ms.
    2f5e:	8f e1       	ldi	r24, 0x1F	; 31
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	0e 94 44 22 	call	0x4488	; 0x4488 <_Znwj>
    2f66:	98 2e       	mov	r9, r24
    2f68:	89 2e       	mov	r8, r25
    2f6a:	63 e3       	ldi	r22, 0x33	; 51
    2f6c:	74 e0       	ldi	r23, 0x04	; 4
    2f6e:	41 e2       	ldi	r20, 0x21	; 33
    2f70:	50 e0       	ldi	r21, 0x00	; 0
    2f72:	20 e0       	ldi	r18, 0x00	; 0
    2f74:	04 ef       	ldi	r16, 0xF4	; 244
    2f76:	11 e0       	ldi	r17, 0x01	; 1
    2f78:	ee 24       	eor	r14, r14
    2f7a:	ff 24       	eor	r15, r15
    2f7c:	cc 24       	eor	r12, r12
    2f7e:	dd 24       	eor	r13, r13
    2f80:	0e 94 15 03 	call	0x62a	; 0x62a <_ZN6ButtonC1EPcibjjj>
    2f84:	f5 01       	movw	r30, r10
    2f86:	94 86       	std	Z+12, r9	; 0x0c
    2f88:	85 86       	std	Z+13, r8	; 0x0d


	//
	// Initialze flags and display state variables.
	torchOn = false;
    2f8a:	12 8a       	std	Z+18, r1	; 0x12
	arcGood = false;
    2f8c:	13 8a       	std	Z+19, r1	; 0x13
	torchState = TORCH_STATE_NONE;
    2f8e:	83 e0       	ldi	r24, 0x03	; 3
    2f90:	90 e0       	ldi	r25, 0x00	; 0
    2f92:	95 8b       	std	Z+21, r25	; 0x15
    2f94:	84 8b       	std	Z+20, r24	; 0x14
	flashWritePending = false;
    2f96:	10 8e       	std	Z+24, r1	; 0x18
	// Set the voltage to an invalid value so a valid value will be recognized.
	curVolt = 1023;
    2f98:	8f ef       	ldi	r24, 0xFF	; 255
    2f9a:	93 e0       	ldi	r25, 0x03	; 3
    2f9c:	91 8b       	std	Z+17, r25	; 0x11
    2f9e:	80 8b       	std	Z+16, r24	; 0x10
	}
    2fa0:	1f 91       	pop	r17
    2fa2:	0f 91       	pop	r16
    2fa4:	ff 90       	pop	r15
    2fa6:	ef 90       	pop	r14
    2fa8:	df 90       	pop	r13
    2faa:	cf 90       	pop	r12
    2fac:	bf 90       	pop	r11
    2fae:	af 90       	pop	r10
    2fb0:	9f 90       	pop	r9
    2fb2:	8f 90       	pop	r8
    2fb4:	08 95       	ret

00002fb6 <_ZN5TimerC1Ev>:
//
// This is the default constructor.  You can't really address problems
// if the user doesn't call "startTimer()" before checking the time,
// but the constructor will initialize the start time to 0 anyways.
//
Timer::Timer()
    2fb6:	fc 01       	movw	r30, r24
    {
    // Initialize the start time to 0 in case "startTimer()" is
    // never called.
    startTimeMillis = 0;
    2fb8:	10 82       	st	Z, r1
    2fba:	11 82       	std	Z+1, r1	; 0x01
    2fbc:	12 82       	std	Z+2, r1	; 0x02
    2fbe:	13 82       	std	Z+3, r1	; 0x03
    }
    2fc0:	08 95       	ret

00002fc2 <_ZN5Timer19elapsedMilliSecondsEv>:
//	None
//
// Returns:
//	ulong - number of seconds elapsed since timer started.
//
unsigned long Timer::elapsedMilliSeconds()
    2fc2:	cf 92       	push	r12
    2fc4:	df 92       	push	r13
    2fc6:	ef 92       	push	r14
    2fc8:	ff 92       	push	r15
    2fca:	0f 93       	push	r16
    2fcc:	1f 93       	push	r17
    2fce:	8c 01       	movw	r16, r24
{
  unsigned long currentTime;

  // Get the current millisecond time.
  currentTime = millis();
    2fd0:	0e 94 8f 22 	call	0x451e	; 0x451e <millis>
    2fd4:	6b 01       	movw	r12, r22
    2fd6:	7c 01       	movw	r14, r24

  // Figure out if a wrap must be done.
  if (currentTime < startTimeMillis)
    2fd8:	f8 01       	movw	r30, r16
    2fda:	60 81       	ld	r22, Z
    2fdc:	71 81       	ldd	r23, Z+1	; 0x01
    2fde:	82 81       	ldd	r24, Z+2	; 0x02
    2fe0:	93 81       	ldd	r25, Z+3	; 0x03
    2fe2:	c6 16       	cp	r12, r22
    2fe4:	d7 06       	cpc	r13, r23
    2fe6:	e8 06       	cpc	r14, r24
    2fe8:	f9 06       	cpc	r15, r25
    2fea:	58 f4       	brcc	.+22     	; 0x3002 <_ZN5Timer19elapsedMilliSecondsEv+0x40>
    return (0xffffffff - startTimeMillis + currentTime);
    2fec:	9b 01       	movw	r18, r22
    2fee:	ac 01       	movw	r20, r24
    2ff0:	20 95       	com	r18
    2ff2:	30 95       	com	r19
    2ff4:	40 95       	com	r20
    2ff6:	50 95       	com	r21
    2ff8:	2c 0d       	add	r18, r12
    2ffa:	3d 1d       	adc	r19, r13
    2ffc:	4e 1d       	adc	r20, r14
    2ffe:	5f 1d       	adc	r21, r15
    3000:	06 c0       	rjmp	.+12     	; 0x300e <_ZN5Timer19elapsedMilliSecondsEv+0x4c>
  else
    return(currentTime - startTimeMillis);
    3002:	a7 01       	movw	r20, r14
    3004:	96 01       	movw	r18, r12
    3006:	26 1b       	sub	r18, r22
    3008:	37 0b       	sbc	r19, r23
    300a:	48 0b       	sbc	r20, r24
    300c:	59 0b       	sbc	r21, r25
}
    300e:	b9 01       	movw	r22, r18
    3010:	ca 01       	movw	r24, r20
    3012:	1f 91       	pop	r17
    3014:	0f 91       	pop	r16
    3016:	ff 90       	pop	r15
    3018:	ef 90       	pop	r14
    301a:	df 90       	pop	r13
    301c:	cf 90       	pop	r12
    301e:	08 95       	ret

00003020 <_ZN5Timer14elapsedSecondsEv>:
//	None
//
// Returns:
//	ulong - number of seconds elapsed since timer started.
//
unsigned long Timer::elapsedSeconds()
    3020:	0f 93       	push	r16
    3022:	1f 93       	push	r17
    3024:	8c 01       	movw	r16, r24
{
  unsigned long currentTime;

  // Get the current millisecond time.
  currentTime = millis();
    3026:	0e 94 8f 22 	call	0x451e	; 0x451e <millis>
    302a:	9b 01       	movw	r18, r22
    302c:	ac 01       	movw	r20, r24

  // Figure out if a system timer wrap must be accounted for.
  if (currentTime < startTimeMillis)
    302e:	f8 01       	movw	r30, r16
    3030:	60 81       	ld	r22, Z
    3032:	71 81       	ldd	r23, Z+1	; 0x01
    3034:	82 81       	ldd	r24, Z+2	; 0x02
    3036:	93 81       	ldd	r25, Z+3	; 0x03
    3038:	26 17       	cp	r18, r22
    303a:	37 07       	cpc	r19, r23
    303c:	48 07       	cpc	r20, r24
    303e:	59 07       	cpc	r21, r25
    3040:	48 f4       	brcc	.+18     	; 0x3054 <_ZN5Timer14elapsedSecondsEv+0x34>
    return ((0xffffffff - startTimeMillis + currentTime) / 1000);
    3042:	60 95       	com	r22
    3044:	70 95       	com	r23
    3046:	80 95       	com	r24
    3048:	90 95       	com	r25
    304a:	62 0f       	add	r22, r18
    304c:	73 1f       	adc	r23, r19
    304e:	84 1f       	adc	r24, r20
    3050:	95 1f       	adc	r25, r21
    3052:	06 c0       	rjmp	.+12     	; 0x3060 <_ZN5Timer14elapsedSecondsEv+0x40>
  else
    return((currentTime - startTimeMillis) / 1000);
    3054:	26 1b       	sub	r18, r22
    3056:	37 0b       	sbc	r19, r23
    3058:	48 0b       	sbc	r20, r24
    305a:	59 0b       	sbc	r21, r25
    305c:	ca 01       	movw	r24, r20
    305e:	b9 01       	movw	r22, r18
    3060:	28 ee       	ldi	r18, 0xE8	; 232
    3062:	33 e0       	ldi	r19, 0x03	; 3
    3064:	40 e0       	ldi	r20, 0x00	; 0
    3066:	50 e0       	ldi	r21, 0x00	; 0
    3068:	0e 94 86 24 	call	0x490c	; 0x490c <__udivmodsi4>
}
    306c:	b9 01       	movw	r22, r18
    306e:	ca 01       	movw	r24, r20
    3070:	1f 91       	pop	r17
    3072:	0f 91       	pop	r16
    3074:	08 95       	ret

00003076 <_ZN5Timer10startTimerEv>:
//
// startTimer()
//
// Record the current time as the "start" time for the timer.
//
void Timer::startTimer()
    3076:	0f 93       	push	r16
    3078:	1f 93       	push	r17
    307a:	8c 01       	movw	r16, r24
{
    // Use the Arduino system timer to get the time in milliseconds.
    startTimeMillis = millis();
    307c:	0e 94 8f 22 	call	0x451e	; 0x451e <millis>
    3080:	f8 01       	movw	r30, r16
    3082:	60 83       	st	Z, r22
    3084:	71 83       	std	Z+1, r23	; 0x01
    3086:	82 83       	std	Z+2, r24	; 0x02
    3088:	93 83       	std	Z+3, r25	; 0x03
}
    308a:	1f 91       	pop	r17
    308c:	0f 91       	pop	r16
    308e:	08 95       	ret

00003090 <_ZN13LiquidCrystal11pulseEnableEv>:
    write4bits(value>>4);
    write4bits(value);
  }
}

void LiquidCrystal::pulseEnable(void) {
    3090:	0f 93       	push	r16
    3092:	1f 93       	push	r17
    3094:	8c 01       	movw	r16, r24
  digitalWrite(_enable_pin, LOW);
    3096:	fc 01       	movw	r30, r24
    3098:	86 81       	ldd	r24, Z+6	; 0x06
    309a:	60 e0       	ldi	r22, 0x00	; 0
    309c:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <digitalWrite>
  delayMicroseconds(1);    
    30a0:	81 e0       	ldi	r24, 0x01	; 1
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	0e 94 9d 22 	call	0x453a	; 0x453a <delayMicroseconds>
  digitalWrite(_enable_pin, HIGH);
    30a8:	f8 01       	movw	r30, r16
    30aa:	86 81       	ldd	r24, Z+6	; 0x06
    30ac:	61 e0       	ldi	r22, 0x01	; 1
    30ae:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <digitalWrite>
  delayMicroseconds(1);    // enable pulse must be >450ns
    30b2:	81 e0       	ldi	r24, 0x01	; 1
    30b4:	90 e0       	ldi	r25, 0x00	; 0
    30b6:	0e 94 9d 22 	call	0x453a	; 0x453a <delayMicroseconds>
  digitalWrite(_enable_pin, LOW);
    30ba:	f8 01       	movw	r30, r16
    30bc:	86 81       	ldd	r24, Z+6	; 0x06
    30be:	60 e0       	ldi	r22, 0x00	; 0
    30c0:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <digitalWrite>
  delayMicroseconds(100);   // commands need > 37us to settle
    30c4:	84 e6       	ldi	r24, 0x64	; 100
    30c6:	90 e0       	ldi	r25, 0x00	; 0
    30c8:	0e 94 9d 22 	call	0x453a	; 0x453a <delayMicroseconds>
}
    30cc:	1f 91       	pop	r17
    30ce:	0f 91       	pop	r16
    30d0:	08 95       	ret

000030d2 <_ZN13LiquidCrystal10write8bitsEh>:
  }

  pulseEnable();
}

void LiquidCrystal::write8bits(uint8_t value) {
    30d2:	cf 92       	push	r12
    30d4:	df 92       	push	r13
    30d6:	ef 92       	push	r14
    30d8:	ff 92       	push	r15
    30da:	0f 93       	push	r16
    30dc:	1f 93       	push	r17
    30de:	cf 93       	push	r28
    30e0:	df 93       	push	r29
    30e2:	d8 2e       	mov	r13, r24
    30e4:	c9 2e       	mov	r12, r25
    30e6:	28 2f       	mov	r18, r24
    30e8:	39 2f       	mov	r19, r25
    30ea:	c9 01       	movw	r24, r18
    30ec:	8c 01       	movw	r16, r24
    30ee:	c0 e0       	ldi	r28, 0x00	; 0
    30f0:	d0 e0       	ldi	r29, 0x00	; 0
  for (int i = 0; i < 8; i++) {
    pinMode(_data_pins[i], OUTPUT);
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
    30f2:	e6 2e       	mov	r14, r22
    30f4:	ff 24       	eor	r15, r15
  pulseEnable();
}

void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
    pinMode(_data_pins[i], OUTPUT);
    30f6:	f8 01       	movw	r30, r16
    30f8:	87 81       	ldd	r24, Z+7	; 0x07
    30fa:	61 e0       	ldi	r22, 0x01	; 1
    30fc:	0e 94 3d 23 	call	0x467a	; 0x467a <pinMode>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
    3100:	b7 01       	movw	r22, r14
    3102:	0c 2e       	mov	r0, r28
    3104:	02 c0       	rjmp	.+4      	; 0x310a <_ZN13LiquidCrystal10write8bitsEh+0x38>
    3106:	75 95       	asr	r23
    3108:	67 95       	ror	r22
    310a:	0a 94       	dec	r0
    310c:	e2 f7       	brpl	.-8      	; 0x3106 <_ZN13LiquidCrystal10write8bitsEh+0x34>
    310e:	61 70       	andi	r22, 0x01	; 1
    3110:	f8 01       	movw	r30, r16
    3112:	87 81       	ldd	r24, Z+7	; 0x07
    3114:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <digitalWrite>

  pulseEnable();
}

void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
    3118:	21 96       	adiw	r28, 0x01	; 1
    311a:	0f 5f       	subi	r16, 0xFF	; 255
    311c:	1f 4f       	sbci	r17, 0xFF	; 255
    311e:	c8 30       	cpi	r28, 0x08	; 8
    3120:	d1 05       	cpc	r29, r1
    3122:	49 f7       	brne	.-46     	; 0x30f6 <_ZN13LiquidCrystal10write8bitsEh+0x24>
    pinMode(_data_pins[i], OUTPUT);
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }
  
  pulseEnable();
    3124:	8d 2d       	mov	r24, r13
    3126:	9c 2d       	mov	r25, r12
    3128:	0e 94 48 18 	call	0x3090	; 0x3090 <_ZN13LiquidCrystal11pulseEnableEv>
}
    312c:	df 91       	pop	r29
    312e:	cf 91       	pop	r28
    3130:	1f 91       	pop	r17
    3132:	0f 91       	pop	r16
    3134:	ff 90       	pop	r15
    3136:	ef 90       	pop	r14
    3138:	df 90       	pop	r13
    313a:	cf 90       	pop	r12
    313c:	08 95       	ret

0000313e <_ZN13LiquidCrystal10write4bitsEh>:
  delayMicroseconds(1);    // enable pulse must be >450ns
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(100);   // commands need > 37us to settle
}

void LiquidCrystal::write4bits(uint8_t value) {
    313e:	cf 92       	push	r12
    3140:	df 92       	push	r13
    3142:	ef 92       	push	r14
    3144:	ff 92       	push	r15
    3146:	0f 93       	push	r16
    3148:	1f 93       	push	r17
    314a:	cf 93       	push	r28
    314c:	df 93       	push	r29
    314e:	d8 2e       	mov	r13, r24
    3150:	c9 2e       	mov	r12, r25
    3152:	28 2f       	mov	r18, r24
    3154:	39 2f       	mov	r19, r25
    3156:	c9 01       	movw	r24, r18
    3158:	8c 01       	movw	r16, r24
    315a:	c0 e0       	ldi	r28, 0x00	; 0
    315c:	d0 e0       	ldi	r29, 0x00	; 0
  for (int i = 0; i < 4; i++) {
    pinMode(_data_pins[i], OUTPUT);
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
    315e:	e6 2e       	mov	r14, r22
    3160:	ff 24       	eor	r15, r15
  delayMicroseconds(100);   // commands need > 37us to settle
}

void LiquidCrystal::write4bits(uint8_t value) {
  for (int i = 0; i < 4; i++) {
    pinMode(_data_pins[i], OUTPUT);
    3162:	f8 01       	movw	r30, r16
    3164:	87 81       	ldd	r24, Z+7	; 0x07
    3166:	61 e0       	ldi	r22, 0x01	; 1
    3168:	0e 94 3d 23 	call	0x467a	; 0x467a <pinMode>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
    316c:	b7 01       	movw	r22, r14
    316e:	0c 2e       	mov	r0, r28
    3170:	02 c0       	rjmp	.+4      	; 0x3176 <_ZN13LiquidCrystal10write4bitsEh+0x38>
    3172:	75 95       	asr	r23
    3174:	67 95       	ror	r22
    3176:	0a 94       	dec	r0
    3178:	e2 f7       	brpl	.-8      	; 0x3172 <_ZN13LiquidCrystal10write4bitsEh+0x34>
    317a:	61 70       	andi	r22, 0x01	; 1
    317c:	f8 01       	movw	r30, r16
    317e:	87 81       	ldd	r24, Z+7	; 0x07
    3180:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <digitalWrite>
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(100);   // commands need > 37us to settle
}

void LiquidCrystal::write4bits(uint8_t value) {
  for (int i = 0; i < 4; i++) {
    3184:	21 96       	adiw	r28, 0x01	; 1
    3186:	0f 5f       	subi	r16, 0xFF	; 255
    3188:	1f 4f       	sbci	r17, 0xFF	; 255
    318a:	c4 30       	cpi	r28, 0x04	; 4
    318c:	d1 05       	cpc	r29, r1
    318e:	49 f7       	brne	.-46     	; 0x3162 <_ZN13LiquidCrystal10write4bitsEh+0x24>
    pinMode(_data_pins[i], OUTPUT);
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }

  pulseEnable();
    3190:	8d 2d       	mov	r24, r13
    3192:	9c 2d       	mov	r25, r12
    3194:	0e 94 48 18 	call	0x3090	; 0x3090 <_ZN13LiquidCrystal11pulseEnableEv>
}
    3198:	df 91       	pop	r29
    319a:	cf 91       	pop	r28
    319c:	1f 91       	pop	r17
    319e:	0f 91       	pop	r16
    31a0:	ff 90       	pop	r15
    31a2:	ef 90       	pop	r14
    31a4:	df 90       	pop	r13
    31a6:	cf 90       	pop	r12
    31a8:	08 95       	ret

000031aa <_ZN13LiquidCrystal4sendEhh>:
}

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void LiquidCrystal::send(uint8_t value, uint8_t mode) {
    31aa:	1f 93       	push	r17
    31ac:	cf 93       	push	r28
    31ae:	df 93       	push	r29
    31b0:	ec 01       	movw	r28, r24
    31b2:	16 2f       	mov	r17, r22
  digitalWrite(_rs_pin, mode);
    31b4:	8c 81       	ldd	r24, Y+4	; 0x04
    31b6:	64 2f       	mov	r22, r20
    31b8:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <digitalWrite>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
    31bc:	8d 81       	ldd	r24, Y+5	; 0x05
    31be:	8f 3f       	cpi	r24, 0xFF	; 255
    31c0:	19 f0       	breq	.+6      	; 0x31c8 <_ZN13LiquidCrystal4sendEhh+0x1e>
    digitalWrite(_rw_pin, LOW);
    31c2:	60 e0       	ldi	r22, 0x00	; 0
    31c4:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <digitalWrite>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
    31c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    31ca:	84 ff       	sbrs	r24, 4
    31cc:	05 c0       	rjmp	.+10     	; 0x31d8 <_ZN13LiquidCrystal4sendEhh+0x2e>
    write8bits(value); 
    31ce:	ce 01       	movw	r24, r28
    31d0:	61 2f       	mov	r22, r17
    31d2:	0e 94 69 18 	call	0x30d2	; 0x30d2 <_ZN13LiquidCrystal10write8bitsEh>
    31d6:	0e c0       	rjmp	.+28     	; 0x31f4 <_ZN13LiquidCrystal4sendEhh+0x4a>
  } else {
    write4bits(value>>4);
    31d8:	61 2f       	mov	r22, r17
    31da:	70 e0       	ldi	r23, 0x00	; 0
    31dc:	84 e0       	ldi	r24, 0x04	; 4
    31de:	75 95       	asr	r23
    31e0:	67 95       	ror	r22
    31e2:	8a 95       	dec	r24
    31e4:	e1 f7       	brne	.-8      	; 0x31de <_ZN13LiquidCrystal4sendEhh+0x34>
    31e6:	ce 01       	movw	r24, r28
    31e8:	0e 94 9f 18 	call	0x313e	; 0x313e <_ZN13LiquidCrystal10write4bitsEh>
    write4bits(value);
    31ec:	ce 01       	movw	r24, r28
    31ee:	61 2f       	mov	r22, r17
    31f0:	0e 94 9f 18 	call	0x313e	; 0x313e <_ZN13LiquidCrystal10write4bitsEh>
  }
}
    31f4:	df 91       	pop	r29
    31f6:	cf 91       	pop	r28
    31f8:	1f 91       	pop	r17
    31fa:	08 95       	ret

000031fc <_ZN13LiquidCrystal5writeEh>:
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
    31fc:	41 e0       	ldi	r20, 0x01	; 1
    31fe:	0e 94 d5 18 	call	0x31aa	; 0x31aa <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
}
    3202:	81 e0       	ldi	r24, 0x01	; 1
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	08 95       	ret

00003208 <_ZN13LiquidCrystal7commandEh>:
}

/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
    3208:	40 e0       	ldi	r20, 0x00	; 0
    320a:	0e 94 d5 18 	call	0x31aa	; 0x31aa <_ZN13LiquidCrystal4sendEhh>
}
    320e:	08 95       	ret

00003210 <_ZN13LiquidCrystal10createCharEhPh>:
  command(LCD_ENTRYMODESET | _displaymode);
}

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void LiquidCrystal::createChar(uint8_t location, uint8_t charmap[]) {
    3210:	ef 92       	push	r14
    3212:	ff 92       	push	r15
    3214:	0f 93       	push	r16
    3216:	1f 93       	push	r17
    3218:	cf 93       	push	r28
    321a:	df 93       	push	r29
    321c:	8c 01       	movw	r16, r24
    321e:	7a 01       	movw	r14, r20
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
    3220:	67 70       	andi	r22, 0x07	; 7
    3222:	66 0f       	add	r22, r22
    3224:	66 0f       	add	r22, r22
    3226:	66 0f       	add	r22, r22
    3228:	60 64       	ori	r22, 0x40	; 64
    322a:	0e 94 04 19 	call	0x3208	; 0x3208 <_ZN13LiquidCrystal7commandEh>
    322e:	c0 e0       	ldi	r28, 0x00	; 0
    3230:	d0 e0       	ldi	r29, 0x00	; 0
  for (int i=0; i<8; i++) {
    write(charmap[i]);
    3232:	d8 01       	movw	r26, r16
    3234:	ed 91       	ld	r30, X+
    3236:	fc 91       	ld	r31, X
    3238:	d7 01       	movw	r26, r14
    323a:	ac 0f       	add	r26, r28
    323c:	bd 1f       	adc	r27, r29
    323e:	01 90       	ld	r0, Z+
    3240:	f0 81       	ld	r31, Z
    3242:	e0 2d       	mov	r30, r0
    3244:	c8 01       	movw	r24, r16
    3246:	6c 91       	ld	r22, X
    3248:	19 95       	eicall
// Allows us to fill the first 8 CGRAM locations
// with custom characters
void LiquidCrystal::createChar(uint8_t location, uint8_t charmap[]) {
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    324a:	21 96       	adiw	r28, 0x01	; 1
    324c:	c8 30       	cpi	r28, 0x08	; 8
    324e:	d1 05       	cpc	r29, r1
    3250:	81 f7       	brne	.-32     	; 0x3232 <_ZN13LiquidCrystal10createCharEhPh+0x22>
    write(charmap[i]);
  }
}
    3252:	df 91       	pop	r29
    3254:	cf 91       	pop	r28
    3256:	1f 91       	pop	r17
    3258:	0f 91       	pop	r16
    325a:	ff 90       	pop	r15
    325c:	ef 90       	pop	r14
    325e:	08 95       	ret

00003260 <_ZN13LiquidCrystal7displayEv>:
// Turn the display on/off (quickly)
void LiquidCrystal::noDisplay() {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void LiquidCrystal::display() {
    3260:	fc 01       	movw	r30, r24
  _displaycontrol |= LCD_DISPLAYON;
    3262:	60 89       	ldd	r22, Z+16	; 0x10
    3264:	86 2f       	mov	r24, r22
    3266:	84 60       	ori	r24, 0x04	; 4
    3268:	80 8b       	std	Z+16, r24	; 0x10
  command(LCD_DISPLAYCONTROL | _displaycontrol);
    326a:	6c 60       	ori	r22, 0x0C	; 12
    326c:	cf 01       	movw	r24, r30
    326e:	0e 94 04 19 	call	0x3208	; 0x3208 <_ZN13LiquidCrystal7commandEh>
}
    3272:	08 95       	ret

00003274 <_ZN13LiquidCrystal9setCursorEhh>:
{
  command(LCD_RETURNHOME);  // set cursor position to zero
  delayMicroseconds(2000);  // this command takes a long time!
}

void LiquidCrystal::setCursor(uint8_t col, uint8_t row)
    3274:	df 93       	push	r29
    3276:	cf 93       	push	r28
    3278:	cd b7       	in	r28, 0x3d	; 61
    327a:	de b7       	in	r29, 0x3e	; 62
    327c:	28 97       	sbiw	r28, 0x08	; 8
    327e:	0f b6       	in	r0, 0x3f	; 63
    3280:	f8 94       	cli
    3282:	de bf       	out	0x3e, r29	; 62
    3284:	0f be       	out	0x3f, r0	; 63
    3286:	cd bf       	out	0x3d, r28	; 61
    3288:	9c 01       	movw	r18, r24
{
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
    328a:	fe 01       	movw	r30, r28
    328c:	31 96       	adiw	r30, 0x01	; 1
    328e:	ac ef       	ldi	r26, 0xFC	; 252
    3290:	b4 e0       	ldi	r27, 0x04	; 4
    3292:	88 e0       	ldi	r24, 0x08	; 8
    3294:	0d 90       	ld	r0, X+
    3296:	01 92       	st	Z+, r0
    3298:	81 50       	subi	r24, 0x01	; 1
    329a:	e1 f7       	brne	.-8      	; 0x3294 <_ZN13LiquidCrystal9setCursorEhh+0x20>
  if ( row >= _numlines ) {
    329c:	f9 01       	movw	r30, r18
    329e:	83 89       	ldd	r24, Z+19	; 0x13
    32a0:	48 17       	cp	r20, r24
    32a2:	10 f0       	brcs	.+4      	; 0x32a8 <_ZN13LiquidCrystal9setCursorEhh+0x34>
    row = _numlines-1;    // we count rows starting w/0
    32a4:	48 2f       	mov	r20, r24
    32a6:	41 50       	subi	r20, 0x01	; 1
  }
  
  command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
    32a8:	e4 2f       	mov	r30, r20
    32aa:	f0 e0       	ldi	r31, 0x00	; 0
    32ac:	ee 0f       	add	r30, r30
    32ae:	ff 1f       	adc	r31, r31
    32b0:	ec 0f       	add	r30, r28
    32b2:	fd 1f       	adc	r31, r29
    32b4:	81 81       	ldd	r24, Z+1	; 0x01
    32b6:	68 0f       	add	r22, r24
    32b8:	60 68       	ori	r22, 0x80	; 128
    32ba:	c9 01       	movw	r24, r18
    32bc:	0e 94 04 19 	call	0x3208	; 0x3208 <_ZN13LiquidCrystal7commandEh>
}
    32c0:	28 96       	adiw	r28, 0x08	; 8
    32c2:	0f b6       	in	r0, 0x3f	; 63
    32c4:	f8 94       	cli
    32c6:	de bf       	out	0x3e, r29	; 62
    32c8:	0f be       	out	0x3f, r0	; 63
    32ca:	cd bf       	out	0x3d, r28	; 61
    32cc:	cf 91       	pop	r28
    32ce:	df 91       	pop	r29
    32d0:	08 95       	ret

000032d2 <_ZN13LiquidCrystal5clearEv>:
}

/********** high level commands, for the user! */
void LiquidCrystal::clear()
{
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
    32d2:	61 e0       	ldi	r22, 0x01	; 1
    32d4:	0e 94 04 19 	call	0x3208	; 0x3208 <_ZN13LiquidCrystal7commandEh>
  delayMicroseconds(2000);  // this command takes a long time!
    32d8:	80 ed       	ldi	r24, 0xD0	; 208
    32da:	97 e0       	ldi	r25, 0x07	; 7
    32dc:	0e 94 9d 22 	call	0x453a	; 0x453a <delayMicroseconds>
}
    32e0:	08 95       	ret

000032e2 <_ZN13LiquidCrystal5beginEhhh>:
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
  
  begin(16, 1);  
}

void LiquidCrystal::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
    32e2:	cf 93       	push	r28
    32e4:	df 93       	push	r29
    32e6:	ec 01       	movw	r28, r24
  if (lines > 1) {
    32e8:	42 30       	cpi	r20, 0x02	; 2
    32ea:	18 f0       	brcs	.+6      	; 0x32f2 <_ZN13LiquidCrystal5beginEhhh+0x10>
    _displayfunction |= LCD_2LINE;
    32ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    32ee:	88 60       	ori	r24, 0x08	; 8
    32f0:	8f 87       	std	Y+15, r24	; 0x0f
  }
  _numlines = lines;
    32f2:	4b 8b       	std	Y+19, r20	; 0x13
  _currline = 0;
    32f4:	1c 8a       	std	Y+20, r1	; 0x14

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != 0) && (lines == 1)) {
    32f6:	22 23       	and	r18, r18
    32f8:	29 f0       	breq	.+10     	; 0x3304 <_ZN13LiquidCrystal5beginEhhh+0x22>
    32fa:	41 30       	cpi	r20, 0x01	; 1
    32fc:	19 f4       	brne	.+6      	; 0x3304 <_ZN13LiquidCrystal5beginEhhh+0x22>
    _displayfunction |= LCD_5x10DOTS;
    32fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    3300:	84 60       	ori	r24, 0x04	; 4
    3302:	8f 87       	std	Y+15, r24	; 0x0f
  }

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
  delayMicroseconds(50000); 
    3304:	80 e5       	ldi	r24, 0x50	; 80
    3306:	93 ec       	ldi	r25, 0xC3	; 195
    3308:	0e 94 9d 22 	call	0x453a	; 0x453a <delayMicroseconds>
  // Now we pull both RS and R/W low to begin commands
  digitalWrite(_rs_pin, LOW);
    330c:	8c 81       	ldd	r24, Y+4	; 0x04
    330e:	60 e0       	ldi	r22, 0x00	; 0
    3310:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <digitalWrite>
  digitalWrite(_enable_pin, LOW);
    3314:	8e 81       	ldd	r24, Y+6	; 0x06
    3316:	60 e0       	ldi	r22, 0x00	; 0
    3318:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <digitalWrite>
  if (_rw_pin != 255) { 
    331c:	8d 81       	ldd	r24, Y+5	; 0x05
    331e:	8f 3f       	cpi	r24, 0xFF	; 255
    3320:	19 f0       	breq	.+6      	; 0x3328 <_ZN13LiquidCrystal5beginEhhh+0x46>
    digitalWrite(_rw_pin, LOW);
    3322:	60 e0       	ldi	r22, 0x00	; 0
    3324:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <digitalWrite>
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
    3328:	6f 85       	ldd	r22, Y+15	; 0x0f
    332a:	64 fd       	sbrc	r22, 4
    332c:	1d c0       	rjmp	.+58     	; 0x3368 <_ZN13LiquidCrystal5beginEhhh+0x86>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
    332e:	ce 01       	movw	r24, r28
    3330:	63 e0       	ldi	r22, 0x03	; 3
    3332:	0e 94 9f 18 	call	0x313e	; 0x313e <_ZN13LiquidCrystal10write4bitsEh>
    delayMicroseconds(4500); // wait min 4.1ms
    3336:	84 e9       	ldi	r24, 0x94	; 148
    3338:	91 e1       	ldi	r25, 0x11	; 17
    333a:	0e 94 9d 22 	call	0x453a	; 0x453a <delayMicroseconds>

    // second try
    write4bits(0x03);
    333e:	ce 01       	movw	r24, r28
    3340:	63 e0       	ldi	r22, 0x03	; 3
    3342:	0e 94 9f 18 	call	0x313e	; 0x313e <_ZN13LiquidCrystal10write4bitsEh>
    delayMicroseconds(4500); // wait min 4.1ms
    3346:	84 e9       	ldi	r24, 0x94	; 148
    3348:	91 e1       	ldi	r25, 0x11	; 17
    334a:	0e 94 9d 22 	call	0x453a	; 0x453a <delayMicroseconds>
    
    // third go!
    write4bits(0x03); 
    334e:	ce 01       	movw	r24, r28
    3350:	63 e0       	ldi	r22, 0x03	; 3
    3352:	0e 94 9f 18 	call	0x313e	; 0x313e <_ZN13LiquidCrystal10write4bitsEh>
    delayMicroseconds(150);
    3356:	86 e9       	ldi	r24, 0x96	; 150
    3358:	90 e0       	ldi	r25, 0x00	; 0
    335a:	0e 94 9d 22 	call	0x453a	; 0x453a <delayMicroseconds>

    // finally, set to 4-bit interface
    write4bits(0x02); 
    335e:	ce 01       	movw	r24, r28
    3360:	62 e0       	ldi	r22, 0x02	; 2
    3362:	0e 94 9f 18 	call	0x313e	; 0x313e <_ZN13LiquidCrystal10write4bitsEh>
    3366:	16 c0       	rjmp	.+44     	; 0x3394 <_ZN13LiquidCrystal5beginEhhh+0xb2>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
    3368:	60 62       	ori	r22, 0x20	; 32
    336a:	ce 01       	movw	r24, r28
    336c:	0e 94 04 19 	call	0x3208	; 0x3208 <_ZN13LiquidCrystal7commandEh>
    delayMicroseconds(4500);  // wait more than 4.1ms
    3370:	84 e9       	ldi	r24, 0x94	; 148
    3372:	91 e1       	ldi	r25, 0x11	; 17
    3374:	0e 94 9d 22 	call	0x453a	; 0x453a <delayMicroseconds>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
    3378:	6f 85       	ldd	r22, Y+15	; 0x0f
    337a:	60 62       	ori	r22, 0x20	; 32
    337c:	ce 01       	movw	r24, r28
    337e:	0e 94 04 19 	call	0x3208	; 0x3208 <_ZN13LiquidCrystal7commandEh>
    delayMicroseconds(150);
    3382:	86 e9       	ldi	r24, 0x96	; 150
    3384:	90 e0       	ldi	r25, 0x00	; 0
    3386:	0e 94 9d 22 	call	0x453a	; 0x453a <delayMicroseconds>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
    338a:	6f 85       	ldd	r22, Y+15	; 0x0f
    338c:	60 62       	ori	r22, 0x20	; 32
    338e:	ce 01       	movw	r24, r28
    3390:	0e 94 04 19 	call	0x3208	; 0x3208 <_ZN13LiquidCrystal7commandEh>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
    3394:	6f 85       	ldd	r22, Y+15	; 0x0f
    3396:	60 62       	ori	r22, 0x20	; 32
    3398:	ce 01       	movw	r24, r28
    339a:	0e 94 04 19 	call	0x3208	; 0x3208 <_ZN13LiquidCrystal7commandEh>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
    339e:	84 e0       	ldi	r24, 0x04	; 4
    33a0:	88 8b       	std	Y+16, r24	; 0x10
  display();
    33a2:	ce 01       	movw	r24, r28
    33a4:	0e 94 30 19 	call	0x3260	; 0x3260 <_ZN13LiquidCrystal7displayEv>

  // clear it off
  clear();
    33a8:	ce 01       	movw	r24, r28
    33aa:	0e 94 69 19 	call	0x32d2	; 0x32d2 <_ZN13LiquidCrystal5clearEv>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    33ae:	82 e0       	ldi	r24, 0x02	; 2
    33b0:	89 8b       	std	Y+17, r24	; 0x11
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
    33b2:	ce 01       	movw	r24, r28
    33b4:	66 e0       	ldi	r22, 0x06	; 6
    33b6:	0e 94 04 19 	call	0x3208	; 0x3208 <_ZN13LiquidCrystal7commandEh>

}
    33ba:	df 91       	pop	r29
    33bc:	cf 91       	pop	r28
    33be:	08 95       	ret

000033c0 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>:
  init(1, rs, 255, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}

void LiquidCrystal::init(uint8_t fourbitmode, uint8_t rs, uint8_t rw, uint8_t enable,
			 uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3,
			 uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7)
    33c0:	6f 92       	push	r6
    33c2:	7f 92       	push	r7
    33c4:	8f 92       	push	r8
    33c6:	af 92       	push	r10
    33c8:	cf 92       	push	r12
    33ca:	ef 92       	push	r14
    33cc:	0f 93       	push	r16
    33ce:	1f 93       	push	r17
    33d0:	df 93       	push	r29
    33d2:	cf 93       	push	r28
    33d4:	cd b7       	in	r28, 0x3d	; 61
    33d6:	de b7       	in	r29, 0x3e	; 62
    33d8:	3c 01       	movw	r6, r24
    33da:	16 2f       	mov	r17, r22
    33dc:	84 2f       	mov	r24, r20
{
  _rs_pin = rs;
    33de:	f3 01       	movw	r30, r6
    33e0:	44 83       	std	Z+4, r20	; 0x04
  _rw_pin = rw;
    33e2:	25 83       	std	Z+5, r18	; 0x05
  _enable_pin = enable;
    33e4:	06 83       	std	Z+6, r16	; 0x06
  
  _data_pins[0] = d0;
    33e6:	e7 82       	std	Z+7, r14	; 0x07
  _data_pins[1] = d1;
    33e8:	c0 86       	std	Z+8, r12	; 0x08
  _data_pins[2] = d2;
    33ea:	a1 86       	std	Z+9, r10	; 0x09
  _data_pins[3] = d3; 
    33ec:	82 86       	std	Z+10, r8	; 0x0a
  _data_pins[4] = d4;
    33ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    33f0:	93 87       	std	Z+11, r25	; 0x0b
  _data_pins[5] = d5;
    33f2:	9f 85       	ldd	r25, Y+15	; 0x0f
    33f4:	94 87       	std	Z+12, r25	; 0x0c
  _data_pins[6] = d6;
    33f6:	98 89       	ldd	r25, Y+16	; 0x10
    33f8:	95 87       	std	Z+13, r25	; 0x0d
  _data_pins[7] = d7; 
    33fa:	99 89       	ldd	r25, Y+17	; 0x11
    33fc:	96 87       	std	Z+14, r25	; 0x0e

  pinMode(_rs_pin, OUTPUT);
    33fe:	61 e0       	ldi	r22, 0x01	; 1
    3400:	0e 94 3d 23 	call	0x467a	; 0x467a <pinMode>
  // we can save 1 pin by not using RW. Indicate by passing 255 instead of pin#
  if (_rw_pin != 255) { 
    3404:	f3 01       	movw	r30, r6
    3406:	85 81       	ldd	r24, Z+5	; 0x05
    3408:	8f 3f       	cpi	r24, 0xFF	; 255
    340a:	19 f0       	breq	.+6      	; 0x3412 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0x52>
    pinMode(_rw_pin, OUTPUT);
    340c:	61 e0       	ldi	r22, 0x01	; 1
    340e:	0e 94 3d 23 	call	0x467a	; 0x467a <pinMode>
  }
  pinMode(_enable_pin, OUTPUT);
    3412:	f3 01       	movw	r30, r6
    3414:	86 81       	ldd	r24, Z+6	; 0x06
    3416:	61 e0       	ldi	r22, 0x01	; 1
    3418:	0e 94 3d 23 	call	0x467a	; 0x467a <pinMode>
  
  if (fourbitmode)
    341c:	11 23       	and	r17, r17
    341e:	19 f0       	breq	.+6      	; 0x3426 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0x66>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
    3420:	f3 01       	movw	r30, r6
    3422:	17 86       	std	Z+15, r1	; 0x0f
    3424:	03 c0       	rjmp	.+6      	; 0x342c <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0x6c>
  else 
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
    3426:	80 e1       	ldi	r24, 0x10	; 16
    3428:	f3 01       	movw	r30, r6
    342a:	87 87       	std	Z+15, r24	; 0x0f
  
  begin(16, 1);  
    342c:	c3 01       	movw	r24, r6
    342e:	60 e1       	ldi	r22, 0x10	; 16
    3430:	41 e0       	ldi	r20, 0x01	; 1
    3432:	20 e0       	ldi	r18, 0x00	; 0
    3434:	0e 94 71 19 	call	0x32e2	; 0x32e2 <_ZN13LiquidCrystal5beginEhhh>
}
    3438:	cf 91       	pop	r28
    343a:	df 91       	pop	r29
    343c:	1f 91       	pop	r17
    343e:	0f 91       	pop	r16
    3440:	ef 90       	pop	r14
    3442:	cf 90       	pop	r12
    3444:	af 90       	pop	r10
    3446:	8f 90       	pop	r8
    3448:	7f 90       	pop	r7
    344a:	6f 90       	pop	r6
    344c:	08 95       	ret

0000344e <_ZN13LiquidCrystalC1Ehhhhhh>:
{
  init(1, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}

LiquidCrystal::LiquidCrystal(uint8_t rs,  uint8_t enable,
			     uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3)
    344e:	8f 92       	push	r8
    3450:	af 92       	push	r10
    3452:	cf 92       	push	r12
    3454:	ef 92       	push	r14
    3456:	0f 93       	push	r16
    3458:	1f 93       	push	r17
    345a:	cf 93       	push	r28
    345c:	df 93       	push	r29
    345e:	dc 01       	movw	r26, r24
    3460:	36 2f       	mov	r19, r22
    3462:	54 2f       	mov	r21, r20
    3464:	72 2f       	mov	r23, r18
    3466:	10 2f       	mov	r17, r16
    3468:	ae 2c       	mov	r10, r14
    346a:	8c 2c       	mov	r8, r12
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    346c:	13 96       	adiw	r26, 0x03	; 3
    346e:	1c 92       	st	X, r1
    3470:	1e 92       	st	-X, r1
    3472:	12 97       	sbiw	r26, 0x02	; 2
    3474:	88 ef       	ldi	r24, 0xF8	; 248
    3476:	94 e0       	ldi	r25, 0x04	; 4
    3478:	11 96       	adiw	r26, 0x01	; 1
    347a:	9c 93       	st	X, r25
    347c:	8e 93       	st	-X, r24
{
  init(1, rs, 255, enable, d0, d1, d2, d3, 0, 0, 0, 0);
    347e:	00 d0       	rcall	.+0      	; 0x3480 <_ZN13LiquidCrystalC1Ehhhhhh+0x32>
    3480:	0f 92       	push	r0
    3482:	ed b7       	in	r30, 0x3d	; 61
    3484:	fe b7       	in	r31, 0x3e	; 62
    3486:	31 96       	adiw	r30, 0x01	; 1
    3488:	cd b7       	in	r28, 0x3d	; 61
    348a:	de b7       	in	r29, 0x3e	; 62
    348c:	19 82       	std	Y+1, r1	; 0x01
    348e:	11 82       	std	Z+1, r1	; 0x01
    3490:	12 82       	std	Z+2, r1	; 0x02
    3492:	13 82       	std	Z+3, r1	; 0x03
    3494:	cd 01       	movw	r24, r26
    3496:	61 e0       	ldi	r22, 0x01	; 1
    3498:	43 2f       	mov	r20, r19
    349a:	2f ef       	ldi	r18, 0xFF	; 255
    349c:	05 2f       	mov	r16, r21
    349e:	e7 2e       	mov	r14, r23
    34a0:	c1 2e       	mov	r12, r17
    34a2:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>
    34a6:	0f 90       	pop	r0
    34a8:	0f 90       	pop	r0
    34aa:	0f 90       	pop	r0
    34ac:	0f 90       	pop	r0
}
    34ae:	df 91       	pop	r29
    34b0:	cf 91       	pop	r28
    34b2:	1f 91       	pop	r17
    34b4:	0f 91       	pop	r16
    34b6:	ef 90       	pop	r14
    34b8:	cf 90       	pop	r12
    34ba:	af 90       	pop	r10
    34bc:	8f 90       	pop	r8
    34be:	08 95       	ret

000034c0 <_ZN11EEPROMClass4readEi>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    34c0:	f9 99       	sbic	0x1f, 1	; 31
    34c2:	fe cf       	rjmp	.-4      	; 0x34c0 <_ZN11EEPROMClass4readEi>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    34c4:	72 bd       	out	0x22, r23	; 34
    34c6:	61 bd       	out	0x21, r22	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    34c8:	f8 9a       	sbi	0x1f, 0	; 31
    34ca:	80 b5       	in	r24, 0x20	; 32
 ******************************************************************************/

uint8_t EEPROMClass::read(int address)
{
	return eeprom_read_byte((unsigned char *) address);
}
    34cc:	08 95       	ret

000034ce <_ZN11EEPROMClass5writeEih>:
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    34ce:	f9 99       	sbic	0x1f, 1	; 31
    34d0:	fe cf       	rjmp	.-4      	; 0x34ce <_ZN11EEPROMClass5writeEih>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    34d2:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    34d4:	72 bd       	out	0x22, r23	; 34
    34d6:	61 bd       	out	0x21, r22	; 33
#endif
    EEDR = __value;
    34d8:	40 bd       	out	0x20, r20	; 32
        : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
    34da:	0f b6       	in	r0, 0x3f	; 63
    34dc:	f8 94       	cli
    34de:	fa 9a       	sbi	0x1f, 2	; 31
    34e0:	f9 9a       	sbi	0x1f, 1	; 31
    34e2:	0f be       	out	0x3f, r0	; 63

void EEPROMClass::write(int address, uint8_t value)
{
	eeprom_write_byte((unsigned char *) address, value);
}
    34e4:	08 95       	ret

000034e6 <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    34e6:	08 95       	ret

000034e8 <__vector_25>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  SIGNAL(USART_RX_vect)
#elif defined(SIG_USART0_RECV)
  SIGNAL(SIG_USART0_RECV)
    34e8:	1f 92       	push	r1
    34ea:	0f 92       	push	r0
    34ec:	0f b6       	in	r0, 0x3f	; 63
    34ee:	0f 92       	push	r0
    34f0:	0b b6       	in	r0, 0x3b	; 59
    34f2:	0f 92       	push	r0
    34f4:	11 24       	eor	r1, r1
    34f6:	2f 93       	push	r18
    34f8:	3f 93       	push	r19
    34fa:	4f 93       	push	r20
    34fc:	8f 93       	push	r24
    34fe:	9f 93       	push	r25
    3500:	ef 93       	push	r30
    3502:	ff 93       	push	r31
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
    3504:	80 91 c0 00 	lds	r24, 0x00C0
    3508:	82 fd       	sbrc	r24, 2
    350a:	1d c0       	rjmp	.+58     	; 0x3546 <__vector_25+0x5e>
      unsigned char c = UDR0;
    350c:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    3510:	20 91 c2 05 	lds	r18, 0x05C2
    3514:	30 91 c3 05 	lds	r19, 0x05C3

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    3518:	2f 5f       	subi	r18, 0xFF	; 255
    351a:	3f 4f       	sbci	r19, 0xFF	; 255
    351c:	2f 73       	andi	r18, 0x3F	; 63
    351e:	30 70       	andi	r19, 0x00	; 0
    3520:	80 91 c4 05 	lds	r24, 0x05C4
    3524:	90 91 c5 05 	lds	r25, 0x05C5
    3528:	28 17       	cp	r18, r24
    352a:	39 07       	cpc	r19, r25
    352c:	71 f0       	breq	.+28     	; 0x354a <__vector_25+0x62>
    buffer->buffer[buffer->head] = c;
    352e:	e0 91 c2 05 	lds	r30, 0x05C2
    3532:	f0 91 c3 05 	lds	r31, 0x05C3
    3536:	ee 57       	subi	r30, 0x7E	; 126
    3538:	fa 4f       	sbci	r31, 0xFA	; 250
    353a:	40 83       	st	Z, r20
    buffer->head = i;
    353c:	30 93 c3 05 	sts	0x05C3, r19
    3540:	20 93 c2 05 	sts	0x05C2, r18
    3544:	02 c0       	rjmp	.+4      	; 0x354a <__vector_25+0x62>
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
      unsigned char c = UDR0;
      store_char(c, &rx_buffer);
    } else {
      unsigned char c = UDR0;
    3546:	80 91 c6 00 	lds	r24, 0x00C6
      unsigned char c = UDR;
    };
  #else
    #error UDR not defined
  #endif
  }
    354a:	ff 91       	pop	r31
    354c:	ef 91       	pop	r30
    354e:	9f 91       	pop	r25
    3550:	8f 91       	pop	r24
    3552:	4f 91       	pop	r20
    3554:	3f 91       	pop	r19
    3556:	2f 91       	pop	r18
    3558:	0f 90       	pop	r0
    355a:	0b be       	out	0x3b, r0	; 59
    355c:	0f 90       	pop	r0
    355e:	0f be       	out	0x3f, r0	; 63
    3560:	0f 90       	pop	r0
    3562:	1f 90       	pop	r1
    3564:	18 95       	reti

00003566 <_Z12serialEvent1v>:
#endif
#endif

#if defined(USART1_RX_vect)
  void serialEvent1() __attribute__((weak));
  void serialEvent1() {}
    3566:	08 95       	ret

00003568 <__vector_36>:
  #define serialEvent1_implemented
  SIGNAL(USART1_RX_vect)
    3568:	1f 92       	push	r1
    356a:	0f 92       	push	r0
    356c:	0f b6       	in	r0, 0x3f	; 63
    356e:	0f 92       	push	r0
    3570:	0b b6       	in	r0, 0x3b	; 59
    3572:	0f 92       	push	r0
    3574:	11 24       	eor	r1, r1
    3576:	2f 93       	push	r18
    3578:	3f 93       	push	r19
    357a:	4f 93       	push	r20
    357c:	8f 93       	push	r24
    357e:	9f 93       	push	r25
    3580:	ef 93       	push	r30
    3582:	ff 93       	push	r31
  {
    if (bit_is_clear(UCSR1A, UPE1)) {
    3584:	80 91 c8 00 	lds	r24, 0x00C8
    3588:	82 fd       	sbrc	r24, 2
    358a:	1d c0       	rjmp	.+58     	; 0x35c6 <__vector_36+0x5e>
      unsigned char c = UDR1;
    358c:	40 91 ce 00 	lds	r20, 0x00CE
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    3590:	20 91 4a 06 	lds	r18, 0x064A
    3594:	30 91 4b 06 	lds	r19, 0x064B

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    3598:	2f 5f       	subi	r18, 0xFF	; 255
    359a:	3f 4f       	sbci	r19, 0xFF	; 255
    359c:	2f 73       	andi	r18, 0x3F	; 63
    359e:	30 70       	andi	r19, 0x00	; 0
    35a0:	80 91 4c 06 	lds	r24, 0x064C
    35a4:	90 91 4d 06 	lds	r25, 0x064D
    35a8:	28 17       	cp	r18, r24
    35aa:	39 07       	cpc	r19, r25
    35ac:	71 f0       	breq	.+28     	; 0x35ca <__vector_36+0x62>
    buffer->buffer[buffer->head] = c;
    35ae:	e0 91 4a 06 	lds	r30, 0x064A
    35b2:	f0 91 4b 06 	lds	r31, 0x064B
    35b6:	e6 5f       	subi	r30, 0xF6	; 246
    35b8:	f9 4f       	sbci	r31, 0xF9	; 249
    35ba:	40 83       	st	Z, r20
    buffer->head = i;
    35bc:	30 93 4b 06 	sts	0x064B, r19
    35c0:	20 93 4a 06 	sts	0x064A, r18
    35c4:	02 c0       	rjmp	.+4      	; 0x35ca <__vector_36+0x62>
  {
    if (bit_is_clear(UCSR1A, UPE1)) {
      unsigned char c = UDR1;
      store_char(c, &rx_buffer1);
    } else {
      unsigned char c = UDR1;
    35c6:	80 91 ce 00 	lds	r24, 0x00CE
    };
  }
    35ca:	ff 91       	pop	r31
    35cc:	ef 91       	pop	r30
    35ce:	9f 91       	pop	r25
    35d0:	8f 91       	pop	r24
    35d2:	4f 91       	pop	r20
    35d4:	3f 91       	pop	r19
    35d6:	2f 91       	pop	r18
    35d8:	0f 90       	pop	r0
    35da:	0b be       	out	0x3b, r0	; 59
    35dc:	0f 90       	pop	r0
    35de:	0f be       	out	0x3f, r0	; 63
    35e0:	0f 90       	pop	r0
    35e2:	1f 90       	pop	r1
    35e4:	18 95       	reti

000035e6 <_Z12serialEvent2v>:
  #error SIG_USART1_RECV
#endif

#if defined(USART2_RX_vect) && defined(UDR2)
  void serialEvent2() __attribute__((weak));
  void serialEvent2() {}
    35e6:	08 95       	ret

000035e8 <__vector_51>:
  #define serialEvent2_implemented
  SIGNAL(USART2_RX_vect)
    35e8:	1f 92       	push	r1
    35ea:	0f 92       	push	r0
    35ec:	0f b6       	in	r0, 0x3f	; 63
    35ee:	0f 92       	push	r0
    35f0:	0b b6       	in	r0, 0x3b	; 59
    35f2:	0f 92       	push	r0
    35f4:	11 24       	eor	r1, r1
    35f6:	2f 93       	push	r18
    35f8:	3f 93       	push	r19
    35fa:	4f 93       	push	r20
    35fc:	8f 93       	push	r24
    35fe:	9f 93       	push	r25
    3600:	ef 93       	push	r30
    3602:	ff 93       	push	r31
  {
    if (bit_is_clear(UCSR2A, UPE2)) {
    3604:	80 91 d0 00 	lds	r24, 0x00D0
    3608:	82 fd       	sbrc	r24, 2
    360a:	1d c0       	rjmp	.+58     	; 0x3646 <__vector_51+0x5e>
      unsigned char c = UDR2;
    360c:	40 91 d6 00 	lds	r20, 0x00D6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    3610:	20 91 d2 06 	lds	r18, 0x06D2
    3614:	30 91 d3 06 	lds	r19, 0x06D3

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    3618:	2f 5f       	subi	r18, 0xFF	; 255
    361a:	3f 4f       	sbci	r19, 0xFF	; 255
    361c:	2f 73       	andi	r18, 0x3F	; 63
    361e:	30 70       	andi	r19, 0x00	; 0
    3620:	80 91 d4 06 	lds	r24, 0x06D4
    3624:	90 91 d5 06 	lds	r25, 0x06D5
    3628:	28 17       	cp	r18, r24
    362a:	39 07       	cpc	r19, r25
    362c:	71 f0       	breq	.+28     	; 0x364a <__vector_51+0x62>
    buffer->buffer[buffer->head] = c;
    362e:	e0 91 d2 06 	lds	r30, 0x06D2
    3632:	f0 91 d3 06 	lds	r31, 0x06D3
    3636:	ee 56       	subi	r30, 0x6E	; 110
    3638:	f9 4f       	sbci	r31, 0xF9	; 249
    363a:	40 83       	st	Z, r20
    buffer->head = i;
    363c:	30 93 d3 06 	sts	0x06D3, r19
    3640:	20 93 d2 06 	sts	0x06D2, r18
    3644:	02 c0       	rjmp	.+4      	; 0x364a <__vector_51+0x62>
  {
    if (bit_is_clear(UCSR2A, UPE2)) {
      unsigned char c = UDR2;
      store_char(c, &rx_buffer2);
    } else {
      unsigned char c = UDR2;
    3646:	80 91 d6 00 	lds	r24, 0x00D6
    };
  }
    364a:	ff 91       	pop	r31
    364c:	ef 91       	pop	r30
    364e:	9f 91       	pop	r25
    3650:	8f 91       	pop	r24
    3652:	4f 91       	pop	r20
    3654:	3f 91       	pop	r19
    3656:	2f 91       	pop	r18
    3658:	0f 90       	pop	r0
    365a:	0b be       	out	0x3b, r0	; 59
    365c:	0f 90       	pop	r0
    365e:	0f be       	out	0x3f, r0	; 63
    3660:	0f 90       	pop	r0
    3662:	1f 90       	pop	r1
    3664:	18 95       	reti

00003666 <_Z12serialEvent3v>:
  #error SIG_USART2_RECV
#endif

#if defined(USART3_RX_vect) && defined(UDR3)
  void serialEvent3() __attribute__((weak));
  void serialEvent3() {}
    3666:	08 95       	ret

00003668 <__vector_54>:
  #define serialEvent3_implemented
  SIGNAL(USART3_RX_vect)
    3668:	1f 92       	push	r1
    366a:	0f 92       	push	r0
    366c:	0f b6       	in	r0, 0x3f	; 63
    366e:	0f 92       	push	r0
    3670:	0b b6       	in	r0, 0x3b	; 59
    3672:	0f 92       	push	r0
    3674:	11 24       	eor	r1, r1
    3676:	2f 93       	push	r18
    3678:	3f 93       	push	r19
    367a:	4f 93       	push	r20
    367c:	8f 93       	push	r24
    367e:	9f 93       	push	r25
    3680:	ef 93       	push	r30
    3682:	ff 93       	push	r31
  {
    if (bit_is_clear(UCSR3A, UPE3)) {
    3684:	80 91 30 01 	lds	r24, 0x0130
    3688:	82 fd       	sbrc	r24, 2
    368a:	1d c0       	rjmp	.+58     	; 0x36c6 <__vector_54+0x5e>
      unsigned char c = UDR3;
    368c:	40 91 36 01 	lds	r20, 0x0136
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    3690:	20 91 5a 07 	lds	r18, 0x075A
    3694:	30 91 5b 07 	lds	r19, 0x075B

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    3698:	2f 5f       	subi	r18, 0xFF	; 255
    369a:	3f 4f       	sbci	r19, 0xFF	; 255
    369c:	2f 73       	andi	r18, 0x3F	; 63
    369e:	30 70       	andi	r19, 0x00	; 0
    36a0:	80 91 5c 07 	lds	r24, 0x075C
    36a4:	90 91 5d 07 	lds	r25, 0x075D
    36a8:	28 17       	cp	r18, r24
    36aa:	39 07       	cpc	r19, r25
    36ac:	71 f0       	breq	.+28     	; 0x36ca <__vector_54+0x62>
    buffer->buffer[buffer->head] = c;
    36ae:	e0 91 5a 07 	lds	r30, 0x075A
    36b2:	f0 91 5b 07 	lds	r31, 0x075B
    36b6:	e6 5e       	subi	r30, 0xE6	; 230
    36b8:	f8 4f       	sbci	r31, 0xF8	; 248
    36ba:	40 83       	st	Z, r20
    buffer->head = i;
    36bc:	30 93 5b 07 	sts	0x075B, r19
    36c0:	20 93 5a 07 	sts	0x075A, r18
    36c4:	02 c0       	rjmp	.+4      	; 0x36ca <__vector_54+0x62>
  {
    if (bit_is_clear(UCSR3A, UPE3)) {
      unsigned char c = UDR3;
      store_char(c, &rx_buffer3);
    } else {
      unsigned char c = UDR3;
    36c6:	80 91 36 01 	lds	r24, 0x0136
    };
  }
    36ca:	ff 91       	pop	r31
    36cc:	ef 91       	pop	r30
    36ce:	9f 91       	pop	r25
    36d0:	8f 91       	pop	r24
    36d2:	4f 91       	pop	r20
    36d4:	3f 91       	pop	r19
    36d6:	2f 91       	pop	r18
    36d8:	0f 90       	pop	r0
    36da:	0b be       	out	0x3b, r0	; 59
    36dc:	0f 90       	pop	r0
    36de:	0f be       	out	0x3f, r0	; 63
    36e0:	0f 90       	pop	r0
    36e2:	1f 90       	pop	r1
    36e4:	18 95       	reti

000036e6 <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    36e6:	e0 91 ae 07 	lds	r30, 0x07AE
    36ea:	f0 91 af 07 	lds	r31, 0x07AF
    36ee:	e0 5c       	subi	r30, 0xC0	; 192
    36f0:	ff 4f       	sbci	r31, 0xFF	; 255
    36f2:	81 91       	ld	r24, Z+
    36f4:	91 91       	ld	r25, Z+
    36f6:	20 81       	ld	r18, Z
    36f8:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    36fa:	82 1b       	sub	r24, r18
    36fc:	93 0b       	sbc	r25, r19
    36fe:	8f 73       	andi	r24, 0x3F	; 63
    3700:	90 70       	andi	r25, 0x00	; 0
    3702:	89 2b       	or	r24, r25
    3704:	11 f0       	breq	.+4      	; 0x370a <_Z14serialEventRunv+0x24>
    3706:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <_Z11serialEventv>
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    370a:	e0 91 d0 07 	lds	r30, 0x07D0
    370e:	f0 91 d1 07 	lds	r31, 0x07D1
    3712:	e0 5c       	subi	r30, 0xC0	; 192
    3714:	ff 4f       	sbci	r31, 0xFF	; 255
    3716:	81 91       	ld	r24, Z+
    3718:	91 91       	ld	r25, Z+
    371a:	20 81       	ld	r18, Z
    371c:	31 81       	ldd	r19, Z+1	; 0x01
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
#endif
#ifdef serialEvent1_implemented
  if (Serial1.available()) serialEvent1();
    371e:	82 1b       	sub	r24, r18
    3720:	93 0b       	sbc	r25, r19
    3722:	8f 73       	andi	r24, 0x3F	; 63
    3724:	90 70       	andi	r25, 0x00	; 0
    3726:	89 2b       	or	r24, r25
    3728:	11 f0       	breq	.+4      	; 0x372e <_Z14serialEventRunv+0x48>
    372a:	0e 94 b3 1a 	call	0x3566	; 0x3566 <_Z12serialEvent1v>
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    372e:	e0 91 f2 07 	lds	r30, 0x07F2
    3732:	f0 91 f3 07 	lds	r31, 0x07F3
    3736:	e0 5c       	subi	r30, 0xC0	; 192
    3738:	ff 4f       	sbci	r31, 0xFF	; 255
    373a:	81 91       	ld	r24, Z+
    373c:	91 91       	ld	r25, Z+
    373e:	20 81       	ld	r18, Z
    3740:	31 81       	ldd	r19, Z+1	; 0x01
#endif
#ifdef serialEvent1_implemented
  if (Serial1.available()) serialEvent1();
#endif
#ifdef serialEvent2_implemented
  if (Serial2.available()) serialEvent2();
    3742:	82 1b       	sub	r24, r18
    3744:	93 0b       	sbc	r25, r19
    3746:	8f 73       	andi	r24, 0x3F	; 63
    3748:	90 70       	andi	r25, 0x00	; 0
    374a:	89 2b       	or	r24, r25
    374c:	11 f0       	breq	.+4      	; 0x3752 <_Z14serialEventRunv+0x6c>
    374e:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <_Z12serialEvent2v>
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    3752:	e0 91 14 08 	lds	r30, 0x0814
    3756:	f0 91 15 08 	lds	r31, 0x0815
    375a:	e0 5c       	subi	r30, 0xC0	; 192
    375c:	ff 4f       	sbci	r31, 0xFF	; 255
    375e:	81 91       	ld	r24, Z+
    3760:	91 91       	ld	r25, Z+
    3762:	20 81       	ld	r18, Z
    3764:	31 81       	ldd	r19, Z+1	; 0x01
#endif
#ifdef serialEvent2_implemented
  if (Serial2.available()) serialEvent2();
#endif
#ifdef serialEvent3_implemented
  if (Serial3.available()) serialEvent3();
    3766:	82 1b       	sub	r24, r18
    3768:	93 0b       	sbc	r25, r19
    376a:	8f 73       	andi	r24, 0x3F	; 63
    376c:	90 70       	andi	r25, 0x00	; 0
    376e:	89 2b       	or	r24, r25
    3770:	11 f0       	breq	.+4      	; 0x3776 <_Z14serialEventRunv+0x90>
    3772:	0e 94 33 1b 	call	0x3666	; 0x3666 <_Z12serialEvent3v>
    3776:	08 95       	ret

00003778 <__vector_26>:
#if defined(UART0_UDRE_vect)
ISR(UART0_UDRE_vect)
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
    3778:	1f 92       	push	r1
    377a:	0f 92       	push	r0
    377c:	0f b6       	in	r0, 0x3f	; 63
    377e:	0f 92       	push	r0
    3780:	0b b6       	in	r0, 0x3b	; 59
    3782:	0f 92       	push	r0
    3784:	11 24       	eor	r1, r1
    3786:	2f 93       	push	r18
    3788:	3f 93       	push	r19
    378a:	8f 93       	push	r24
    378c:	9f 93       	push	r25
    378e:	ef 93       	push	r30
    3790:	ff 93       	push	r31
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    3792:	20 91 06 06 	lds	r18, 0x0606
    3796:	30 91 07 06 	lds	r19, 0x0607
    379a:	80 91 08 06 	lds	r24, 0x0608
    379e:	90 91 09 06 	lds	r25, 0x0609
    37a2:	28 17       	cp	r18, r24
    37a4:	39 07       	cpc	r19, r25
    37a6:	31 f4       	brne	.+12     	; 0x37b4 <__vector_26+0x3c>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    37a8:	80 91 c1 00 	lds	r24, 0x00C1
    37ac:	8f 7d       	andi	r24, 0xDF	; 223
    37ae:	80 93 c1 00 	sts	0x00C1, r24
    37b2:	14 c0       	rjmp	.+40     	; 0x37dc <__vector_26+0x64>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    37b4:	e0 91 08 06 	lds	r30, 0x0608
    37b8:	f0 91 09 06 	lds	r31, 0x0609
    37bc:	ea 53       	subi	r30, 0x3A	; 58
    37be:	fa 4f       	sbci	r31, 0xFA	; 250
    37c0:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    37c2:	80 91 08 06 	lds	r24, 0x0608
    37c6:	90 91 09 06 	lds	r25, 0x0609
    37ca:	01 96       	adiw	r24, 0x01	; 1
    37cc:	8f 73       	andi	r24, 0x3F	; 63
    37ce:	90 70       	andi	r25, 0x00	; 0
    37d0:	90 93 09 06 	sts	0x0609, r25
    37d4:	80 93 08 06 	sts	0x0608, r24
	
  #if defined(UDR0)
    UDR0 = c;
    37d8:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    37dc:	ff 91       	pop	r31
    37de:	ef 91       	pop	r30
    37e0:	9f 91       	pop	r25
    37e2:	8f 91       	pop	r24
    37e4:	3f 91       	pop	r19
    37e6:	2f 91       	pop	r18
    37e8:	0f 90       	pop	r0
    37ea:	0b be       	out	0x3b, r0	; 59
    37ec:	0f 90       	pop	r0
    37ee:	0f be       	out	0x3f, r0	; 63
    37f0:	0f 90       	pop	r0
    37f2:	1f 90       	pop	r1
    37f4:	18 95       	reti

000037f6 <__vector_37>:
#endif
#endif

#ifdef USART1_UDRE_vect
ISR(USART1_UDRE_vect)
    37f6:	1f 92       	push	r1
    37f8:	0f 92       	push	r0
    37fa:	0f b6       	in	r0, 0x3f	; 63
    37fc:	0f 92       	push	r0
    37fe:	0b b6       	in	r0, 0x3b	; 59
    3800:	0f 92       	push	r0
    3802:	11 24       	eor	r1, r1
    3804:	2f 93       	push	r18
    3806:	3f 93       	push	r19
    3808:	8f 93       	push	r24
    380a:	9f 93       	push	r25
    380c:	ef 93       	push	r30
    380e:	ff 93       	push	r31
{
  if (tx_buffer1.head == tx_buffer1.tail) {
    3810:	20 91 8e 06 	lds	r18, 0x068E
    3814:	30 91 8f 06 	lds	r19, 0x068F
    3818:	80 91 90 06 	lds	r24, 0x0690
    381c:	90 91 91 06 	lds	r25, 0x0691
    3820:	28 17       	cp	r18, r24
    3822:	39 07       	cpc	r19, r25
    3824:	31 f4       	brne	.+12     	; 0x3832 <__vector_37+0x3c>
	// Buffer empty, so disable interrupts
    cbi(UCSR1B, UDRIE1);
    3826:	80 91 c9 00 	lds	r24, 0x00C9
    382a:	8f 7d       	andi	r24, 0xDF	; 223
    382c:	80 93 c9 00 	sts	0x00C9, r24
    3830:	14 c0       	rjmp	.+40     	; 0x385a <__vector_37+0x64>
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
    3832:	e0 91 90 06 	lds	r30, 0x0690
    3836:	f0 91 91 06 	lds	r31, 0x0691
    383a:	e2 5b       	subi	r30, 0xB2	; 178
    383c:	f9 4f       	sbci	r31, 0xF9	; 249
    383e:	20 81       	ld	r18, Z
    tx_buffer1.tail = (tx_buffer1.tail + 1) % SERIAL_BUFFER_SIZE;
    3840:	80 91 90 06 	lds	r24, 0x0690
    3844:	90 91 91 06 	lds	r25, 0x0691
    3848:	01 96       	adiw	r24, 0x01	; 1
    384a:	8f 73       	andi	r24, 0x3F	; 63
    384c:	90 70       	andi	r25, 0x00	; 0
    384e:	90 93 91 06 	sts	0x0691, r25
    3852:	80 93 90 06 	sts	0x0690, r24
	
    UDR1 = c;
    3856:	20 93 ce 00 	sts	0x00CE, r18
  }
}
    385a:	ff 91       	pop	r31
    385c:	ef 91       	pop	r30
    385e:	9f 91       	pop	r25
    3860:	8f 91       	pop	r24
    3862:	3f 91       	pop	r19
    3864:	2f 91       	pop	r18
    3866:	0f 90       	pop	r0
    3868:	0b be       	out	0x3b, r0	; 59
    386a:	0f 90       	pop	r0
    386c:	0f be       	out	0x3f, r0	; 63
    386e:	0f 90       	pop	r0
    3870:	1f 90       	pop	r1
    3872:	18 95       	reti

00003874 <__vector_52>:
#endif

#ifdef USART2_UDRE_vect
ISR(USART2_UDRE_vect)
    3874:	1f 92       	push	r1
    3876:	0f 92       	push	r0
    3878:	0f b6       	in	r0, 0x3f	; 63
    387a:	0f 92       	push	r0
    387c:	0b b6       	in	r0, 0x3b	; 59
    387e:	0f 92       	push	r0
    3880:	11 24       	eor	r1, r1
    3882:	2f 93       	push	r18
    3884:	3f 93       	push	r19
    3886:	8f 93       	push	r24
    3888:	9f 93       	push	r25
    388a:	ef 93       	push	r30
    388c:	ff 93       	push	r31
{
  if (tx_buffer2.head == tx_buffer2.tail) {
    388e:	20 91 16 07 	lds	r18, 0x0716
    3892:	30 91 17 07 	lds	r19, 0x0717
    3896:	80 91 18 07 	lds	r24, 0x0718
    389a:	90 91 19 07 	lds	r25, 0x0719
    389e:	28 17       	cp	r18, r24
    38a0:	39 07       	cpc	r19, r25
    38a2:	31 f4       	brne	.+12     	; 0x38b0 <__vector_52+0x3c>
	// Buffer empty, so disable interrupts
    cbi(UCSR2B, UDRIE2);
    38a4:	80 91 d1 00 	lds	r24, 0x00D1
    38a8:	8f 7d       	andi	r24, 0xDF	; 223
    38aa:	80 93 d1 00 	sts	0x00D1, r24
    38ae:	14 c0       	rjmp	.+40     	; 0x38d8 <__vector_52+0x64>
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
    38b0:	e0 91 18 07 	lds	r30, 0x0718
    38b4:	f0 91 19 07 	lds	r31, 0x0719
    38b8:	ea 52       	subi	r30, 0x2A	; 42
    38ba:	f9 4f       	sbci	r31, 0xF9	; 249
    38bc:	20 81       	ld	r18, Z
    tx_buffer2.tail = (tx_buffer2.tail + 1) % SERIAL_BUFFER_SIZE;
    38be:	80 91 18 07 	lds	r24, 0x0718
    38c2:	90 91 19 07 	lds	r25, 0x0719
    38c6:	01 96       	adiw	r24, 0x01	; 1
    38c8:	8f 73       	andi	r24, 0x3F	; 63
    38ca:	90 70       	andi	r25, 0x00	; 0
    38cc:	90 93 19 07 	sts	0x0719, r25
    38d0:	80 93 18 07 	sts	0x0718, r24
	
    UDR2 = c;
    38d4:	20 93 d6 00 	sts	0x00D6, r18
  }
}
    38d8:	ff 91       	pop	r31
    38da:	ef 91       	pop	r30
    38dc:	9f 91       	pop	r25
    38de:	8f 91       	pop	r24
    38e0:	3f 91       	pop	r19
    38e2:	2f 91       	pop	r18
    38e4:	0f 90       	pop	r0
    38e6:	0b be       	out	0x3b, r0	; 59
    38e8:	0f 90       	pop	r0
    38ea:	0f be       	out	0x3f, r0	; 63
    38ec:	0f 90       	pop	r0
    38ee:	1f 90       	pop	r1
    38f0:	18 95       	reti

000038f2 <__vector_55>:
#endif

#ifdef USART3_UDRE_vect
ISR(USART3_UDRE_vect)
    38f2:	1f 92       	push	r1
    38f4:	0f 92       	push	r0
    38f6:	0f b6       	in	r0, 0x3f	; 63
    38f8:	0f 92       	push	r0
    38fa:	0b b6       	in	r0, 0x3b	; 59
    38fc:	0f 92       	push	r0
    38fe:	11 24       	eor	r1, r1
    3900:	2f 93       	push	r18
    3902:	3f 93       	push	r19
    3904:	8f 93       	push	r24
    3906:	9f 93       	push	r25
    3908:	ef 93       	push	r30
    390a:	ff 93       	push	r31
{
  if (tx_buffer3.head == tx_buffer3.tail) {
    390c:	20 91 9e 07 	lds	r18, 0x079E
    3910:	30 91 9f 07 	lds	r19, 0x079F
    3914:	80 91 a0 07 	lds	r24, 0x07A0
    3918:	90 91 a1 07 	lds	r25, 0x07A1
    391c:	28 17       	cp	r18, r24
    391e:	39 07       	cpc	r19, r25
    3920:	31 f4       	brne	.+12     	; 0x392e <__vector_55+0x3c>
	// Buffer empty, so disable interrupts
    cbi(UCSR3B, UDRIE3);
    3922:	80 91 31 01 	lds	r24, 0x0131
    3926:	8f 7d       	andi	r24, 0xDF	; 223
    3928:	80 93 31 01 	sts	0x0131, r24
    392c:	14 c0       	rjmp	.+40     	; 0x3956 <__vector_55+0x64>
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer3.buffer[tx_buffer3.tail];
    392e:	e0 91 a0 07 	lds	r30, 0x07A0
    3932:	f0 91 a1 07 	lds	r31, 0x07A1
    3936:	e2 5a       	subi	r30, 0xA2	; 162
    3938:	f8 4f       	sbci	r31, 0xF8	; 248
    393a:	20 81       	ld	r18, Z
    tx_buffer3.tail = (tx_buffer3.tail + 1) % SERIAL_BUFFER_SIZE;
    393c:	80 91 a0 07 	lds	r24, 0x07A0
    3940:	90 91 a1 07 	lds	r25, 0x07A1
    3944:	01 96       	adiw	r24, 0x01	; 1
    3946:	8f 73       	andi	r24, 0x3F	; 63
    3948:	90 70       	andi	r25, 0x00	; 0
    394a:	90 93 a1 07 	sts	0x07A1, r25
    394e:	80 93 a0 07 	sts	0x07A0, r24
	
    UDR3 = c;
    3952:	20 93 36 01 	sts	0x0136, r18
  }
}
    3956:	ff 91       	pop	r31
    3958:	ef 91       	pop	r30
    395a:	9f 91       	pop	r25
    395c:	8f 91       	pop	r24
    395e:	3f 91       	pop	r19
    3960:	2f 91       	pop	r18
    3962:	0f 90       	pop	r0
    3964:	0b be       	out	0x3b, r0	; 59
    3966:	0f 90       	pop	r0
    3968:	0f be       	out	0x3f, r0	; 63
    396a:	0f 90       	pop	r0
    396c:	1f 90       	pop	r1
    396e:	18 95       	reti

00003970 <_ZN14HardwareSerial5beginEm>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    3970:	af 92       	push	r10
    3972:	bf 92       	push	r11
    3974:	df 92       	push	r13
    3976:	ef 92       	push	r14
    3978:	ff 92       	push	r15
    397a:	0f 93       	push	r16
    397c:	1f 93       	push	r17
    397e:	cf 93       	push	r28
    3980:	df 93       	push	r29
    3982:	ec 01       	movw	r28, r24
    3984:	7a 01       	movw	r14, r20
    3986:	8b 01       	movw	r16, r22
    3988:	dd 24       	eor	r13, r13
    398a:	40 30       	cpi	r20, 0x00	; 0
    398c:	81 ee       	ldi	r24, 0xE1	; 225
    398e:	58 07       	cpc	r21, r24
    3990:	80 e0       	ldi	r24, 0x00	; 0
    3992:	68 07       	cpc	r22, r24
    3994:	80 e0       	ldi	r24, 0x00	; 0
    3996:	78 07       	cpc	r23, r24
    3998:	11 f0       	breq	.+4      	; 0x399e <_ZN14HardwareSerial5beginEm+0x2e>
    399a:	dd 24       	eor	r13, r13
    399c:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    399e:	91 e0       	ldi	r25, 0x01	; 1
    39a0:	a9 2e       	mov	r10, r25
    39a2:	b1 2c       	mov	r11, r1
    39a4:	ec 89       	ldd	r30, Y+20	; 0x14
    39a6:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
    39a8:	dd 20       	and	r13, r13
    39aa:	69 f0       	breq	.+26     	; 0x39c6 <_ZN14HardwareSerial5beginEm+0x56>
    *_ucsra = 1 << _u2x;
    39ac:	c5 01       	movw	r24, r10
    39ae:	08 a0       	ldd	r0, Y+32	; 0x20
    39b0:	02 c0       	rjmp	.+4      	; 0x39b6 <_ZN14HardwareSerial5beginEm+0x46>
    39b2:	88 0f       	add	r24, r24
    39b4:	99 1f       	adc	r25, r25
    39b6:	0a 94       	dec	r0
    39b8:	e2 f7       	brpl	.-8      	; 0x39b2 <_ZN14HardwareSerial5beginEm+0x42>
    39ba:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    39bc:	60 e0       	ldi	r22, 0x00	; 0
    39be:	79 e0       	ldi	r23, 0x09	; 9
    39c0:	8d e3       	ldi	r24, 0x3D	; 61
    39c2:	90 e0       	ldi	r25, 0x00	; 0
    39c4:	05 c0       	rjmp	.+10     	; 0x39d0 <_ZN14HardwareSerial5beginEm+0x60>
  } else {
    *_ucsra = 0;
    39c6:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    39c8:	60 e8       	ldi	r22, 0x80	; 128
    39ca:	74 e8       	ldi	r23, 0x84	; 132
    39cc:	8e e1       	ldi	r24, 0x1E	; 30
    39ce:	90 e0       	ldi	r25, 0x00	; 0
    39d0:	a8 01       	movw	r20, r16
    39d2:	97 01       	movw	r18, r14
    39d4:	0e 94 86 24 	call	0x490c	; 0x490c <__udivmodsi4>
    39d8:	21 50       	subi	r18, 0x01	; 1
    39da:	30 40       	sbci	r19, 0x00	; 0
    39dc:	40 40       	sbci	r20, 0x00	; 0
    39de:	50 40       	sbci	r21, 0x00	; 0
    39e0:	56 95       	lsr	r21
    39e2:	47 95       	ror	r20
    39e4:	37 95       	ror	r19
    39e6:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    39e8:	80 e1       	ldi	r24, 0x10	; 16
    39ea:	20 30       	cpi	r18, 0x00	; 0
    39ec:	38 07       	cpc	r19, r24
    39ee:	20 f0       	brcs	.+8      	; 0x39f8 <_ZN14HardwareSerial5beginEm+0x88>
    39f0:	dd 20       	and	r13, r13
    39f2:	11 f0       	breq	.+4      	; 0x39f8 <_ZN14HardwareSerial5beginEm+0x88>
    39f4:	dd 24       	eor	r13, r13
    39f6:	d6 cf       	rjmp	.-84     	; 0x39a4 <_ZN14HardwareSerial5beginEm+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    39f8:	e8 89       	ldd	r30, Y+16	; 0x10
    39fa:	f9 89       	ldd	r31, Y+17	; 0x11
    39fc:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    39fe:	ea 89       	ldd	r30, Y+18	; 0x12
    3a00:	fb 89       	ldd	r31, Y+19	; 0x13
    3a02:	20 83       	st	Z, r18

  transmitting = false;
    3a04:	19 a2       	std	Y+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
    3a06:	ee 89       	ldd	r30, Y+22	; 0x16
    3a08:	ff 89       	ldd	r31, Y+23	; 0x17
    3a0a:	40 81       	ld	r20, Z
    3a0c:	21 e0       	ldi	r18, 0x01	; 1
    3a0e:	30 e0       	ldi	r19, 0x00	; 0
    3a10:	c9 01       	movw	r24, r18
    3a12:	0c 8c       	ldd	r0, Y+28	; 0x1c
    3a14:	02 c0       	rjmp	.+4      	; 0x3a1a <_ZN14HardwareSerial5beginEm+0xaa>
    3a16:	88 0f       	add	r24, r24
    3a18:	99 1f       	adc	r25, r25
    3a1a:	0a 94       	dec	r0
    3a1c:	e2 f7       	brpl	.-8      	; 0x3a16 <_ZN14HardwareSerial5beginEm+0xa6>
    3a1e:	48 2b       	or	r20, r24
    3a20:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    3a22:	ee 89       	ldd	r30, Y+22	; 0x16
    3a24:	ff 89       	ldd	r31, Y+23	; 0x17
    3a26:	40 81       	ld	r20, Z
    3a28:	c9 01       	movw	r24, r18
    3a2a:	0d 8c       	ldd	r0, Y+29	; 0x1d
    3a2c:	02 c0       	rjmp	.+4      	; 0x3a32 <_ZN14HardwareSerial5beginEm+0xc2>
    3a2e:	88 0f       	add	r24, r24
    3a30:	99 1f       	adc	r25, r25
    3a32:	0a 94       	dec	r0
    3a34:	e2 f7       	brpl	.-8      	; 0x3a2e <_ZN14HardwareSerial5beginEm+0xbe>
    3a36:	48 2b       	or	r20, r24
    3a38:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    3a3a:	ee 89       	ldd	r30, Y+22	; 0x16
    3a3c:	ff 89       	ldd	r31, Y+23	; 0x17
    3a3e:	40 81       	ld	r20, Z
    3a40:	c9 01       	movw	r24, r18
    3a42:	0e 8c       	ldd	r0, Y+30	; 0x1e
    3a44:	02 c0       	rjmp	.+4      	; 0x3a4a <_ZN14HardwareSerial5beginEm+0xda>
    3a46:	88 0f       	add	r24, r24
    3a48:	99 1f       	adc	r25, r25
    3a4a:	0a 94       	dec	r0
    3a4c:	e2 f7       	brpl	.-8      	; 0x3a46 <_ZN14HardwareSerial5beginEm+0xd6>
    3a4e:	48 2b       	or	r20, r24
    3a50:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    3a52:	ee 89       	ldd	r30, Y+22	; 0x16
    3a54:	ff 89       	ldd	r31, Y+23	; 0x17
    3a56:	80 81       	ld	r24, Z
    3a58:	0f 8c       	ldd	r0, Y+31	; 0x1f
    3a5a:	02 c0       	rjmp	.+4      	; 0x3a60 <_ZN14HardwareSerial5beginEm+0xf0>
    3a5c:	22 0f       	add	r18, r18
    3a5e:	33 1f       	adc	r19, r19
    3a60:	0a 94       	dec	r0
    3a62:	e2 f7       	brpl	.-8      	; 0x3a5c <_ZN14HardwareSerial5beginEm+0xec>
    3a64:	20 95       	com	r18
    3a66:	28 23       	and	r18, r24
    3a68:	20 83       	st	Z, r18
}
    3a6a:	df 91       	pop	r29
    3a6c:	cf 91       	pop	r28
    3a6e:	1f 91       	pop	r17
    3a70:	0f 91       	pop	r16
    3a72:	ff 90       	pop	r15
    3a74:	ef 90       	pop	r14
    3a76:	df 90       	pop	r13
    3a78:	bf 90       	pop	r11
    3a7a:	af 90       	pop	r10
    3a7c:	08 95       	ret

00003a7e <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    3a7e:	dc 01       	movw	r26, r24
    3a80:	1c 96       	adiw	r26, 0x0c	; 12
    3a82:	ed 91       	ld	r30, X+
    3a84:	fc 91       	ld	r31, X
    3a86:	1d 97       	sbiw	r26, 0x0d	; 13
    3a88:	e0 5c       	subi	r30, 0xC0	; 192
    3a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a8c:	21 91       	ld	r18, Z+
    3a8e:	31 91       	ld	r19, Z+
    3a90:	80 81       	ld	r24, Z
    3a92:	91 81       	ldd	r25, Z+1	; 0x01
    3a94:	28 1b       	sub	r18, r24
    3a96:	39 0b       	sbc	r19, r25
    3a98:	2f 73       	andi	r18, 0x3F	; 63
    3a9a:	30 70       	andi	r19, 0x00	; 0
}
    3a9c:	c9 01       	movw	r24, r18
    3a9e:	08 95       	ret

00003aa0 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    3aa0:	dc 01       	movw	r26, r24
    3aa2:	1c 96       	adiw	r26, 0x0c	; 12
    3aa4:	ed 91       	ld	r30, X+
    3aa6:	fc 91       	ld	r31, X
    3aa8:	1d 97       	sbiw	r26, 0x0d	; 13
    3aaa:	e0 5c       	subi	r30, 0xC0	; 192
    3aac:	ff 4f       	sbci	r31, 0xFF	; 255
    3aae:	20 81       	ld	r18, Z
    3ab0:	31 81       	ldd	r19, Z+1	; 0x01
    3ab2:	e0 54       	subi	r30, 0x40	; 64
    3ab4:	f0 40       	sbci	r31, 0x00	; 0
    3ab6:	df 01       	movw	r26, r30
    3ab8:	ae 5b       	subi	r26, 0xBE	; 190
    3aba:	bf 4f       	sbci	r27, 0xFF	; 255
    3abc:	8d 91       	ld	r24, X+
    3abe:	9c 91       	ld	r25, X
    3ac0:	11 97       	sbiw	r26, 0x01	; 1
    3ac2:	28 17       	cp	r18, r24
    3ac4:	39 07       	cpc	r19, r25
    3ac6:	19 f4       	brne	.+6      	; 0x3ace <_ZN14HardwareSerial4peekEv+0x2e>
    3ac8:	2f ef       	ldi	r18, 0xFF	; 255
    3aca:	3f ef       	ldi	r19, 0xFF	; 255
    3acc:	07 c0       	rjmp	.+14     	; 0x3adc <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    3ace:	8d 91       	ld	r24, X+
    3ad0:	9c 91       	ld	r25, X
    3ad2:	e8 0f       	add	r30, r24
    3ad4:	f9 1f       	adc	r31, r25
    3ad6:	80 81       	ld	r24, Z
    3ad8:	28 2f       	mov	r18, r24
    3ada:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    3adc:	c9 01       	movw	r24, r18
    3ade:	08 95       	ret

00003ae0 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    3ae0:	dc 01       	movw	r26, r24
    3ae2:	1c 96       	adiw	r26, 0x0c	; 12
    3ae4:	ed 91       	ld	r30, X+
    3ae6:	fc 91       	ld	r31, X
    3ae8:	1d 97       	sbiw	r26, 0x0d	; 13
    3aea:	e0 5c       	subi	r30, 0xC0	; 192
    3aec:	ff 4f       	sbci	r31, 0xFF	; 255
    3aee:	20 81       	ld	r18, Z
    3af0:	31 81       	ldd	r19, Z+1	; 0x01
    3af2:	e0 54       	subi	r30, 0x40	; 64
    3af4:	f0 40       	sbci	r31, 0x00	; 0
    3af6:	df 01       	movw	r26, r30
    3af8:	ae 5b       	subi	r26, 0xBE	; 190
    3afa:	bf 4f       	sbci	r27, 0xFF	; 255
    3afc:	8d 91       	ld	r24, X+
    3afe:	9c 91       	ld	r25, X
    3b00:	11 97       	sbiw	r26, 0x01	; 1
    3b02:	28 17       	cp	r18, r24
    3b04:	39 07       	cpc	r19, r25
    3b06:	19 f4       	brne	.+6      	; 0x3b0e <_ZN14HardwareSerial4readEv+0x2e>
    3b08:	2f ef       	ldi	r18, 0xFF	; 255
    3b0a:	3f ef       	ldi	r19, 0xFF	; 255
    3b0c:	10 c0       	rjmp	.+32     	; 0x3b2e <_ZN14HardwareSerial4readEv+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    3b0e:	8d 91       	ld	r24, X+
    3b10:	9c 91       	ld	r25, X
    3b12:	11 97       	sbiw	r26, 0x01	; 1
    3b14:	e8 0f       	add	r30, r24
    3b16:	f9 1f       	adc	r31, r25
    3b18:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    3b1a:	8d 91       	ld	r24, X+
    3b1c:	9c 91       	ld	r25, X
    3b1e:	11 97       	sbiw	r26, 0x01	; 1
    3b20:	01 96       	adiw	r24, 0x01	; 1
    3b22:	8f 73       	andi	r24, 0x3F	; 63
    3b24:	90 70       	andi	r25, 0x00	; 0
    3b26:	11 96       	adiw	r26, 0x01	; 1
    3b28:	9c 93       	st	X, r25
    3b2a:	8e 93       	st	-X, r24
    return c;
    3b2c:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    3b2e:	c9 01       	movw	r24, r18
    3b30:	08 95       	ret

00003b32 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
    3b32:	dc 01       	movw	r26, r24
{
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
    3b34:	91 96       	adiw	r26, 0x21	; 33
    3b36:	8c 91       	ld	r24, X
    3b38:	91 97       	sbiw	r26, 0x21	; 33
    3b3a:	88 23       	and	r24, r24
    3b3c:	39 f0       	breq	.+14     	; 0x3b4c <_ZN14HardwareSerial5flushEv+0x1a>
    3b3e:	54 96       	adiw	r26, 0x14	; 20
    3b40:	ed 91       	ld	r30, X+
    3b42:	fc 91       	ld	r31, X
    3b44:	55 97       	sbiw	r26, 0x15	; 21
    3b46:	80 81       	ld	r24, Z
    3b48:	86 ff       	sbrs	r24, 6
    3b4a:	f9 cf       	rjmp	.-14     	; 0x3b3e <_ZN14HardwareSerial5flushEv+0xc>
  transmitting = false;
    3b4c:	91 96       	adiw	r26, 0x21	; 33
    3b4e:	1c 92       	st	X, r1
}
    3b50:	08 95       	ret

00003b52 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
    3b52:	cf 93       	push	r28
    3b54:	df 93       	push	r29
    3b56:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    3b58:	ee 85       	ldd	r30, Y+14	; 0x0e
    3b5a:	ff 85       	ldd	r31, Y+15	; 0x0f
    3b5c:	e0 5c       	subi	r30, 0xC0	; 192
    3b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b60:	20 81       	ld	r18, Z
    3b62:	31 81       	ldd	r19, Z+1	; 0x01
    3b64:	e0 54       	subi	r30, 0x40	; 64
    3b66:	f0 40       	sbci	r31, 0x00	; 0
    3b68:	2f 5f       	subi	r18, 0xFF	; 255
    3b6a:	3f 4f       	sbci	r19, 0xFF	; 255
    3b6c:	2f 73       	andi	r18, 0x3F	; 63
    3b6e:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    3b70:	df 01       	movw	r26, r30
    3b72:	ae 5b       	subi	r26, 0xBE	; 190
    3b74:	bf 4f       	sbci	r27, 0xFF	; 255
    3b76:	8d 91       	ld	r24, X+
    3b78:	9c 91       	ld	r25, X
    3b7a:	11 97       	sbiw	r26, 0x01	; 1
    3b7c:	28 17       	cp	r18, r24
    3b7e:	39 07       	cpc	r19, r25
    3b80:	d1 f3       	breq	.-12     	; 0x3b76 <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    3b82:	e0 5c       	subi	r30, 0xC0	; 192
    3b84:	ff 4f       	sbci	r31, 0xFF	; 255
    3b86:	80 81       	ld	r24, Z
    3b88:	91 81       	ldd	r25, Z+1	; 0x01
    3b8a:	e0 54       	subi	r30, 0x40	; 64
    3b8c:	f0 40       	sbci	r31, 0x00	; 0
    3b8e:	e8 0f       	add	r30, r24
    3b90:	f9 1f       	adc	r31, r25
    3b92:	60 83       	st	Z, r22
  _tx_buffer->head = i;
    3b94:	ee 85       	ldd	r30, Y+14	; 0x0e
    3b96:	ff 85       	ldd	r31, Y+15	; 0x0f
    3b98:	e0 5c       	subi	r30, 0xC0	; 192
    3b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b9c:	31 83       	std	Z+1, r19	; 0x01
    3b9e:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    3ba0:	ee 89       	ldd	r30, Y+22	; 0x16
    3ba2:	ff 89       	ldd	r31, Y+23	; 0x17
    3ba4:	20 81       	ld	r18, Z
    3ba6:	81 e0       	ldi	r24, 0x01	; 1
    3ba8:	90 e0       	ldi	r25, 0x00	; 0
    3baa:	0f 8c       	ldd	r0, Y+31	; 0x1f
    3bac:	02 c0       	rjmp	.+4      	; 0x3bb2 <_ZN14HardwareSerial5writeEh+0x60>
    3bae:	88 0f       	add	r24, r24
    3bb0:	99 1f       	adc	r25, r25
    3bb2:	0a 94       	dec	r0
    3bb4:	e2 f7       	brpl	.-8      	; 0x3bae <_ZN14HardwareSerial5writeEh+0x5c>
    3bb6:	28 2b       	or	r18, r24
    3bb8:	20 83       	st	Z, r18
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
    3bba:	81 e0       	ldi	r24, 0x01	; 1
    3bbc:	89 a3       	std	Y+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
    3bbe:	ec 89       	ldd	r30, Y+20	; 0x14
    3bc0:	fd 89       	ldd	r31, Y+21	; 0x15
    3bc2:	80 81       	ld	r24, Z
    3bc4:	80 64       	ori	r24, 0x40	; 64
    3bc6:	80 83       	st	Z, r24
  
  return 1;
}
    3bc8:	81 e0       	ldi	r24, 0x01	; 1
    3bca:	90 e0       	ldi	r25, 0x00	; 0
    3bcc:	df 91       	pop	r29
    3bce:	cf 91       	pop	r28
    3bd0:	08 95       	ret

00003bd2 <_GLOBAL__I_rx_buffer>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
    3bd2:	1f 93       	push	r17
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    3bd4:	10 92 a5 07 	sts	0x07A5, r1
    3bd8:	10 92 a4 07 	sts	0x07A4, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    3bdc:	28 ee       	ldi	r18, 0xE8	; 232
    3bde:	33 e0       	ldi	r19, 0x03	; 3
    3be0:	40 e0       	ldi	r20, 0x00	; 0
    3be2:	50 e0       	ldi	r21, 0x00	; 0
    3be4:	20 93 a6 07 	sts	0x07A6, r18
    3be8:	30 93 a7 07 	sts	0x07A7, r19
    3bec:	40 93 a8 07 	sts	0x07A8, r20
    3bf0:	50 93 a9 07 	sts	0x07A9, r21

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    3bf4:	68 e0       	ldi	r22, 0x08	; 8
    3bf6:	75 e0       	ldi	r23, 0x05	; 5
    3bf8:	70 93 a3 07 	sts	0x07A3, r23
    3bfc:	60 93 a2 07 	sts	0x07A2, r22
{
  _rx_buffer = rx_buffer;
    3c00:	82 e8       	ldi	r24, 0x82	; 130
    3c02:	95 e0       	ldi	r25, 0x05	; 5
    3c04:	90 93 af 07 	sts	0x07AF, r25
    3c08:	80 93 ae 07 	sts	0x07AE, r24
  _tx_buffer = tx_buffer;
    3c0c:	86 ec       	ldi	r24, 0xC6	; 198
    3c0e:	95 e0       	ldi	r25, 0x05	; 5
    3c10:	90 93 b1 07 	sts	0x07B1, r25
    3c14:	80 93 b0 07 	sts	0x07B0, r24
  _ubrrh = ubrrh;
    3c18:	85 ec       	ldi	r24, 0xC5	; 197
    3c1a:	90 e0       	ldi	r25, 0x00	; 0
    3c1c:	90 93 b3 07 	sts	0x07B3, r25
    3c20:	80 93 b2 07 	sts	0x07B2, r24
  _ubrrl = ubrrl;
    3c24:	84 ec       	ldi	r24, 0xC4	; 196
    3c26:	90 e0       	ldi	r25, 0x00	; 0
    3c28:	90 93 b5 07 	sts	0x07B5, r25
    3c2c:	80 93 b4 07 	sts	0x07B4, r24
  _ucsra = ucsra;
    3c30:	80 ec       	ldi	r24, 0xC0	; 192
    3c32:	90 e0       	ldi	r25, 0x00	; 0
    3c34:	90 93 b7 07 	sts	0x07B7, r25
    3c38:	80 93 b6 07 	sts	0x07B6, r24
  _ucsrb = ucsrb;
    3c3c:	81 ec       	ldi	r24, 0xC1	; 193
    3c3e:	90 e0       	ldi	r25, 0x00	; 0
    3c40:	90 93 b9 07 	sts	0x07B9, r25
    3c44:	80 93 b8 07 	sts	0x07B8, r24
  _ucsrc = ucsrc;
    3c48:	82 ec       	ldi	r24, 0xC2	; 194
    3c4a:	90 e0       	ldi	r25, 0x00	; 0
    3c4c:	90 93 bb 07 	sts	0x07BB, r25
    3c50:	80 93 ba 07 	sts	0x07BA, r24
  _udr = udr;
    3c54:	86 ec       	ldi	r24, 0xC6	; 198
    3c56:	90 e0       	ldi	r25, 0x00	; 0
    3c58:	90 93 bd 07 	sts	0x07BD, r25
    3c5c:	80 93 bc 07 	sts	0x07BC, r24
  _rxen = rxen;
    3c60:	14 e0       	ldi	r17, 0x04	; 4
    3c62:	10 93 be 07 	sts	0x07BE, r17
  _txen = txen;
    3c66:	b3 e0       	ldi	r27, 0x03	; 3
    3c68:	b0 93 bf 07 	sts	0x07BF, r27
  _rxcie = rxcie;
    3c6c:	a7 e0       	ldi	r26, 0x07	; 7
    3c6e:	a0 93 c0 07 	sts	0x07C0, r26
  _udrie = udrie;
    3c72:	f5 e0       	ldi	r31, 0x05	; 5
    3c74:	f0 93 c1 07 	sts	0x07C1, r31
  _u2x = u2x;
    3c78:	e1 e0       	ldi	r30, 0x01	; 1
    3c7a:	e0 93 c2 07 	sts	0x07C2, r30
    3c7e:	10 92 c7 07 	sts	0x07C7, r1
    3c82:	10 92 c6 07 	sts	0x07C6, r1
    3c86:	20 93 c8 07 	sts	0x07C8, r18
    3c8a:	30 93 c9 07 	sts	0x07C9, r19
    3c8e:	40 93 ca 07 	sts	0x07CA, r20
    3c92:	50 93 cb 07 	sts	0x07CB, r21

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    3c96:	70 93 c5 07 	sts	0x07C5, r23
    3c9a:	60 93 c4 07 	sts	0x07C4, r22
{
  _rx_buffer = rx_buffer;
    3c9e:	8a e0       	ldi	r24, 0x0A	; 10
    3ca0:	96 e0       	ldi	r25, 0x06	; 6
    3ca2:	90 93 d1 07 	sts	0x07D1, r25
    3ca6:	80 93 d0 07 	sts	0x07D0, r24
  _tx_buffer = tx_buffer;
    3caa:	8e e4       	ldi	r24, 0x4E	; 78
    3cac:	96 e0       	ldi	r25, 0x06	; 6
    3cae:	90 93 d3 07 	sts	0x07D3, r25
    3cb2:	80 93 d2 07 	sts	0x07D2, r24
  _ubrrh = ubrrh;
    3cb6:	8d ec       	ldi	r24, 0xCD	; 205
    3cb8:	90 e0       	ldi	r25, 0x00	; 0
    3cba:	90 93 d5 07 	sts	0x07D5, r25
    3cbe:	80 93 d4 07 	sts	0x07D4, r24
  _ubrrl = ubrrl;
    3cc2:	8c ec       	ldi	r24, 0xCC	; 204
    3cc4:	90 e0       	ldi	r25, 0x00	; 0
    3cc6:	90 93 d7 07 	sts	0x07D7, r25
    3cca:	80 93 d6 07 	sts	0x07D6, r24
  _ucsra = ucsra;
    3cce:	88 ec       	ldi	r24, 0xC8	; 200
    3cd0:	90 e0       	ldi	r25, 0x00	; 0
    3cd2:	90 93 d9 07 	sts	0x07D9, r25
    3cd6:	80 93 d8 07 	sts	0x07D8, r24
  _ucsrb = ucsrb;
    3cda:	89 ec       	ldi	r24, 0xC9	; 201
    3cdc:	90 e0       	ldi	r25, 0x00	; 0
    3cde:	90 93 db 07 	sts	0x07DB, r25
    3ce2:	80 93 da 07 	sts	0x07DA, r24
  _ucsrc = ucsrc;
    3ce6:	8a ec       	ldi	r24, 0xCA	; 202
    3ce8:	90 e0       	ldi	r25, 0x00	; 0
    3cea:	90 93 dd 07 	sts	0x07DD, r25
    3cee:	80 93 dc 07 	sts	0x07DC, r24
  _udr = udr;
    3cf2:	8e ec       	ldi	r24, 0xCE	; 206
    3cf4:	90 e0       	ldi	r25, 0x00	; 0
    3cf6:	90 93 df 07 	sts	0x07DF, r25
    3cfa:	80 93 de 07 	sts	0x07DE, r24
  _rxen = rxen;
    3cfe:	10 93 e0 07 	sts	0x07E0, r17
  _txen = txen;
    3d02:	b0 93 e1 07 	sts	0x07E1, r27
  _rxcie = rxcie;
    3d06:	a0 93 e2 07 	sts	0x07E2, r26
  _udrie = udrie;
    3d0a:	f0 93 e3 07 	sts	0x07E3, r31
  _u2x = u2x;
    3d0e:	e0 93 e4 07 	sts	0x07E4, r30
    3d12:	10 92 e9 07 	sts	0x07E9, r1
    3d16:	10 92 e8 07 	sts	0x07E8, r1
    3d1a:	20 93 ea 07 	sts	0x07EA, r18
    3d1e:	30 93 eb 07 	sts	0x07EB, r19
    3d22:	40 93 ec 07 	sts	0x07EC, r20
    3d26:	50 93 ed 07 	sts	0x07ED, r21

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    3d2a:	70 93 e7 07 	sts	0x07E7, r23
    3d2e:	60 93 e6 07 	sts	0x07E6, r22
{
  _rx_buffer = rx_buffer;
    3d32:	82 e9       	ldi	r24, 0x92	; 146
    3d34:	96 e0       	ldi	r25, 0x06	; 6
    3d36:	90 93 f3 07 	sts	0x07F3, r25
    3d3a:	80 93 f2 07 	sts	0x07F2, r24
  _tx_buffer = tx_buffer;
    3d3e:	86 ed       	ldi	r24, 0xD6	; 214
    3d40:	96 e0       	ldi	r25, 0x06	; 6
    3d42:	90 93 f5 07 	sts	0x07F5, r25
    3d46:	80 93 f4 07 	sts	0x07F4, r24
  _ubrrh = ubrrh;
    3d4a:	85 ed       	ldi	r24, 0xD5	; 213
    3d4c:	90 e0       	ldi	r25, 0x00	; 0
    3d4e:	90 93 f7 07 	sts	0x07F7, r25
    3d52:	80 93 f6 07 	sts	0x07F6, r24
  _ubrrl = ubrrl;
    3d56:	84 ed       	ldi	r24, 0xD4	; 212
    3d58:	90 e0       	ldi	r25, 0x00	; 0
    3d5a:	90 93 f9 07 	sts	0x07F9, r25
    3d5e:	80 93 f8 07 	sts	0x07F8, r24
  _ucsra = ucsra;
    3d62:	80 ed       	ldi	r24, 0xD0	; 208
    3d64:	90 e0       	ldi	r25, 0x00	; 0
    3d66:	90 93 fb 07 	sts	0x07FB, r25
    3d6a:	80 93 fa 07 	sts	0x07FA, r24
  _ucsrb = ucsrb;
    3d6e:	81 ed       	ldi	r24, 0xD1	; 209
    3d70:	90 e0       	ldi	r25, 0x00	; 0
    3d72:	90 93 fd 07 	sts	0x07FD, r25
    3d76:	80 93 fc 07 	sts	0x07FC, r24
  _ucsrc = ucsrc;
    3d7a:	82 ed       	ldi	r24, 0xD2	; 210
    3d7c:	90 e0       	ldi	r25, 0x00	; 0
    3d7e:	90 93 ff 07 	sts	0x07FF, r25
    3d82:	80 93 fe 07 	sts	0x07FE, r24
  _udr = udr;
    3d86:	86 ed       	ldi	r24, 0xD6	; 214
    3d88:	90 e0       	ldi	r25, 0x00	; 0
    3d8a:	90 93 01 08 	sts	0x0801, r25
    3d8e:	80 93 00 08 	sts	0x0800, r24
  _rxen = rxen;
    3d92:	10 93 02 08 	sts	0x0802, r17
  _txen = txen;
    3d96:	b0 93 03 08 	sts	0x0803, r27
  _rxcie = rxcie;
    3d9a:	a0 93 04 08 	sts	0x0804, r26
  _udrie = udrie;
    3d9e:	f0 93 05 08 	sts	0x0805, r31
  _u2x = u2x;
    3da2:	e0 93 06 08 	sts	0x0806, r30
    3da6:	10 92 0b 08 	sts	0x080B, r1
    3daa:	10 92 0a 08 	sts	0x080A, r1
    3dae:	20 93 0c 08 	sts	0x080C, r18
    3db2:	30 93 0d 08 	sts	0x080D, r19
    3db6:	40 93 0e 08 	sts	0x080E, r20
    3dba:	50 93 0f 08 	sts	0x080F, r21

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    3dbe:	70 93 09 08 	sts	0x0809, r23
    3dc2:	60 93 08 08 	sts	0x0808, r22
{
  _rx_buffer = rx_buffer;
    3dc6:	8a e1       	ldi	r24, 0x1A	; 26
    3dc8:	97 e0       	ldi	r25, 0x07	; 7
    3dca:	90 93 15 08 	sts	0x0815, r25
    3dce:	80 93 14 08 	sts	0x0814, r24
  _tx_buffer = tx_buffer;
    3dd2:	8e e5       	ldi	r24, 0x5E	; 94
    3dd4:	97 e0       	ldi	r25, 0x07	; 7
    3dd6:	90 93 17 08 	sts	0x0817, r25
    3dda:	80 93 16 08 	sts	0x0816, r24
  _ubrrh = ubrrh;
    3dde:	85 e3       	ldi	r24, 0x35	; 53
    3de0:	91 e0       	ldi	r25, 0x01	; 1
    3de2:	90 93 19 08 	sts	0x0819, r25
    3de6:	80 93 18 08 	sts	0x0818, r24
  _ubrrl = ubrrl;
    3dea:	84 e3       	ldi	r24, 0x34	; 52
    3dec:	91 e0       	ldi	r25, 0x01	; 1
    3dee:	90 93 1b 08 	sts	0x081B, r25
    3df2:	80 93 1a 08 	sts	0x081A, r24
  _ucsra = ucsra;
    3df6:	80 e3       	ldi	r24, 0x30	; 48
    3df8:	91 e0       	ldi	r25, 0x01	; 1
    3dfa:	90 93 1d 08 	sts	0x081D, r25
    3dfe:	80 93 1c 08 	sts	0x081C, r24
  _ucsrb = ucsrb;
    3e02:	81 e3       	ldi	r24, 0x31	; 49
    3e04:	91 e0       	ldi	r25, 0x01	; 1
    3e06:	90 93 1f 08 	sts	0x081F, r25
    3e0a:	80 93 1e 08 	sts	0x081E, r24
  _ucsrc = ucsrc;
    3e0e:	82 e3       	ldi	r24, 0x32	; 50
    3e10:	91 e0       	ldi	r25, 0x01	; 1
    3e12:	90 93 21 08 	sts	0x0821, r25
    3e16:	80 93 20 08 	sts	0x0820, r24
  _udr = udr;
    3e1a:	86 e3       	ldi	r24, 0x36	; 54
    3e1c:	91 e0       	ldi	r25, 0x01	; 1
    3e1e:	90 93 23 08 	sts	0x0823, r25
    3e22:	80 93 22 08 	sts	0x0822, r24
  _rxen = rxen;
    3e26:	10 93 24 08 	sts	0x0824, r17
  _txen = txen;
    3e2a:	b0 93 25 08 	sts	0x0825, r27
  _rxcie = rxcie;
    3e2e:	a0 93 26 08 	sts	0x0826, r26
  _udrie = udrie;
    3e32:	f0 93 27 08 	sts	0x0827, r31
  _u2x = u2x;
    3e36:	e0 93 28 08 	sts	0x0828, r30
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
    3e3a:	1f 91       	pop	r17
    3e3c:	08 95       	ret

00003e3e <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    3e3e:	cf 92       	push	r12
    3e40:	df 92       	push	r13
    3e42:	ef 92       	push	r14
    3e44:	ff 92       	push	r15
    3e46:	0f 93       	push	r16
    3e48:	1f 93       	push	r17
    3e4a:	cf 93       	push	r28
    3e4c:	df 93       	push	r29
    3e4e:	7c 01       	movw	r14, r24
    3e50:	6b 01       	movw	r12, r22
    3e52:	8a 01       	movw	r16, r20
    3e54:	c0 e0       	ldi	r28, 0x00	; 0
    3e56:	d0 e0       	ldi	r29, 0x00	; 0
    3e58:	0f c0       	rjmp	.+30     	; 0x3e78 <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    3e5a:	d6 01       	movw	r26, r12
    3e5c:	6d 91       	ld	r22, X+
    3e5e:	6d 01       	movw	r12, r26
    3e60:	d7 01       	movw	r26, r14
    3e62:	ed 91       	ld	r30, X+
    3e64:	fc 91       	ld	r31, X
    3e66:	01 90       	ld	r0, Z+
    3e68:	f0 81       	ld	r31, Z
    3e6a:	e0 2d       	mov	r30, r0
    3e6c:	c7 01       	movw	r24, r14
    3e6e:	19 95       	eicall
    3e70:	c8 0f       	add	r28, r24
    3e72:	d9 1f       	adc	r29, r25
    3e74:	01 50       	subi	r16, 0x01	; 1
    3e76:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    3e78:	01 15       	cp	r16, r1
    3e7a:	11 05       	cpc	r17, r1
    3e7c:	71 f7       	brne	.-36     	; 0x3e5a <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    3e7e:	ce 01       	movw	r24, r28
    3e80:	df 91       	pop	r29
    3e82:	cf 91       	pop	r28
    3e84:	1f 91       	pop	r17
    3e86:	0f 91       	pop	r16
    3e88:	ff 90       	pop	r15
    3e8a:	ef 90       	pop	r14
    3e8c:	df 90       	pop	r13
    3e8e:	cf 90       	pop	r12
    3e90:	08 95       	ret

00003e92 <_ZN5Print7printlnEv>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
    3e92:	ef 92       	push	r14
    3e94:	ff 92       	push	r15
    3e96:	0f 93       	push	r16
    3e98:	1f 93       	push	r17
    3e9a:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    3e9c:	dc 01       	movw	r26, r24
    3e9e:	ed 91       	ld	r30, X+
    3ea0:	fc 91       	ld	r31, X
    3ea2:	01 90       	ld	r0, Z+
    3ea4:	f0 81       	ld	r31, Z
    3ea6:	e0 2d       	mov	r30, r0
    3ea8:	6d e0       	ldi	r22, 0x0D	; 13
    3eaa:	19 95       	eicall
    3eac:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    3eae:	d8 01       	movw	r26, r16
    3eb0:	ed 91       	ld	r30, X+
    3eb2:	fc 91       	ld	r31, X
    3eb4:	01 90       	ld	r0, Z+
    3eb6:	f0 81       	ld	r31, Z
    3eb8:	e0 2d       	mov	r30, r0
    3eba:	c8 01       	movw	r24, r16
    3ebc:	6a e0       	ldi	r22, 0x0A	; 10
    3ebe:	19 95       	eicall
    3ec0:	9c 01       	movw	r18, r24
    3ec2:	2e 0d       	add	r18, r14
    3ec4:	3f 1d       	adc	r19, r15
    3ec6:	c9 01       	movw	r24, r18
    3ec8:	1f 91       	pop	r17
    3eca:	0f 91       	pop	r16
    3ecc:	ff 90       	pop	r15
    3ece:	ef 90       	pop	r14
    3ed0:	08 95       	ret

00003ed2 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    3ed2:	cf 93       	push	r28
    3ed4:	df 93       	push	r29
    3ed6:	ec 01       	movw	r28, r24
      if (str == NULL) return 0;
    3ed8:	61 15       	cp	r22, r1
    3eda:	71 05       	cpc	r23, r1
    3edc:	19 f4       	brne	.+6      	; 0x3ee4 <_ZN5Print5writeEPKc+0x12>
    3ede:	20 e0       	ldi	r18, 0x00	; 0
    3ee0:	30 e0       	ldi	r19, 0x00	; 0
    3ee2:	0f c0       	rjmp	.+30     	; 0x3f02 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
    3ee4:	db 01       	movw	r26, r22
    3ee6:	0d 90       	ld	r0, X+
    3ee8:	00 20       	and	r0, r0
    3eea:	e9 f7       	brne	.-6      	; 0x3ee6 <_ZN5Print5writeEPKc+0x14>
    3eec:	11 97       	sbiw	r26, 0x01	; 1
    3eee:	a6 1b       	sub	r26, r22
    3ef0:	b7 0b       	sbc	r27, r23
    3ef2:	e8 81       	ld	r30, Y
    3ef4:	f9 81       	ldd	r31, Y+1	; 0x01
    3ef6:	02 80       	ldd	r0, Z+2	; 0x02
    3ef8:	f3 81       	ldd	r31, Z+3	; 0x03
    3efa:	e0 2d       	mov	r30, r0
    3efc:	ad 01       	movw	r20, r26
    3efe:	19 95       	eicall
    3f00:	9c 01       	movw	r18, r24
    }
    3f02:	c9 01       	movw	r24, r18
    3f04:	df 91       	pop	r29
    3f06:	cf 91       	pop	r28
    3f08:	08 95       	ret

00003f0a <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    3f0a:	4f 92       	push	r4
    3f0c:	5f 92       	push	r5
    3f0e:	7f 92       	push	r7
    3f10:	8f 92       	push	r8
    3f12:	9f 92       	push	r9
    3f14:	af 92       	push	r10
    3f16:	bf 92       	push	r11
    3f18:	cf 92       	push	r12
    3f1a:	df 92       	push	r13
    3f1c:	ef 92       	push	r14
    3f1e:	ff 92       	push	r15
    3f20:	0f 93       	push	r16
    3f22:	1f 93       	push	r17
    3f24:	df 93       	push	r29
    3f26:	cf 93       	push	r28
    3f28:	cd b7       	in	r28, 0x3d	; 61
    3f2a:	de b7       	in	r29, 0x3e	; 62
    3f2c:	a1 97       	sbiw	r28, 0x21	; 33
    3f2e:	0f b6       	in	r0, 0x3f	; 63
    3f30:	f8 94       	cli
    3f32:	de bf       	out	0x3e, r29	; 62
    3f34:	0f be       	out	0x3f, r0	; 63
    3f36:	cd bf       	out	0x3d, r28	; 61
    3f38:	2c 01       	movw	r4, r24
    3f3a:	74 2e       	mov	r7, r20
    3f3c:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    3f3e:	22 30       	cpi	r18, 0x02	; 2
    3f40:	08 f4       	brcc	.+2      	; 0x3f44 <_ZN5Print11printNumberEmh+0x3a>
    3f42:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    3f44:	19 a2       	std	Y+33, r1	; 0x21
    3f46:	31 e2       	ldi	r19, 0x21	; 33
    3f48:	c3 2e       	mov	r12, r19
    3f4a:	d1 2c       	mov	r13, r1
    3f4c:	cc 0e       	add	r12, r28
    3f4e:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    3f50:	82 2e       	mov	r8, r18
    3f52:	99 24       	eor	r9, r9
    3f54:	aa 24       	eor	r10, r10
    3f56:	bb 24       	eor	r11, r11
    3f58:	67 2d       	mov	r22, r7
    3f5a:	75 2f       	mov	r23, r21
    3f5c:	a5 01       	movw	r20, r10
    3f5e:	94 01       	movw	r18, r8
    3f60:	0e 94 86 24 	call	0x490c	; 0x490c <__udivmodsi4>
    3f64:	79 01       	movw	r14, r18
    3f66:	8a 01       	movw	r16, r20
    char c = m - base * n;
    3f68:	c8 01       	movw	r24, r16
    3f6a:	b7 01       	movw	r22, r14
    3f6c:	a5 01       	movw	r20, r10
    3f6e:	94 01       	movw	r18, r8
    3f70:	0e 94 53 24 	call	0x48a6	; 0x48a6 <__mulsi3>
    3f74:	47 2d       	mov	r20, r7
    3f76:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    3f78:	08 94       	sec
    3f7a:	c1 08       	sbc	r12, r1
    3f7c:	d1 08       	sbc	r13, r1
    3f7e:	4a 30       	cpi	r20, 0x0A	; 10
    3f80:	14 f4       	brge	.+4      	; 0x3f86 <_ZN5Print11printNumberEmh+0x7c>
    3f82:	40 5d       	subi	r20, 0xD0	; 208
    3f84:	01 c0       	rjmp	.+2      	; 0x3f88 <_ZN5Print11printNumberEmh+0x7e>
    3f86:	49 5c       	subi	r20, 0xC9	; 201
    3f88:	f6 01       	movw	r30, r12
    3f8a:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    3f8c:	e1 14       	cp	r14, r1
    3f8e:	f1 04       	cpc	r15, r1
    3f90:	01 05       	cpc	r16, r1
    3f92:	11 05       	cpc	r17, r1
    3f94:	21 f0       	breq	.+8      	; 0x3f9e <_ZN5Print11printNumberEmh+0x94>
    3f96:	7e 2c       	mov	r7, r14
    3f98:	5f 2d       	mov	r21, r15
    3f9a:	c8 01       	movw	r24, r16
    3f9c:	dd cf       	rjmp	.-70     	; 0x3f58 <_ZN5Print11printNumberEmh+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    3f9e:	c2 01       	movw	r24, r4
    3fa0:	b6 01       	movw	r22, r12
    3fa2:	0e 94 69 1f 	call	0x3ed2	; 0x3ed2 <_ZN5Print5writeEPKc>
}
    3fa6:	a1 96       	adiw	r28, 0x21	; 33
    3fa8:	0f b6       	in	r0, 0x3f	; 63
    3faa:	f8 94       	cli
    3fac:	de bf       	out	0x3e, r29	; 62
    3fae:	0f be       	out	0x3f, r0	; 63
    3fb0:	cd bf       	out	0x3d, r28	; 61
    3fb2:	cf 91       	pop	r28
    3fb4:	df 91       	pop	r29
    3fb6:	1f 91       	pop	r17
    3fb8:	0f 91       	pop	r16
    3fba:	ff 90       	pop	r15
    3fbc:	ef 90       	pop	r14
    3fbe:	df 90       	pop	r13
    3fc0:	cf 90       	pop	r12
    3fc2:	bf 90       	pop	r11
    3fc4:	af 90       	pop	r10
    3fc6:	9f 90       	pop	r9
    3fc8:	8f 90       	pop	r8
    3fca:	7f 90       	pop	r7
    3fcc:	5f 90       	pop	r5
    3fce:	4f 90       	pop	r4
    3fd0:	08 95       	ret

00003fd2 <_ZN5Print5printEmi>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
    3fd2:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
    3fd4:	21 15       	cp	r18, r1
    3fd6:	31 05       	cpc	r19, r1
    3fd8:	41 f4       	brne	.+16     	; 0x3fea <_ZN5Print5printEmi+0x18>
    3fda:	ed 91       	ld	r30, X+
    3fdc:	fc 91       	ld	r31, X
    3fde:	01 90       	ld	r0, Z+
    3fe0:	f0 81       	ld	r31, Z
    3fe2:	e0 2d       	mov	r30, r0
    3fe4:	64 2f       	mov	r22, r20
    3fe6:	19 95       	eicall
    3fe8:	08 95       	ret
  else return printNumber(n, base);
    3fea:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <_ZN5Print11printNumberEmh>
}
    3fee:	08 95       	ret

00003ff0 <_ZN5Print5printEji>:
size_t Print::print(int n, int base)
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
    3ff0:	ef 92       	push	r14
    3ff2:	ff 92       	push	r15
    3ff4:	0f 93       	push	r16
    3ff6:	1f 93       	push	r17
    3ff8:	9a 01       	movw	r18, r20
{
  return print((unsigned long) n, base);
    3ffa:	7b 01       	movw	r14, r22
    3ffc:	00 e0       	ldi	r16, 0x00	; 0
    3ffe:	10 e0       	ldi	r17, 0x00	; 0
    4000:	b8 01       	movw	r22, r16
    4002:	a7 01       	movw	r20, r14
    4004:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <_ZN5Print5printEmi>
}
    4008:	1f 91       	pop	r17
    400a:	0f 91       	pop	r16
    400c:	ff 90       	pop	r15
    400e:	ef 90       	pop	r14
    4010:	08 95       	ret

00004012 <_ZN5Print5printEhi>:
size_t Print::print(char c)
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
    4012:	ef 92       	push	r14
    4014:	ff 92       	push	r15
    4016:	0f 93       	push	r16
    4018:	1f 93       	push	r17
    401a:	9a 01       	movw	r18, r20
{
  return print((unsigned long) b, base);
    401c:	e6 2e       	mov	r14, r22
    401e:	ff 24       	eor	r15, r15
    4020:	00 e0       	ldi	r16, 0x00	; 0
    4022:	10 e0       	ldi	r17, 0x00	; 0
    4024:	b8 01       	movw	r22, r16
    4026:	a7 01       	movw	r20, r14
    4028:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <_ZN5Print5printEmi>
}
    402c:	1f 91       	pop	r17
    402e:	0f 91       	pop	r16
    4030:	ff 90       	pop	r15
    4032:	ef 90       	pop	r14
    4034:	08 95       	ret

00004036 <_ZN5Print5printEPKc>:
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    4036:	0e 94 69 1f 	call	0x3ed2	; 0x3ed2 <_ZN5Print5writeEPKc>
}
    403a:	08 95       	ret

0000403c <_ZN5Print7printlnEPKc>:
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
    403c:	ef 92       	push	r14
    403e:	ff 92       	push	r15
    4040:	0f 93       	push	r16
    4042:	1f 93       	push	r17
    4044:	7c 01       	movw	r14, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    4046:	0e 94 69 1f 	call	0x3ed2	; 0x3ed2 <_ZN5Print5writeEPKc>
    404a:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    404c:	c7 01       	movw	r24, r14
    404e:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <_ZN5Print7printlnEv>
    4052:	08 0f       	add	r16, r24
    4054:	19 1f       	adc	r17, r25
  return n;
}
    4056:	c8 01       	movw	r24, r16
    4058:	1f 91       	pop	r17
    405a:	0f 91       	pop	r16
    405c:	ff 90       	pop	r15
    405e:	ef 90       	pop	r14
    4060:	08 95       	ret

00004062 <attachInterrupt>:

static volatile voidFuncPtr intFunc[EXTERNAL_NUM_INTERRUPTS];
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    4062:	88 30       	cpi	r24, 0x08	; 8
    4064:	08 f0       	brcs	.+2      	; 0x4068 <attachInterrupt+0x6>
    4066:	78 c0       	rjmp	.+240    	; 0x4158 <attachInterrupt+0xf6>
    intFunc[interruptNum] = userFunc;
    4068:	e8 2f       	mov	r30, r24
    406a:	f0 e0       	ldi	r31, 0x00	; 0
    406c:	ee 0f       	add	r30, r30
    406e:	ff 1f       	adc	r31, r31
    4070:	e6 5d       	subi	r30, 0xD6	; 214
    4072:	f7 4f       	sbci	r31, 0xF7	; 247
    4074:	71 83       	std	Z+1, r23	; 0x01
    4076:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
    4078:	83 30       	cpi	r24, 0x03	; 3
    407a:	d9 f0       	breq	.+54     	; 0x40b2 <attachInterrupt+0x50>
    407c:	84 30       	cpi	r24, 0x04	; 4
    407e:	30 f4       	brcc	.+12     	; 0x408c <attachInterrupt+0x2a>
    4080:	81 30       	cpi	r24, 0x01	; 1
    4082:	09 f4       	brne	.+2      	; 0x4086 <attachInterrupt+0x24>
    4084:	44 c0       	rjmp	.+136    	; 0x410e <attachInterrupt+0xac>
    4086:	82 30       	cpi	r24, 0x02	; 2
    4088:	60 f4       	brcc	.+24     	; 0x40a2 <attachInterrupt+0x40>
    408a:	39 c0       	rjmp	.+114    	; 0x40fe <attachInterrupt+0x9c>
    408c:	85 30       	cpi	r24, 0x05	; 5
    408e:	51 f1       	breq	.+84     	; 0x40e4 <attachInterrupt+0x82>
    4090:	85 30       	cpi	r24, 0x05	; 5
    4092:	d8 f0       	brcs	.+54     	; 0x40ca <attachInterrupt+0x68>
    4094:	86 30       	cpi	r24, 0x06	; 6
    4096:	09 f4       	brne	.+2      	; 0x409a <attachInterrupt+0x38>
    4098:	46 c0       	rjmp	.+140    	; 0x4126 <attachInterrupt+0xc4>
    409a:	87 30       	cpi	r24, 0x07	; 7
    409c:	09 f0       	breq	.+2      	; 0x40a0 <attachInterrupt+0x3e>
    409e:	5c c0       	rjmp	.+184    	; 0x4158 <attachInterrupt+0xf6>
    40a0:	4f c0       	rjmp	.+158    	; 0x4140 <attachInterrupt+0xde>
        EICRA = (EICRA & ~((1<<ISC30) | (1<<ISC31))) | (mode << ISC30);
        EIMSK |= (1<<INT3);
        break;
#elif defined(EICRA) && defined(EICRB) && defined(EIMSK)
    case 2:
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    40a2:	80 91 69 00 	lds	r24, 0x0069
    40a6:	8c 7f       	andi	r24, 0xFC	; 252
    40a8:	84 2b       	or	r24, r20
    40aa:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT0);
    40ae:	e8 9a       	sbi	0x1d, 0	; 29
    40b0:	08 95       	ret
      break;
    case 3:
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
    40b2:	80 91 69 00 	lds	r24, 0x0069
    40b6:	44 0f       	add	r20, r20
    40b8:	55 1f       	adc	r21, r21
    40ba:	44 0f       	add	r20, r20
    40bc:	55 1f       	adc	r21, r21
    40be:	83 7f       	andi	r24, 0xF3	; 243
    40c0:	84 2b       	or	r24, r20
    40c2:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT1);
    40c6:	e9 9a       	sbi	0x1d, 1	; 29
    40c8:	08 95       	ret
      break;
    case 4:
      EICRA = (EICRA & ~((1 << ISC20) | (1 << ISC21))) | (mode << ISC20);
    40ca:	80 91 69 00 	lds	r24, 0x0069
    40ce:	74 e0       	ldi	r23, 0x04	; 4
    40d0:	44 0f       	add	r20, r20
    40d2:	55 1f       	adc	r21, r21
    40d4:	7a 95       	dec	r23
    40d6:	e1 f7       	brne	.-8      	; 0x40d0 <attachInterrupt+0x6e>
    40d8:	8f 7c       	andi	r24, 0xCF	; 207
    40da:	84 2b       	or	r24, r20
    40dc:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT2);
    40e0:	ea 9a       	sbi	0x1d, 2	; 29
    40e2:	08 95       	ret
      break;
    case 5:
      EICRA = (EICRA & ~((1 << ISC30) | (1 << ISC31))) | (mode << ISC30);
    40e4:	80 91 69 00 	lds	r24, 0x0069
    40e8:	66 e0       	ldi	r22, 0x06	; 6
    40ea:	44 0f       	add	r20, r20
    40ec:	55 1f       	adc	r21, r21
    40ee:	6a 95       	dec	r22
    40f0:	e1 f7       	brne	.-8      	; 0x40ea <attachInterrupt+0x88>
    40f2:	8f 73       	andi	r24, 0x3F	; 63
    40f4:	84 2b       	or	r24, r20
    40f6:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT3);
    40fa:	eb 9a       	sbi	0x1d, 3	; 29
    40fc:	08 95       	ret
      break;
    case 0:
      EICRB = (EICRB & ~((1 << ISC40) | (1 << ISC41))) | (mode << ISC40);
    40fe:	80 91 6a 00 	lds	r24, 0x006A
    4102:	8c 7f       	andi	r24, 0xFC	; 252
    4104:	84 2b       	or	r24, r20
    4106:	80 93 6a 00 	sts	0x006A, r24
      EIMSK |= (1 << INT4);
    410a:	ec 9a       	sbi	0x1d, 4	; 29
    410c:	08 95       	ret
      break;
    case 1:
      EICRB = (EICRB & ~((1 << ISC50) | (1 << ISC51))) | (mode << ISC50);
    410e:	80 91 6a 00 	lds	r24, 0x006A
    4112:	44 0f       	add	r20, r20
    4114:	55 1f       	adc	r21, r21
    4116:	44 0f       	add	r20, r20
    4118:	55 1f       	adc	r21, r21
    411a:	83 7f       	andi	r24, 0xF3	; 243
    411c:	84 2b       	or	r24, r20
    411e:	80 93 6a 00 	sts	0x006A, r24
      EIMSK |= (1 << INT5);
    4122:	ed 9a       	sbi	0x1d, 5	; 29
    4124:	08 95       	ret
      break;
    case 6:
      EICRB = (EICRB & ~((1 << ISC60) | (1 << ISC61))) | (mode << ISC60);
    4126:	80 91 6a 00 	lds	r24, 0x006A
    412a:	24 e0       	ldi	r18, 0x04	; 4
    412c:	44 0f       	add	r20, r20
    412e:	55 1f       	adc	r21, r21
    4130:	2a 95       	dec	r18
    4132:	e1 f7       	brne	.-8      	; 0x412c <attachInterrupt+0xca>
    4134:	8f 7c       	andi	r24, 0xCF	; 207
    4136:	84 2b       	or	r24, r20
    4138:	80 93 6a 00 	sts	0x006A, r24
      EIMSK |= (1 << INT6);
    413c:	ee 9a       	sbi	0x1d, 6	; 29
    413e:	08 95       	ret
      break;
    case 7:
      EICRB = (EICRB & ~((1 << ISC70) | (1 << ISC71))) | (mode << ISC70);
    4140:	80 91 6a 00 	lds	r24, 0x006A
    4144:	96 e0       	ldi	r25, 0x06	; 6
    4146:	44 0f       	add	r20, r20
    4148:	55 1f       	adc	r21, r21
    414a:	9a 95       	dec	r25
    414c:	e1 f7       	brne	.-8      	; 0x4146 <attachInterrupt+0xe4>
    414e:	8f 73       	andi	r24, 0x3F	; 63
    4150:	84 2b       	or	r24, r20
    4152:	80 93 6a 00 	sts	0x006A, r24
      EIMSK |= (1 << INT7);
    4156:	ef 9a       	sbi	0x1d, 7	; 29
    4158:	08 95       	ret

0000415a <__vector_1>:
		intFunc[EXTERNAL_INT_3]();
}

#elif defined(EICRA) && defined(EICRB)

SIGNAL(INT0_vect) {
    415a:	1f 92       	push	r1
    415c:	0f 92       	push	r0
    415e:	0f b6       	in	r0, 0x3f	; 63
    4160:	0f 92       	push	r0
    4162:	0b b6       	in	r0, 0x3b	; 59
    4164:	0f 92       	push	r0
    4166:	11 24       	eor	r1, r1
    4168:	2f 93       	push	r18
    416a:	3f 93       	push	r19
    416c:	4f 93       	push	r20
    416e:	5f 93       	push	r21
    4170:	6f 93       	push	r22
    4172:	7f 93       	push	r23
    4174:	8f 93       	push	r24
    4176:	9f 93       	push	r25
    4178:	af 93       	push	r26
    417a:	bf 93       	push	r27
    417c:	ef 93       	push	r30
    417e:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_2])
    4180:	80 91 2e 08 	lds	r24, 0x082E
    4184:	90 91 2f 08 	lds	r25, 0x082F
    4188:	89 2b       	or	r24, r25
    418a:	29 f0       	breq	.+10     	; 0x4196 <__vector_1+0x3c>
    intFunc[EXTERNAL_INT_2]();
    418c:	e0 91 2e 08 	lds	r30, 0x082E
    4190:	f0 91 2f 08 	lds	r31, 0x082F
    4194:	19 95       	eicall
}
    4196:	ff 91       	pop	r31
    4198:	ef 91       	pop	r30
    419a:	bf 91       	pop	r27
    419c:	af 91       	pop	r26
    419e:	9f 91       	pop	r25
    41a0:	8f 91       	pop	r24
    41a2:	7f 91       	pop	r23
    41a4:	6f 91       	pop	r22
    41a6:	5f 91       	pop	r21
    41a8:	4f 91       	pop	r20
    41aa:	3f 91       	pop	r19
    41ac:	2f 91       	pop	r18
    41ae:	0f 90       	pop	r0
    41b0:	0b be       	out	0x3b, r0	; 59
    41b2:	0f 90       	pop	r0
    41b4:	0f be       	out	0x3f, r0	; 63
    41b6:	0f 90       	pop	r0
    41b8:	1f 90       	pop	r1
    41ba:	18 95       	reti

000041bc <__vector_2>:

SIGNAL(INT1_vect) {
    41bc:	1f 92       	push	r1
    41be:	0f 92       	push	r0
    41c0:	0f b6       	in	r0, 0x3f	; 63
    41c2:	0f 92       	push	r0
    41c4:	0b b6       	in	r0, 0x3b	; 59
    41c6:	0f 92       	push	r0
    41c8:	11 24       	eor	r1, r1
    41ca:	2f 93       	push	r18
    41cc:	3f 93       	push	r19
    41ce:	4f 93       	push	r20
    41d0:	5f 93       	push	r21
    41d2:	6f 93       	push	r22
    41d4:	7f 93       	push	r23
    41d6:	8f 93       	push	r24
    41d8:	9f 93       	push	r25
    41da:	af 93       	push	r26
    41dc:	bf 93       	push	r27
    41de:	ef 93       	push	r30
    41e0:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_3])
    41e2:	80 91 30 08 	lds	r24, 0x0830
    41e6:	90 91 31 08 	lds	r25, 0x0831
    41ea:	89 2b       	or	r24, r25
    41ec:	29 f0       	breq	.+10     	; 0x41f8 <__vector_2+0x3c>
    intFunc[EXTERNAL_INT_3]();
    41ee:	e0 91 30 08 	lds	r30, 0x0830
    41f2:	f0 91 31 08 	lds	r31, 0x0831
    41f6:	19 95       	eicall
}
    41f8:	ff 91       	pop	r31
    41fa:	ef 91       	pop	r30
    41fc:	bf 91       	pop	r27
    41fe:	af 91       	pop	r26
    4200:	9f 91       	pop	r25
    4202:	8f 91       	pop	r24
    4204:	7f 91       	pop	r23
    4206:	6f 91       	pop	r22
    4208:	5f 91       	pop	r21
    420a:	4f 91       	pop	r20
    420c:	3f 91       	pop	r19
    420e:	2f 91       	pop	r18
    4210:	0f 90       	pop	r0
    4212:	0b be       	out	0x3b, r0	; 59
    4214:	0f 90       	pop	r0
    4216:	0f be       	out	0x3f, r0	; 63
    4218:	0f 90       	pop	r0
    421a:	1f 90       	pop	r1
    421c:	18 95       	reti

0000421e <__vector_3>:

SIGNAL(INT2_vect) {
    421e:	1f 92       	push	r1
    4220:	0f 92       	push	r0
    4222:	0f b6       	in	r0, 0x3f	; 63
    4224:	0f 92       	push	r0
    4226:	0b b6       	in	r0, 0x3b	; 59
    4228:	0f 92       	push	r0
    422a:	11 24       	eor	r1, r1
    422c:	2f 93       	push	r18
    422e:	3f 93       	push	r19
    4230:	4f 93       	push	r20
    4232:	5f 93       	push	r21
    4234:	6f 93       	push	r22
    4236:	7f 93       	push	r23
    4238:	8f 93       	push	r24
    423a:	9f 93       	push	r25
    423c:	af 93       	push	r26
    423e:	bf 93       	push	r27
    4240:	ef 93       	push	r30
    4242:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_4])
    4244:	80 91 32 08 	lds	r24, 0x0832
    4248:	90 91 33 08 	lds	r25, 0x0833
    424c:	89 2b       	or	r24, r25
    424e:	29 f0       	breq	.+10     	; 0x425a <__vector_3+0x3c>
    intFunc[EXTERNAL_INT_4]();
    4250:	e0 91 32 08 	lds	r30, 0x0832
    4254:	f0 91 33 08 	lds	r31, 0x0833
    4258:	19 95       	eicall
}
    425a:	ff 91       	pop	r31
    425c:	ef 91       	pop	r30
    425e:	bf 91       	pop	r27
    4260:	af 91       	pop	r26
    4262:	9f 91       	pop	r25
    4264:	8f 91       	pop	r24
    4266:	7f 91       	pop	r23
    4268:	6f 91       	pop	r22
    426a:	5f 91       	pop	r21
    426c:	4f 91       	pop	r20
    426e:	3f 91       	pop	r19
    4270:	2f 91       	pop	r18
    4272:	0f 90       	pop	r0
    4274:	0b be       	out	0x3b, r0	; 59
    4276:	0f 90       	pop	r0
    4278:	0f be       	out	0x3f, r0	; 63
    427a:	0f 90       	pop	r0
    427c:	1f 90       	pop	r1
    427e:	18 95       	reti

00004280 <__vector_4>:

SIGNAL(INT3_vect) {
    4280:	1f 92       	push	r1
    4282:	0f 92       	push	r0
    4284:	0f b6       	in	r0, 0x3f	; 63
    4286:	0f 92       	push	r0
    4288:	0b b6       	in	r0, 0x3b	; 59
    428a:	0f 92       	push	r0
    428c:	11 24       	eor	r1, r1
    428e:	2f 93       	push	r18
    4290:	3f 93       	push	r19
    4292:	4f 93       	push	r20
    4294:	5f 93       	push	r21
    4296:	6f 93       	push	r22
    4298:	7f 93       	push	r23
    429a:	8f 93       	push	r24
    429c:	9f 93       	push	r25
    429e:	af 93       	push	r26
    42a0:	bf 93       	push	r27
    42a2:	ef 93       	push	r30
    42a4:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_5])
    42a6:	80 91 34 08 	lds	r24, 0x0834
    42aa:	90 91 35 08 	lds	r25, 0x0835
    42ae:	89 2b       	or	r24, r25
    42b0:	29 f0       	breq	.+10     	; 0x42bc <__vector_4+0x3c>
    intFunc[EXTERNAL_INT_5]();
    42b2:	e0 91 34 08 	lds	r30, 0x0834
    42b6:	f0 91 35 08 	lds	r31, 0x0835
    42ba:	19 95       	eicall
}
    42bc:	ff 91       	pop	r31
    42be:	ef 91       	pop	r30
    42c0:	bf 91       	pop	r27
    42c2:	af 91       	pop	r26
    42c4:	9f 91       	pop	r25
    42c6:	8f 91       	pop	r24
    42c8:	7f 91       	pop	r23
    42ca:	6f 91       	pop	r22
    42cc:	5f 91       	pop	r21
    42ce:	4f 91       	pop	r20
    42d0:	3f 91       	pop	r19
    42d2:	2f 91       	pop	r18
    42d4:	0f 90       	pop	r0
    42d6:	0b be       	out	0x3b, r0	; 59
    42d8:	0f 90       	pop	r0
    42da:	0f be       	out	0x3f, r0	; 63
    42dc:	0f 90       	pop	r0
    42de:	1f 90       	pop	r1
    42e0:	18 95       	reti

000042e2 <__vector_5>:

SIGNAL(INT4_vect) {
    42e2:	1f 92       	push	r1
    42e4:	0f 92       	push	r0
    42e6:	0f b6       	in	r0, 0x3f	; 63
    42e8:	0f 92       	push	r0
    42ea:	0b b6       	in	r0, 0x3b	; 59
    42ec:	0f 92       	push	r0
    42ee:	11 24       	eor	r1, r1
    42f0:	2f 93       	push	r18
    42f2:	3f 93       	push	r19
    42f4:	4f 93       	push	r20
    42f6:	5f 93       	push	r21
    42f8:	6f 93       	push	r22
    42fa:	7f 93       	push	r23
    42fc:	8f 93       	push	r24
    42fe:	9f 93       	push	r25
    4300:	af 93       	push	r26
    4302:	bf 93       	push	r27
    4304:	ef 93       	push	r30
    4306:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
    4308:	80 91 2a 08 	lds	r24, 0x082A
    430c:	90 91 2b 08 	lds	r25, 0x082B
    4310:	89 2b       	or	r24, r25
    4312:	29 f0       	breq	.+10     	; 0x431e <__vector_5+0x3c>
    intFunc[EXTERNAL_INT_0]();
    4314:	e0 91 2a 08 	lds	r30, 0x082A
    4318:	f0 91 2b 08 	lds	r31, 0x082B
    431c:	19 95       	eicall
}
    431e:	ff 91       	pop	r31
    4320:	ef 91       	pop	r30
    4322:	bf 91       	pop	r27
    4324:	af 91       	pop	r26
    4326:	9f 91       	pop	r25
    4328:	8f 91       	pop	r24
    432a:	7f 91       	pop	r23
    432c:	6f 91       	pop	r22
    432e:	5f 91       	pop	r21
    4330:	4f 91       	pop	r20
    4332:	3f 91       	pop	r19
    4334:	2f 91       	pop	r18
    4336:	0f 90       	pop	r0
    4338:	0b be       	out	0x3b, r0	; 59
    433a:	0f 90       	pop	r0
    433c:	0f be       	out	0x3f, r0	; 63
    433e:	0f 90       	pop	r0
    4340:	1f 90       	pop	r1
    4342:	18 95       	reti

00004344 <__vector_6>:

SIGNAL(INT5_vect) {
    4344:	1f 92       	push	r1
    4346:	0f 92       	push	r0
    4348:	0f b6       	in	r0, 0x3f	; 63
    434a:	0f 92       	push	r0
    434c:	0b b6       	in	r0, 0x3b	; 59
    434e:	0f 92       	push	r0
    4350:	11 24       	eor	r1, r1
    4352:	2f 93       	push	r18
    4354:	3f 93       	push	r19
    4356:	4f 93       	push	r20
    4358:	5f 93       	push	r21
    435a:	6f 93       	push	r22
    435c:	7f 93       	push	r23
    435e:	8f 93       	push	r24
    4360:	9f 93       	push	r25
    4362:	af 93       	push	r26
    4364:	bf 93       	push	r27
    4366:	ef 93       	push	r30
    4368:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
    436a:	80 91 2c 08 	lds	r24, 0x082C
    436e:	90 91 2d 08 	lds	r25, 0x082D
    4372:	89 2b       	or	r24, r25
    4374:	29 f0       	breq	.+10     	; 0x4380 <__vector_6+0x3c>
    intFunc[EXTERNAL_INT_1]();
    4376:	e0 91 2c 08 	lds	r30, 0x082C
    437a:	f0 91 2d 08 	lds	r31, 0x082D
    437e:	19 95       	eicall
}
    4380:	ff 91       	pop	r31
    4382:	ef 91       	pop	r30
    4384:	bf 91       	pop	r27
    4386:	af 91       	pop	r26
    4388:	9f 91       	pop	r25
    438a:	8f 91       	pop	r24
    438c:	7f 91       	pop	r23
    438e:	6f 91       	pop	r22
    4390:	5f 91       	pop	r21
    4392:	4f 91       	pop	r20
    4394:	3f 91       	pop	r19
    4396:	2f 91       	pop	r18
    4398:	0f 90       	pop	r0
    439a:	0b be       	out	0x3b, r0	; 59
    439c:	0f 90       	pop	r0
    439e:	0f be       	out	0x3f, r0	; 63
    43a0:	0f 90       	pop	r0
    43a2:	1f 90       	pop	r1
    43a4:	18 95       	reti

000043a6 <__vector_7>:

SIGNAL(INT6_vect) {
    43a6:	1f 92       	push	r1
    43a8:	0f 92       	push	r0
    43aa:	0f b6       	in	r0, 0x3f	; 63
    43ac:	0f 92       	push	r0
    43ae:	0b b6       	in	r0, 0x3b	; 59
    43b0:	0f 92       	push	r0
    43b2:	11 24       	eor	r1, r1
    43b4:	2f 93       	push	r18
    43b6:	3f 93       	push	r19
    43b8:	4f 93       	push	r20
    43ba:	5f 93       	push	r21
    43bc:	6f 93       	push	r22
    43be:	7f 93       	push	r23
    43c0:	8f 93       	push	r24
    43c2:	9f 93       	push	r25
    43c4:	af 93       	push	r26
    43c6:	bf 93       	push	r27
    43c8:	ef 93       	push	r30
    43ca:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_6])
    43cc:	80 91 36 08 	lds	r24, 0x0836
    43d0:	90 91 37 08 	lds	r25, 0x0837
    43d4:	89 2b       	or	r24, r25
    43d6:	29 f0       	breq	.+10     	; 0x43e2 <__vector_7+0x3c>
    intFunc[EXTERNAL_INT_6]();
    43d8:	e0 91 36 08 	lds	r30, 0x0836
    43dc:	f0 91 37 08 	lds	r31, 0x0837
    43e0:	19 95       	eicall
}
    43e2:	ff 91       	pop	r31
    43e4:	ef 91       	pop	r30
    43e6:	bf 91       	pop	r27
    43e8:	af 91       	pop	r26
    43ea:	9f 91       	pop	r25
    43ec:	8f 91       	pop	r24
    43ee:	7f 91       	pop	r23
    43f0:	6f 91       	pop	r22
    43f2:	5f 91       	pop	r21
    43f4:	4f 91       	pop	r20
    43f6:	3f 91       	pop	r19
    43f8:	2f 91       	pop	r18
    43fa:	0f 90       	pop	r0
    43fc:	0b be       	out	0x3b, r0	; 59
    43fe:	0f 90       	pop	r0
    4400:	0f be       	out	0x3f, r0	; 63
    4402:	0f 90       	pop	r0
    4404:	1f 90       	pop	r1
    4406:	18 95       	reti

00004408 <__vector_8>:

SIGNAL(INT7_vect) {
    4408:	1f 92       	push	r1
    440a:	0f 92       	push	r0
    440c:	0f b6       	in	r0, 0x3f	; 63
    440e:	0f 92       	push	r0
    4410:	0b b6       	in	r0, 0x3b	; 59
    4412:	0f 92       	push	r0
    4414:	11 24       	eor	r1, r1
    4416:	2f 93       	push	r18
    4418:	3f 93       	push	r19
    441a:	4f 93       	push	r20
    441c:	5f 93       	push	r21
    441e:	6f 93       	push	r22
    4420:	7f 93       	push	r23
    4422:	8f 93       	push	r24
    4424:	9f 93       	push	r25
    4426:	af 93       	push	r26
    4428:	bf 93       	push	r27
    442a:	ef 93       	push	r30
    442c:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_7])
    442e:	80 91 38 08 	lds	r24, 0x0838
    4432:	90 91 39 08 	lds	r25, 0x0839
    4436:	89 2b       	or	r24, r25
    4438:	29 f0       	breq	.+10     	; 0x4444 <__vector_8+0x3c>
    intFunc[EXTERNAL_INT_7]();
    443a:	e0 91 38 08 	lds	r30, 0x0838
    443e:	f0 91 39 08 	lds	r31, 0x0839
    4442:	19 95       	eicall
}
    4444:	ff 91       	pop	r31
    4446:	ef 91       	pop	r30
    4448:	bf 91       	pop	r27
    444a:	af 91       	pop	r26
    444c:	9f 91       	pop	r25
    444e:	8f 91       	pop	r24
    4450:	7f 91       	pop	r23
    4452:	6f 91       	pop	r22
    4454:	5f 91       	pop	r21
    4456:	4f 91       	pop	r20
    4458:	3f 91       	pop	r19
    445a:	2f 91       	pop	r18
    445c:	0f 90       	pop	r0
    445e:	0b be       	out	0x3b, r0	; 59
    4460:	0f 90       	pop	r0
    4462:	0f be       	out	0x3f, r0	; 63
    4464:	0f 90       	pop	r0
    4466:	1f 90       	pop	r1
    4468:	18 95       	reti

0000446a <main>:
#include <Arduino.h>

int main(void)
    446a:	cf 93       	push	r28
    446c:	df 93       	push	r29
{
	init();
    446e:	0e 94 a7 22 	call	0x454e	; 0x454e <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    4472:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    4476:	c3 e7       	ldi	r28, 0x73	; 115
    4478:	db e1       	ldi	r29, 0x1B	; 27
#endif
	
	setup();
    
	for (;;) {
		loop();
    447a:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <loop>
		if (serialEventRun) serialEventRun();
    447e:	20 97       	sbiw	r28, 0x00	; 0
    4480:	e1 f3       	breq	.-8      	; 0x447a <main+0x10>
    4482:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <_Z14serialEventRunv>
    4486:	f9 cf       	rjmp	.-14     	; 0x447a <main+0x10>

00004488 <_Znwj>:
#include <new.h>

void * operator new(size_t size)
{
  return malloc(size);
    4488:	0e 94 7e 01 	call	0x2fc	; 0x2fc <malloc>
}
    448c:	08 95       	ret

0000448e <__vector_23>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
    448e:	1f 92       	push	r1
    4490:	0f 92       	push	r0
    4492:	0f b6       	in	r0, 0x3f	; 63
    4494:	0f 92       	push	r0
    4496:	11 24       	eor	r1, r1
    4498:	2f 93       	push	r18
    449a:	3f 93       	push	r19
    449c:	8f 93       	push	r24
    449e:	9f 93       	push	r25
    44a0:	af 93       	push	r26
    44a2:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    44a4:	80 91 3e 08 	lds	r24, 0x083E
    44a8:	90 91 3f 08 	lds	r25, 0x083F
    44ac:	a0 91 40 08 	lds	r26, 0x0840
    44b0:	b0 91 41 08 	lds	r27, 0x0841
	unsigned char f = timer0_fract;
    44b4:	30 91 42 08 	lds	r19, 0x0842

	m += MILLIS_INC;
    44b8:	01 96       	adiw	r24, 0x01	; 1
    44ba:	a1 1d       	adc	r26, r1
    44bc:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    44be:	23 2f       	mov	r18, r19
    44c0:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    44c2:	2d 37       	cpi	r18, 0x7D	; 125
    44c4:	20 f0       	brcs	.+8      	; 0x44ce <__vector_23+0x40>
		f -= FRACT_MAX;
    44c6:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    44c8:	01 96       	adiw	r24, 0x01	; 1
    44ca:	a1 1d       	adc	r26, r1
    44cc:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    44ce:	20 93 42 08 	sts	0x0842, r18
	timer0_millis = m;
    44d2:	80 93 3e 08 	sts	0x083E, r24
    44d6:	90 93 3f 08 	sts	0x083F, r25
    44da:	a0 93 40 08 	sts	0x0840, r26
    44de:	b0 93 41 08 	sts	0x0841, r27
	timer0_overflow_count++;
    44e2:	80 91 3a 08 	lds	r24, 0x083A
    44e6:	90 91 3b 08 	lds	r25, 0x083B
    44ea:	a0 91 3c 08 	lds	r26, 0x083C
    44ee:	b0 91 3d 08 	lds	r27, 0x083D
    44f2:	01 96       	adiw	r24, 0x01	; 1
    44f4:	a1 1d       	adc	r26, r1
    44f6:	b1 1d       	adc	r27, r1
    44f8:	80 93 3a 08 	sts	0x083A, r24
    44fc:	90 93 3b 08 	sts	0x083B, r25
    4500:	a0 93 3c 08 	sts	0x083C, r26
    4504:	b0 93 3d 08 	sts	0x083D, r27
}
    4508:	bf 91       	pop	r27
    450a:	af 91       	pop	r26
    450c:	9f 91       	pop	r25
    450e:	8f 91       	pop	r24
    4510:	3f 91       	pop	r19
    4512:	2f 91       	pop	r18
    4514:	0f 90       	pop	r0
    4516:	0f be       	out	0x3f, r0	; 63
    4518:	0f 90       	pop	r0
    451a:	1f 90       	pop	r1
    451c:	18 95       	reti

0000451e <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    451e:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    4520:	f8 94       	cli
	m = timer0_millis;
    4522:	20 91 3e 08 	lds	r18, 0x083E
    4526:	30 91 3f 08 	lds	r19, 0x083F
    452a:	40 91 40 08 	lds	r20, 0x0840
    452e:	50 91 41 08 	lds	r21, 0x0841
	SREG = oldSREG;
    4532:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    4534:	b9 01       	movw	r22, r18
    4536:	ca 01       	movw	r24, r20
    4538:	08 95       	ret

0000453a <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    453a:	01 97       	sbiw	r24, 0x01	; 1
    453c:	39 f0       	breq	.+14     	; 0x454c <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    453e:	88 0f       	add	r24, r24
    4540:	99 1f       	adc	r25, r25
    4542:	88 0f       	add	r24, r24
    4544:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    4546:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    4548:	01 97       	sbiw	r24, 0x01	; 1
    454a:	f1 f7       	brne	.-4      	; 0x4548 <delayMicroseconds+0xe>
    454c:	08 95       	ret

0000454e <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    454e:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    4550:	84 b5       	in	r24, 0x24	; 36
    4552:	82 60       	ori	r24, 0x02	; 2
    4554:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    4556:	84 b5       	in	r24, 0x24	; 36
    4558:	81 60       	ori	r24, 0x01	; 1
    455a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    455c:	85 b5       	in	r24, 0x25	; 37
    455e:	82 60       	ori	r24, 0x02	; 2
    4560:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    4562:	85 b5       	in	r24, 0x25	; 37
    4564:	81 60       	ori	r24, 0x01	; 1
    4566:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    4568:	ee e6       	ldi	r30, 0x6E	; 110
    456a:	f0 e0       	ldi	r31, 0x00	; 0
    456c:	80 81       	ld	r24, Z
    456e:	81 60       	ori	r24, 0x01	; 1
    4570:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    4572:	e1 e8       	ldi	r30, 0x81	; 129
    4574:	f0 e0       	ldi	r31, 0x00	; 0
    4576:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    4578:	80 81       	ld	r24, Z
    457a:	82 60       	ori	r24, 0x02	; 2
    457c:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    457e:	80 81       	ld	r24, Z
    4580:	81 60       	ori	r24, 0x01	; 1
    4582:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    4584:	e0 e8       	ldi	r30, 0x80	; 128
    4586:	f0 e0       	ldi	r31, 0x00	; 0
    4588:	80 81       	ld	r24, Z
    458a:	81 60       	ori	r24, 0x01	; 1
    458c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    458e:	e1 eb       	ldi	r30, 0xB1	; 177
    4590:	f0 e0       	ldi	r31, 0x00	; 0
    4592:	80 81       	ld	r24, Z
    4594:	84 60       	ori	r24, 0x04	; 4
    4596:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    4598:	e0 eb       	ldi	r30, 0xB0	; 176
    459a:	f0 e0       	ldi	r31, 0x00	; 0
    459c:	80 81       	ld	r24, Z
    459e:	81 60       	ori	r24, 0x01	; 1
    45a0:	80 83       	st	Z, r24
#else
	#warning Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    45a2:	e1 e9       	ldi	r30, 0x91	; 145
    45a4:	f0 e0       	ldi	r31, 0x00	; 0
    45a6:	80 81       	ld	r24, Z
    45a8:	82 60       	ori	r24, 0x02	; 2
    45aa:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    45ac:	80 81       	ld	r24, Z
    45ae:	81 60       	ori	r24, 0x01	; 1
    45b0:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    45b2:	e0 e9       	ldi	r30, 0x90	; 144
    45b4:	f0 e0       	ldi	r31, 0x00	; 0
    45b6:	80 81       	ld	r24, Z
    45b8:	81 60       	ori	r24, 0x01	; 1
    45ba:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    45bc:	e1 ea       	ldi	r30, 0xA1	; 161
    45be:	f0 e0       	ldi	r31, 0x00	; 0
    45c0:	80 81       	ld	r24, Z
    45c2:	82 60       	ori	r24, 0x02	; 2
    45c4:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    45c6:	80 81       	ld	r24, Z
    45c8:	81 60       	ori	r24, 0x01	; 1
    45ca:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    45cc:	e0 ea       	ldi	r30, 0xA0	; 160
    45ce:	f0 e0       	ldi	r31, 0x00	; 0
    45d0:	80 81       	ld	r24, Z
    45d2:	81 60       	ori	r24, 0x01	; 1
    45d4:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    45d6:	e1 e2       	ldi	r30, 0x21	; 33
    45d8:	f1 e0       	ldi	r31, 0x01	; 1
    45da:	80 81       	ld	r24, Z
    45dc:	82 60       	ori	r24, 0x02	; 2
    45de:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    45e0:	80 81       	ld	r24, Z
    45e2:	81 60       	ori	r24, 0x01	; 1
    45e4:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    45e6:	e0 e2       	ldi	r30, 0x20	; 32
    45e8:	f1 e0       	ldi	r31, 0x01	; 1
    45ea:	80 81       	ld	r24, Z
    45ec:	81 60       	ori	r24, 0x01	; 1
    45ee:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    45f0:	ea e7       	ldi	r30, 0x7A	; 122
    45f2:	f0 e0       	ldi	r31, 0x00	; 0
    45f4:	80 81       	ld	r24, Z
    45f6:	84 60       	ori	r24, 0x04	; 4
    45f8:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    45fa:	80 81       	ld	r24, Z
    45fc:	82 60       	ori	r24, 0x02	; 2
    45fe:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    4600:	80 81       	ld	r24, Z
    4602:	81 60       	ori	r24, 0x01	; 1
    4604:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    4606:	80 81       	ld	r24, Z
    4608:	80 68       	ori	r24, 0x80	; 128
    460a:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    460c:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    4610:	08 95       	ret

00004612 <analogRead>:

int analogRead(uint8_t pin)
{
    4612:	38 2f       	mov	r19, r24
	uint8_t low, high;

#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
    4614:	86 33       	cpi	r24, 0x36	; 54
    4616:	08 f0       	brcs	.+2      	; 0x461a <analogRead+0x8>
    4618:	36 53       	subi	r19, 0x36	; 54
	pin = analogPinToChannel(pin);
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
#elif defined(ADCSRB) && defined(MUX5)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
    461a:	20 91 7b 00 	lds	r18, 0x007B
    461e:	83 2f       	mov	r24, r19
    4620:	86 95       	lsr	r24
    4622:	86 95       	lsr	r24
    4624:	86 95       	lsr	r24
    4626:	90 e0       	ldi	r25, 0x00	; 0
    4628:	81 70       	andi	r24, 0x01	; 1
    462a:	90 70       	andi	r25, 0x00	; 0
    462c:	43 e0       	ldi	r20, 0x03	; 3
    462e:	88 0f       	add	r24, r24
    4630:	99 1f       	adc	r25, r25
    4632:	4a 95       	dec	r20
    4634:	e1 f7       	brne	.-8      	; 0x462e <analogRead+0x1c>
    4636:	27 7f       	andi	r18, 0xF7	; 247
    4638:	28 2b       	or	r18, r24
    463a:	20 93 7b 00 	sts	0x007B, r18
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    463e:	37 70       	andi	r19, 0x07	; 7
    4640:	80 91 c3 04 	lds	r24, 0x04C3
    4644:	82 95       	swap	r24
    4646:	88 0f       	add	r24, r24
    4648:	88 0f       	add	r24, r24
    464a:	80 7c       	andi	r24, 0xC0	; 192
    464c:	83 2b       	or	r24, r19
    464e:	80 93 7c 00 	sts	0x007C, r24
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    4652:	80 91 7a 00 	lds	r24, 0x007A
    4656:	80 64       	ori	r24, 0x40	; 64
    4658:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    465c:	80 91 7a 00 	lds	r24, 0x007A
    4660:	86 fd       	sbrc	r24, 6
    4662:	fc cf       	rjmp	.-8      	; 0x465c <analogRead+0x4a>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    4664:	20 91 78 00 	lds	r18, 0x0078
	high = ADCH;
    4668:	40 91 79 00 	lds	r20, 0x0079
    466c:	94 2f       	mov	r25, r20
    466e:	80 e0       	ldi	r24, 0x00	; 0
    4670:	30 e0       	ldi	r19, 0x00	; 0
    4672:	28 2b       	or	r18, r24
    4674:	39 2b       	or	r19, r25
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
}
    4676:	c9 01       	movw	r24, r18
    4678:	08 95       	ret

0000467a <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    467a:	cf 93       	push	r28
    467c:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    467e:	48 2f       	mov	r20, r24
    4680:	50 e0       	ldi	r21, 0x00	; 0
    4682:	ca 01       	movw	r24, r20
    4684:	86 5f       	subi	r24, 0xF6	; 246
    4686:	9d 4f       	sbci	r25, 0xFD	; 253
    4688:	fc 01       	movw	r30, r24
    468a:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
    468c:	4c 53       	subi	r20, 0x3C	; 60
    468e:	5e 4f       	sbci	r21, 0xFE	; 254
    4690:	fa 01       	movw	r30, r20
    4692:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    4694:	88 23       	and	r24, r24
    4696:	69 f1       	breq	.+90     	; 0x46f2 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    4698:	90 e0       	ldi	r25, 0x00	; 0
    469a:	88 0f       	add	r24, r24
    469c:	99 1f       	adc	r25, r25
    469e:	fc 01       	movw	r30, r24
    46a0:	ea 58       	subi	r30, 0x8A	; 138
    46a2:	fe 4f       	sbci	r31, 0xFE	; 254
    46a4:	a5 91       	lpm	r26, Z+
    46a6:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
    46a8:	fc 01       	movw	r30, r24
    46aa:	e0 57       	subi	r30, 0x70	; 112
    46ac:	fe 4f       	sbci	r31, 0xFE	; 254
    46ae:	c5 91       	lpm	r28, Z+
    46b0:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
    46b2:	66 23       	and	r22, r22
    46b4:	51 f4       	brne	.+20     	; 0x46ca <pinMode+0x50>
		uint8_t oldSREG = SREG;
    46b6:	2f b7       	in	r18, 0x3f	; 63
                cli();
    46b8:	f8 94       	cli
		*reg &= ~bit;
    46ba:	8c 91       	ld	r24, X
    46bc:	93 2f       	mov	r25, r19
    46be:	90 95       	com	r25
    46c0:	89 23       	and	r24, r25
    46c2:	8c 93       	st	X, r24
		*out &= ~bit;
    46c4:	88 81       	ld	r24, Y
    46c6:	89 23       	and	r24, r25
    46c8:	0b c0       	rjmp	.+22     	; 0x46e0 <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    46ca:	62 30       	cpi	r22, 0x02	; 2
    46cc:	61 f4       	brne	.+24     	; 0x46e6 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    46ce:	2f b7       	in	r18, 0x3f	; 63
                cli();
    46d0:	f8 94       	cli
		*reg &= ~bit;
    46d2:	8c 91       	ld	r24, X
    46d4:	93 2f       	mov	r25, r19
    46d6:	90 95       	com	r25
    46d8:	89 23       	and	r24, r25
    46da:	8c 93       	st	X, r24
		*out |= bit;
    46dc:	88 81       	ld	r24, Y
    46de:	83 2b       	or	r24, r19
    46e0:	88 83       	st	Y, r24
		SREG = oldSREG;
    46e2:	2f bf       	out	0x3f, r18	; 63
    46e4:	06 c0       	rjmp	.+12     	; 0x46f2 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    46e6:	9f b7       	in	r25, 0x3f	; 63
                cli();
    46e8:	f8 94       	cli
		*reg |= bit;
    46ea:	8c 91       	ld	r24, X
    46ec:	83 2b       	or	r24, r19
    46ee:	8c 93       	st	X, r24
		SREG = oldSREG;
    46f0:	9f bf       	out	0x3f, r25	; 63
	}
}
    46f2:	df 91       	pop	r29
    46f4:	cf 91       	pop	r28
    46f6:	08 95       	ret

000046f8 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    46f8:	89 30       	cpi	r24, 0x09	; 9
    46fa:	09 f4       	brne	.+2      	; 0x46fe <turnOffPWM+0x6>
    46fc:	49 c0       	rjmp	.+146    	; 0x4790 <turnOffPWM+0x98>
    46fe:	8a 30       	cpi	r24, 0x0A	; 10
    4700:	a0 f4       	brcc	.+40     	; 0x472a <turnOffPWM+0x32>
    4702:	84 30       	cpi	r24, 0x04	; 4
    4704:	51 f1       	breq	.+84     	; 0x475a <turnOffPWM+0x62>
    4706:	85 30       	cpi	r24, 0x05	; 5
    4708:	40 f4       	brcc	.+16     	; 0x471a <turnOffPWM+0x22>
    470a:	82 30       	cpi	r24, 0x02	; 2
    470c:	79 f1       	breq	.+94     	; 0x476c <turnOffPWM+0x74>
    470e:	83 30       	cpi	r24, 0x03	; 3
    4710:	00 f5       	brcc	.+64     	; 0x4752 <turnOffPWM+0x5a>
    4712:	81 30       	cpi	r24, 0x01	; 1
    4714:	09 f0       	breq	.+2      	; 0x4718 <turnOffPWM+0x20>
    4716:	63 c0       	rjmp	.+198    	; 0x47de <turnOffPWM+0xe6>
    4718:	26 c0       	rjmp	.+76     	; 0x4766 <turnOffPWM+0x6e>
    471a:	87 30       	cpi	r24, 0x07	; 7
    471c:	79 f1       	breq	.+94     	; 0x477c <turnOffPWM+0x84>
    471e:	88 30       	cpi	r24, 0x08	; 8
    4720:	98 f5       	brcc	.+102    	; 0x4788 <turnOffPWM+0x90>
    4722:	86 30       	cpi	r24, 0x06	; 6
    4724:	09 f0       	breq	.+2      	; 0x4728 <turnOffPWM+0x30>
    4726:	5b c0       	rjmp	.+182    	; 0x47de <turnOffPWM+0xe6>
    4728:	25 c0       	rjmp	.+74     	; 0x4774 <turnOffPWM+0x7c>
    472a:	8d 30       	cpi	r24, 0x0D	; 13
    472c:	09 f4       	brne	.+2      	; 0x4730 <turnOffPWM+0x38>
    472e:	42 c0       	rjmp	.+132    	; 0x47b4 <turnOffPWM+0xbc>
    4730:	8e 30       	cpi	r24, 0x0E	; 14
    4732:	28 f4       	brcc	.+10     	; 0x473e <turnOffPWM+0x46>
    4734:	8b 30       	cpi	r24, 0x0B	; 11
    4736:	b1 f1       	breq	.+108    	; 0x47a4 <turnOffPWM+0xac>
    4738:	8c 30       	cpi	r24, 0x0C	; 12
    473a:	c0 f5       	brcc	.+112    	; 0x47ac <turnOffPWM+0xb4>
    473c:	2d c0       	rjmp	.+90     	; 0x4798 <turnOffPWM+0xa0>
    473e:	80 31       	cpi	r24, 0x10	; 16
    4740:	09 f4       	brne	.+2      	; 0x4744 <turnOffPWM+0x4c>
    4742:	42 c0       	rjmp	.+132    	; 0x47c8 <turnOffPWM+0xd0>
    4744:	81 31       	cpi	r24, 0x11	; 17
    4746:	09 f4       	brne	.+2      	; 0x474a <turnOffPWM+0x52>
    4748:	45 c0       	rjmp	.+138    	; 0x47d4 <turnOffPWM+0xdc>
    474a:	8f 30       	cpi	r24, 0x0F	; 15
    474c:	09 f0       	breq	.+2      	; 0x4750 <turnOffPWM+0x58>
    474e:	47 c0       	rjmp	.+142    	; 0x47de <turnOffPWM+0xe6>
    4750:	37 c0       	rjmp	.+110    	; 0x47c0 <turnOffPWM+0xc8>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    4752:	80 91 80 00 	lds	r24, 0x0080
    4756:	8f 77       	andi	r24, 0x7F	; 127
    4758:	03 c0       	rjmp	.+6      	; 0x4760 <turnOffPWM+0x68>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    475a:	80 91 80 00 	lds	r24, 0x0080
    475e:	8f 7d       	andi	r24, 0xDF	; 223
    4760:	80 93 80 00 	sts	0x0080, r24
    4764:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    4766:	84 b5       	in	r24, 0x24	; 36
    4768:	8f 77       	andi	r24, 0x7F	; 127
    476a:	02 c0       	rjmp	.+4      	; 0x4770 <turnOffPWM+0x78>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    476c:	84 b5       	in	r24, 0x24	; 36
    476e:	8f 7d       	andi	r24, 0xDF	; 223
    4770:	84 bd       	out	0x24, r24	; 36
    4772:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    4774:	80 91 b0 00 	lds	r24, 0x00B0
    4778:	8f 77       	andi	r24, 0x7F	; 127
    477a:	03 c0       	rjmp	.+6      	; 0x4782 <turnOffPWM+0x8a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    477c:	80 91 b0 00 	lds	r24, 0x00B0
    4780:	8f 7d       	andi	r24, 0xDF	; 223
    4782:	80 93 b0 00 	sts	0x00B0, r24
    4786:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    4788:	80 91 90 00 	lds	r24, 0x0090
    478c:	8f 77       	andi	r24, 0x7F	; 127
    478e:	07 c0       	rjmp	.+14     	; 0x479e <turnOffPWM+0xa6>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    4790:	80 91 90 00 	lds	r24, 0x0090
    4794:	8f 7d       	andi	r24, 0xDF	; 223
    4796:	03 c0       	rjmp	.+6      	; 0x479e <turnOffPWM+0xa6>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    4798:	80 91 90 00 	lds	r24, 0x0090
    479c:	87 7f       	andi	r24, 0xF7	; 247
    479e:	80 93 90 00 	sts	0x0090, r24
    47a2:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    47a4:	80 91 a0 00 	lds	r24, 0x00A0
    47a8:	8f 77       	andi	r24, 0x7F	; 127
    47aa:	07 c0       	rjmp	.+14     	; 0x47ba <turnOffPWM+0xc2>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    47ac:	80 91 a0 00 	lds	r24, 0x00A0
    47b0:	8f 7d       	andi	r24, 0xDF	; 223
    47b2:	03 c0       	rjmp	.+6      	; 0x47ba <turnOffPWM+0xc2>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    47b4:	80 91 a0 00 	lds	r24, 0x00A0
    47b8:	87 7f       	andi	r24, 0xF7	; 247
    47ba:	80 93 a0 00 	sts	0x00A0, r24
    47be:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    47c0:	80 91 20 01 	lds	r24, 0x0120
    47c4:	8f 77       	andi	r24, 0x7F	; 127
    47c6:	03 c0       	rjmp	.+6      	; 0x47ce <turnOffPWM+0xd6>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    47c8:	80 91 20 01 	lds	r24, 0x0120
    47cc:	8f 7d       	andi	r24, 0xDF	; 223
    47ce:	80 93 20 01 	sts	0x0120, r24
    47d2:	08 95       	ret
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    47d4:	80 91 20 01 	lds	r24, 0x0120
    47d8:	87 7f       	andi	r24, 0xF7	; 247
    47da:	80 93 20 01 	sts	0x0120, r24
    47de:	08 95       	ret

000047e0 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    47e0:	ff 92       	push	r15
    47e2:	0f 93       	push	r16
    47e4:	1f 93       	push	r17
    47e6:	f6 2e       	mov	r15, r22
	uint8_t timer = digitalPinToTimer(pin);
    47e8:	48 2f       	mov	r20, r24
    47ea:	50 e0       	ldi	r21, 0x00	; 0
    47ec:	ca 01       	movw	r24, r20
    47ee:	80 5b       	subi	r24, 0xB0	; 176
    47f0:	9d 4f       	sbci	r25, 0xFD	; 253
    47f2:	fc 01       	movw	r30, r24
    47f4:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    47f6:	ca 01       	movw	r24, r20
    47f8:	86 5f       	subi	r24, 0xF6	; 246
    47fa:	9d 4f       	sbci	r25, 0xFD	; 253
    47fc:	fc 01       	movw	r30, r24
    47fe:	14 91       	lpm	r17, Z+
	uint8_t port = digitalPinToPort(pin);
    4800:	4c 53       	subi	r20, 0x3C	; 60
    4802:	5e 4f       	sbci	r21, 0xFE	; 254
    4804:	fa 01       	movw	r30, r20
    4806:	04 91       	lpm	r16, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    4808:	00 23       	and	r16, r16
    480a:	c9 f0       	breq	.+50     	; 0x483e <digitalWrite+0x5e>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    480c:	22 23       	and	r18, r18
    480e:	19 f0       	breq	.+6      	; 0x4816 <digitalWrite+0x36>
    4810:	82 2f       	mov	r24, r18
    4812:	0e 94 7c 23 	call	0x46f8	; 0x46f8 <turnOffPWM>

	out = portOutputRegister(port);
    4816:	e0 2f       	mov	r30, r16
    4818:	f0 e0       	ldi	r31, 0x00	; 0
    481a:	ee 0f       	add	r30, r30
    481c:	ff 1f       	adc	r31, r31
    481e:	e0 57       	subi	r30, 0x70	; 112
    4820:	fe 4f       	sbci	r31, 0xFE	; 254
    4822:	a5 91       	lpm	r26, Z+
    4824:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    4826:	9f b7       	in	r25, 0x3f	; 63
	cli();
    4828:	f8 94       	cli

	if (val == LOW) {
    482a:	ff 20       	and	r15, r15
    482c:	21 f4       	brne	.+8      	; 0x4836 <digitalWrite+0x56>
		*out &= ~bit;
    482e:	8c 91       	ld	r24, X
    4830:	10 95       	com	r17
    4832:	81 23       	and	r24, r17
    4834:	02 c0       	rjmp	.+4      	; 0x483a <digitalWrite+0x5a>
	} else {
		*out |= bit;
    4836:	8c 91       	ld	r24, X
    4838:	81 2b       	or	r24, r17
    483a:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    483c:	9f bf       	out	0x3f, r25	; 63
}
    483e:	1f 91       	pop	r17
    4840:	0f 91       	pop	r16
    4842:	ff 90       	pop	r15
    4844:	08 95       	ret

00004846 <digitalRead>:

int digitalRead(uint8_t pin)
{
    4846:	0f 93       	push	r16
    4848:	1f 93       	push	r17
	uint8_t timer = digitalPinToTimer(pin);
    484a:	48 2f       	mov	r20, r24
    484c:	50 e0       	ldi	r21, 0x00	; 0
    484e:	ca 01       	movw	r24, r20
    4850:	80 5b       	subi	r24, 0xB0	; 176
    4852:	9d 4f       	sbci	r25, 0xFD	; 253
    4854:	fc 01       	movw	r30, r24
    4856:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    4858:	ca 01       	movw	r24, r20
    485a:	86 5f       	subi	r24, 0xF6	; 246
    485c:	9d 4f       	sbci	r25, 0xFD	; 253
    485e:	fc 01       	movw	r30, r24
    4860:	04 91       	lpm	r16, Z+
	uint8_t port = digitalPinToPort(pin);
    4862:	4c 53       	subi	r20, 0x3C	; 60
    4864:	5e 4f       	sbci	r21, 0xFE	; 254
    4866:	fa 01       	movw	r30, r20
    4868:	14 91       	lpm	r17, Z+

	if (port == NOT_A_PIN) return LOW;
    486a:	11 23       	and	r17, r17
    486c:	19 f4       	brne	.+6      	; 0x4874 <digitalRead+0x2e>
    486e:	20 e0       	ldi	r18, 0x00	; 0
    4870:	30 e0       	ldi	r19, 0x00	; 0
    4872:	15 c0       	rjmp	.+42     	; 0x489e <digitalRead+0x58>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    4874:	22 23       	and	r18, r18
    4876:	19 f0       	breq	.+6      	; 0x487e <digitalRead+0x38>
    4878:	82 2f       	mov	r24, r18
    487a:	0e 94 7c 23 	call	0x46f8	; 0x46f8 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    487e:	81 2f       	mov	r24, r17
    4880:	90 e0       	ldi	r25, 0x00	; 0
    4882:	88 0f       	add	r24, r24
    4884:	99 1f       	adc	r25, r25
    4886:	86 55       	subi	r24, 0x56	; 86
    4888:	9e 4f       	sbci	r25, 0xFE	; 254
    488a:	fc 01       	movw	r30, r24
    488c:	a5 91       	lpm	r26, Z+
    488e:	b4 91       	lpm	r27, Z+
    4890:	8c 91       	ld	r24, X
    4892:	20 e0       	ldi	r18, 0x00	; 0
    4894:	30 e0       	ldi	r19, 0x00	; 0
    4896:	80 23       	and	r24, r16
    4898:	11 f0       	breq	.+4      	; 0x489e <digitalRead+0x58>
    489a:	21 e0       	ldi	r18, 0x01	; 1
    489c:	30 e0       	ldi	r19, 0x00	; 0
	return LOW;
}
    489e:	c9 01       	movw	r24, r18
    48a0:	1f 91       	pop	r17
    48a2:	0f 91       	pop	r16
    48a4:	08 95       	ret

000048a6 <__mulsi3>:
    48a6:	62 9f       	mul	r22, r18
    48a8:	d0 01       	movw	r26, r0
    48aa:	73 9f       	mul	r23, r19
    48ac:	f0 01       	movw	r30, r0
    48ae:	82 9f       	mul	r24, r18
    48b0:	e0 0d       	add	r30, r0
    48b2:	f1 1d       	adc	r31, r1
    48b4:	64 9f       	mul	r22, r20
    48b6:	e0 0d       	add	r30, r0
    48b8:	f1 1d       	adc	r31, r1
    48ba:	92 9f       	mul	r25, r18
    48bc:	f0 0d       	add	r31, r0
    48be:	83 9f       	mul	r24, r19
    48c0:	f0 0d       	add	r31, r0
    48c2:	74 9f       	mul	r23, r20
    48c4:	f0 0d       	add	r31, r0
    48c6:	65 9f       	mul	r22, r21
    48c8:	f0 0d       	add	r31, r0
    48ca:	99 27       	eor	r25, r25
    48cc:	72 9f       	mul	r23, r18
    48ce:	b0 0d       	add	r27, r0
    48d0:	e1 1d       	adc	r30, r1
    48d2:	f9 1f       	adc	r31, r25
    48d4:	63 9f       	mul	r22, r19
    48d6:	b0 0d       	add	r27, r0
    48d8:	e1 1d       	adc	r30, r1
    48da:	f9 1f       	adc	r31, r25
    48dc:	bd 01       	movw	r22, r26
    48de:	cf 01       	movw	r24, r30
    48e0:	11 24       	eor	r1, r1
    48e2:	08 95       	ret

000048e4 <__udivmodhi4>:
    48e4:	aa 1b       	sub	r26, r26
    48e6:	bb 1b       	sub	r27, r27
    48e8:	51 e1       	ldi	r21, 0x11	; 17
    48ea:	07 c0       	rjmp	.+14     	; 0x48fa <__udivmodhi4_ep>

000048ec <__udivmodhi4_loop>:
    48ec:	aa 1f       	adc	r26, r26
    48ee:	bb 1f       	adc	r27, r27
    48f0:	a6 17       	cp	r26, r22
    48f2:	b7 07       	cpc	r27, r23
    48f4:	10 f0       	brcs	.+4      	; 0x48fa <__udivmodhi4_ep>
    48f6:	a6 1b       	sub	r26, r22
    48f8:	b7 0b       	sbc	r27, r23

000048fa <__udivmodhi4_ep>:
    48fa:	88 1f       	adc	r24, r24
    48fc:	99 1f       	adc	r25, r25
    48fe:	5a 95       	dec	r21
    4900:	a9 f7       	brne	.-22     	; 0x48ec <__udivmodhi4_loop>
    4902:	80 95       	com	r24
    4904:	90 95       	com	r25
    4906:	bc 01       	movw	r22, r24
    4908:	cd 01       	movw	r24, r26
    490a:	08 95       	ret

0000490c <__udivmodsi4>:
    490c:	a1 e2       	ldi	r26, 0x21	; 33
    490e:	1a 2e       	mov	r1, r26
    4910:	aa 1b       	sub	r26, r26
    4912:	bb 1b       	sub	r27, r27
    4914:	fd 01       	movw	r30, r26
    4916:	0d c0       	rjmp	.+26     	; 0x4932 <__udivmodsi4_ep>

00004918 <__udivmodsi4_loop>:
    4918:	aa 1f       	adc	r26, r26
    491a:	bb 1f       	adc	r27, r27
    491c:	ee 1f       	adc	r30, r30
    491e:	ff 1f       	adc	r31, r31
    4920:	a2 17       	cp	r26, r18
    4922:	b3 07       	cpc	r27, r19
    4924:	e4 07       	cpc	r30, r20
    4926:	f5 07       	cpc	r31, r21
    4928:	20 f0       	brcs	.+8      	; 0x4932 <__udivmodsi4_ep>
    492a:	a2 1b       	sub	r26, r18
    492c:	b3 0b       	sbc	r27, r19
    492e:	e4 0b       	sbc	r30, r20
    4930:	f5 0b       	sbc	r31, r21

00004932 <__udivmodsi4_ep>:
    4932:	66 1f       	adc	r22, r22
    4934:	77 1f       	adc	r23, r23
    4936:	88 1f       	adc	r24, r24
    4938:	99 1f       	adc	r25, r25
    493a:	1a 94       	dec	r1
    493c:	69 f7       	brne	.-38     	; 0x4918 <__udivmodsi4_loop>
    493e:	60 95       	com	r22
    4940:	70 95       	com	r23
    4942:	80 95       	com	r24
    4944:	90 95       	com	r25
    4946:	9b 01       	movw	r18, r22
    4948:	ac 01       	movw	r20, r24
    494a:	bd 01       	movw	r22, r26
    494c:	cf 01       	movw	r24, r30
    494e:	08 95       	ret

00004950 <__tablejump2__>:
    4950:	ee 0f       	add	r30, r30
    4952:	ff 1f       	adc	r31, r31

00004954 <__tablejump__>:
    4954:	05 90       	lpm	r0, Z+
    4956:	f4 91       	lpm	r31, Z+
    4958:	e0 2d       	mov	r30, r0
    495a:	19 94       	eijmp

0000495c <__do_global_dtors>:
    495c:	12 e0       	ldi	r17, 0x02	; 2
    495e:	cc e9       	ldi	r28, 0x9C	; 156
    4960:	d2 e0       	ldi	r29, 0x02	; 2
    4962:	04 c0       	rjmp	.+8      	; 0x496c <.do_global_dtors_start>

00004964 <.do_global_dtors_loop>:
    4964:	fe 01       	movw	r30, r28
    4966:	0e 94 aa 24 	call	0x4954	; 0x4954 <__tablejump__>
    496a:	22 96       	adiw	r28, 0x02	; 2

0000496c <.do_global_dtors_start>:
    496c:	ce 39       	cpi	r28, 0x9E	; 158
    496e:	d1 07       	cpc	r29, r17
    4970:	c9 f7       	brne	.-14     	; 0x4964 <.do_global_dtors_loop>
    4972:	f8 94       	cli

00004974 <__stop_program>:
    4974:	ff cf       	rjmp	.-2      	; 0x4974 <__stop_program>
